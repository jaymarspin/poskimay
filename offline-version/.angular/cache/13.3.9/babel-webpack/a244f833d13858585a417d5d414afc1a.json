{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchema, firstTeachers, partialImport } from '../utils/types-test-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport { Toast } from '@capacitor/toast';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestTypesPage = /*#__PURE__*/(() => {\n  class TestTypesPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        _this.platform = _this._sqlite.platform;\n\n        if (_this.platform !== 'electron') {\n          const showProgessToast = /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (message) {\n              yield Toast.show({\n                text: message,\n                duration: 'short',\n                position: 'top'\n              });\n            });\n\n            return function showProgessToast(_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }();\n\n          console.log(_this._sqlite);\n          _this.importListener = yield _this._sqlite.sqlitePlugin.addListener('sqliteImportProgressEvent', info => {\n            showProgessToast(info.progress);\n          });\n          _this.exportListener = yield _this._sqlite.sqlitePlugin.addListener('sqliteExportProgressEvent', info => {\n            showProgessToast(info.progress);\n          });\n        }\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    ngOnDestroy() {\n      if (this.platform !== 'electron') {\n        this.importListener.remove();\n        this.exportListener.remove();\n      }\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\");\n          var retDict = yield _this2._sqlite.retrieveAllConnections();\n          /*      for (var conn in retDict) {\n                  console.log(`connection: ${conn}`)\n                }\n          */\n          // initialize the connection\n\n          let db;\n\n          if ((yield _this2._sqlite.isConnection(\"testTypes.db\")).result) {\n            db = yield _this2._sqlite.retrieveConnection(\"testTypes.db\");\n          } else db = yield _this2._sqlite.createConnection(\"testTypes.db\", false, \"no-encryption\", 1); // check if the databases exist \n          // and delete it for multiple successive tests\n\n\n          yield deleteDatabase(db); // open db testNew\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema, false);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable(); // set the synchronization date\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // add first teachers in db\n\n          ret = yield db.execute(firstTeachers, false);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute 2 teachers failed\"));\n          } // select all teachers in db\n\n\n          ret = yield db.query(\"SELECT * FROM teachers;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Brown\" || ret.values[1].name !== \"Dupont\") {\n            return Promise.reject(new Error(\"Query 1 teachers failed\"));\n          } // update age with statement and values              \n\n\n          let sqlcmd = \"UPDATE teachers SET age = ?, office = ? WHERE id = ?;\";\n          let values = [41, \"ABC\", 1];\n          ret = yield db.run(sqlcmd, values, false);\n          values = [23, \"AEF\", 2];\n          ret = yield db.run(sqlcmd, values, false); // select all teachers in db\n\n          ret = yield db.query(\"SELECT * FROM teachers;\"); // select teachers where age > 40 in db\n\n          sqlcmd = \"SELECT name,email,age FROM teachers WHERE age > ?\";\n          ret = yield db.query(sqlcmd, [40]);\n\n          if (ret.values.length !== 1 || ret.values[0].name !== \"Brown\") {\n            return Promise.reject(new Error(\"Query 2 teachers failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"testTypes.db\"); // partial import\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(partialImport));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport1 failed\")); // create the connection to the database\n\n          db = yield _this2._sqlite.createConnection(\"testTypes.db\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'testTypes.db' after 'partial' failed\")); // open db \"testTypes\"\n\n          yield db.open(); // select teachers with \"office\" is null\n\n          sqlcmd = \"SELECT * FROM teachers where office IS NULL;\";\n          result = yield db.query(sqlcmd);\n\n          if (result.values.length !== 1 || result.values[0].name !== \"MacLaren\") {\n            return Promise.reject(new Error(\"Query 3 Teachers failed\"));\n          } // export full json\n\n\n          let jsonObj = yield db.exportToJson('full'); // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(jsonObj.export));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid export 'full' failed\"));\n          }\n\n          if (jsonObj.export.database != \"testTypes\" || jsonObj.export.version != 1 || jsonObj.export.mode != \"full\" || jsonObj.export.tables.length != 2) {\n            return Promise.reject(new Error(\"Export Json failed\"));\n          } // Import exported json object\n\n\n          jsonObj.export.database = \"testTypesImported\";\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(jsonObj.export));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\")); // create the connection to the database\n\n          db = yield _this2._sqlite.createConnection(\"testTypesImported\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'testTypesImported' after 'full' failed\")); // open db \"testTypesImported\"\n\n          yield db.open(); // select all teachers in db\n\n          ret = yield db.query(\"SELECT * FROM teachers;\");\n\n          if (ret.values.length !== 5 || ret.values[0].name !== \"Brown\" || ret.values[1].name !== \"Dupont\" || ret.values[2].name !== \"MacLaren\" || ret.values[3].name !== \"Bannister\" || ret.values[4].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 4 teachers failed\"));\n          } // select all classess in db\n\n\n          ret = yield db.query(\"SELECT * FROM classes;\");\n\n          if (ret.values.length !== 3 || ret.values[0].courseCode !== 1 || ret.values[0].dayOfWeek != \"Monday\" || ret.values[1].courseCode !== 2 || ret.values[1].dayOfWeek != \"Wednesday\" || ret.values[2].courseCode !== 1 || ret.values[2].dayOfWeek != \"Friday\") {\n            return Promise.reject(new Error(\"Query 5 classes failed\"));\n          } // Check Connections Consistency\n\n\n          ret = yield _this2._sqlite.checkConnectionsConsistency();\n\n          if (!ret.result) {\n            return Promise.reject(new Error(\"You must redefined your connections\"));\n          }\n\n          result = yield _this2._sqlite.isConnection(\"testTypes\");\n\n          if (result.result) {\n            // close the connection testTypes\n            yield _this2._sqlite.closeConnection(\"testTypes\");\n          }\n\n          result = yield _this2._sqlite.isConnection(\"testTypesImported\");\n\n          if (result.result) {\n            // close the connection testTypesImported\n            yield _this2._sqlite.closeConnection(\"testTypesImported\");\n          }\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestTypesPage.ɵfac = function TestTypesPage_Factory(t) {\n    return new (t || TestTypesPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestTypesPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestTypesPage,\n    selectors: [[\"app-testtypes\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestTypesPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestTypes \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestTypes\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3R0eXBlcy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0dHlwZXMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"]\n  });\n  return TestTypesPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testtypes/testtypes.page.ts"],"names":["createSchema","firstTeachers","partialImport","deleteDatabase","Dialog","Toast","i0","i1","i2","i3","TestTypesPage","constructor","_sqlite","_detailService","detail","initPlugin","ngAfterViewInit","showAlert","message","alert","title","platform","showProgessToast","show","text","duration","position","console","log","importListener","sqlitePlugin","addListener","info","progress","exportListener","runTest","document","querySelector","classList","remove","err","ngOnDestroy","result","echo","retDict","retrieveAllConnections","db","isConnection","retrieveConnection","createConnection","open","ret","execute","changes","Promise","reject","Error","createSyncTable","syncDate","setSyncDate","query","values","length","name","sqlcmd","run","closeConnection","importFromJson","JSON","stringify","jsonObj","exportToJson","isJsonValid","export","database","version","mode","tables","courseCode","dayOfWeek","checkConnectionsConsistency","resolve","ɵfac","TestTypesPage_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestTypesPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { createSchema, firstTeachers, partialImport } from '../utils/types-test-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport { Toast } from '@capacitor/toast';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class TestTypesPage {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.detail = false;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        this.platform = this._sqlite.platform;\n        if (this.platform !== 'electron') {\n            const showProgessToast = async (message) => {\n                await Toast.show({\n                    text: message,\n                    duration: 'short',\n                    position: 'top'\n                });\n            };\n            console.log(this._sqlite);\n            this.importListener = await this._sqlite.sqlitePlugin.addListener('sqliteImportProgressEvent', (info) => {\n                showProgessToast(info.progress);\n            });\n            this.exportListener = await this._sqlite.sqlitePlugin.addListener('sqliteExportProgressEvent', (info) => {\n                showProgessToast(info.progress);\n            });\n        }\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    ngOnDestroy() {\n        if (this.platform !== 'electron') {\n            this.importListener.remove();\n            this.exportListener.remove();\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            var retDict = await this._sqlite.retrieveAllConnections();\n            /*      for (var conn in retDict) {\n                    console.log(`connection: ${conn}`)\n                  }\n            */\n            // initialize the connection\n            let db;\n            if ((await this._sqlite.isConnection(\"testTypes.db\")).result) {\n                db = await this._sqlite.retrieveConnection(\"testTypes.db\");\n            }\n            else\n                db = await this._sqlite\n                    .createConnection(\"testTypes.db\", false, \"no-encryption\", 1);\n            // check if the databases exist \n            // and delete it for multiple successive tests\n            await deleteDatabase(db);\n            // open db testNew\n            await db.open();\n            // create tables in db\n            let ret = await db.execute(createSchema, false);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSchema failed\"));\n            }\n            // create synchronization table \n            ret = await db.createSyncTable();\n            // set the synchronization date\n            const syncDate = \"2020-11-25T08:30:25.000Z\";\n            await db.setSyncDate(syncDate);\n            // add first teachers in db\n            ret = await db.execute(firstTeachers, false);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute 2 teachers failed\"));\n            }\n            // select all teachers in db\n            ret = await db.query(\"SELECT * FROM teachers;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Brown\" ||\n                ret.values[1].name !== \"Dupont\") {\n                return Promise.reject(new Error(\"Query 1 teachers failed\"));\n            }\n            // update age with statement and values              \n            let sqlcmd = \"UPDATE teachers SET age = ?, office = ? WHERE id = ?;\";\n            let values = [41, \"ABC\", 1];\n            ret = await db.run(sqlcmd, values, false);\n            values = [23, \"AEF\", 2];\n            ret = await db.run(sqlcmd, values, false);\n            // select all teachers in db\n            ret = await db.query(\"SELECT * FROM teachers;\");\n            // select teachers where age > 40 in db\n            sqlcmd = \"SELECT name,email,age FROM teachers WHERE age > ?\";\n            ret = await db.query(sqlcmd, [40]);\n            if (ret.values.length !== 1 || ret.values[0].name !== \"Brown\") {\n                return Promise.reject(new Error(\"Query 2 teachers failed\"));\n            }\n            // close the connection\n            await this._sqlite.closeConnection(\"testTypes.db\");\n            // partial import\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(partialImport));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport1 failed\"));\n            // create the connection to the database\n            db = await this._sqlite\n                .createConnection(\"testTypes.db\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection 'testTypes.db' after 'partial' failed\"));\n            // open db \"testTypes\"\n            await db.open();\n            // select teachers with \"office\" is null\n            sqlcmd = \"SELECT * FROM teachers where office IS NULL;\";\n            result = await db.query(sqlcmd);\n            if (result.values.length !== 1 ||\n                result.values[0].name !== \"MacLaren\") {\n                return Promise.reject(new Error(\"Query 3 Teachers failed\"));\n            }\n            // export full json\n            let jsonObj = await db.exportToJson('full');\n            // test Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(jsonObj.export));\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJsonValid export 'full' failed\"));\n            }\n            if (jsonObj.export.database != \"testTypes\" || jsonObj.export.version != 1\n                || jsonObj.export.mode != \"full\" || jsonObj.export.tables.length != 2) {\n                return Promise.reject(new Error(\"Export Json failed\"));\n            }\n            // Import exported json object\n            jsonObj.export.database = \"testTypesImported\";\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(jsonObj.export));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n            // create the connection to the database\n            db = await this._sqlite\n                .createConnection(\"testTypesImported\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection 'testTypesImported' after 'full' failed\"));\n            // open db \"testTypesImported\"\n            await db.open();\n            // select all teachers in db\n            ret = await db.query(\"SELECT * FROM teachers;\");\n            if (ret.values.length !== 5 || ret.values[0].name !== \"Brown\" ||\n                ret.values[1].name !== \"Dupont\" ||\n                ret.values[2].name !== \"MacLaren\" ||\n                ret.values[3].name !== \"Bannister\" ||\n                ret.values[4].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 4 teachers failed\"));\n            }\n            // select all classess in db\n            ret = await db.query(\"SELECT * FROM classes;\");\n            if (ret.values.length !== 3 || ret.values[0].courseCode !== 1 ||\n                ret.values[0].dayOfWeek != \"Monday\" ||\n                ret.values[1].courseCode !== 2 ||\n                ret.values[1].dayOfWeek != \"Wednesday\" ||\n                ret.values[2].courseCode !== 1 ||\n                ret.values[2].dayOfWeek != \"Friday\") {\n                return Promise.reject(new Error(\"Query 5 classes failed\"));\n            }\n            // Check Connections Consistency\n            ret = await this._sqlite.checkConnectionsConsistency();\n            if (!ret.result) {\n                return Promise.reject(new Error(\"You must redefined your connections\"));\n            }\n            result = await this._sqlite.isConnection(\"testTypes\");\n            if (result.result) {\n                // close the connection testTypes\n                await this._sqlite.closeConnection(\"testTypes\");\n            }\n            result = await this._sqlite.isConnection(\"testTypesImported\");\n            if (result.result) {\n                // close the connection testTypesImported\n                await this._sqlite.closeConnection(\"testTypesImported\");\n            }\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTestTypesPage.ɵfac = function TestTypesPage_Factory(t) { return new (t || TestTypesPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestTypesPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestTypesPage, selectors: [[\"app-testtypes\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestTypesPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestTypes \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestTypes\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3R0eXBlcy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0dHlwZXMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}