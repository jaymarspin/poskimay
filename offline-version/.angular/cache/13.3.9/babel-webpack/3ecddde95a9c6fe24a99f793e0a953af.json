{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestNCDbsPage = /*#__PURE__*/(() => {\n  class TestNCDbsPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n      this.platform = this._sqlite.platform;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World from Jeep\");\n          console.log(`from echo: ${result.value}`);\n          let directory;\n          if (_this2.platform === \"ios\") directory = \"Applications/Files/Databases\";\n          if (_this2.platform === \"android\") directory = \"files/databases\";\n\n          if (_this2.platform === 'ios' || _this2.platform === 'android') {\n            const databasePath = (yield _this2._sqlite.getNCDatabasePath(directory, \"testncdb.db\")).path;\n            const isNCDbExists = (yield _this2._sqlite.isNCDatabase(databasePath)).result;\n            const ret = yield _this2._sqlite.checkConnectionsConsistency();\n            const isConn = (yield _this2._sqlite.isNCConnection(databasePath)).result;\n            let db;\n\n            if (ret.result && isConn && isNCDbExists) {\n              db = yield _this2._sqlite.retrieveNCConnection(databasePath);\n            } else {\n              db = yield _this2._sqlite.createNCConnection(databasePath, 1);\n            } // open db testncdb.db\n\n\n            yield db.open(); // get the database version\n\n            let retVer = yield db.getVersion();\n\n            if (retVer.version !== 1) {\n              return Promise.reject(new Error(\"GetVersion: version failed\"));\n            }\n\n            const isDbOpen = yield db.isDBOpen();\n            console.log(`$$$$ isDbOpen.result ${JSON.stringify(isDbOpen.result)}`);\n\n            if (!isDbOpen.result) {\n              return Promise.reject(new Error(\"IsDBOpen: database not opened\"));\n            }\n\n            const isTable = yield db.isTable(\"contacts\");\n            console.log(`$$$$ isTable.result ${JSON.stringify(isTable.result)}`);\n\n            if (!isTable.result) {\n              return Promise.reject(new Error(\"IsTable: table does not exist\"));\n            } // select all contacts in db\n\n\n            const retCts = yield db.query(\"SELECT * FROM contacts;\");\n\n            if (retCts.values.length !== 4 || retCts.values[0].name !== \"Simpson\" || retCts.values[1].name !== \"Jones\" || retCts.values[2].name !== \"Whiteley\" || retCts.values[3].name !== \"Brown\") {\n              return Promise.reject(new Error(\"Query Contacts failed\"));\n            }\n\n            yield _this2._sqlite.closeNCConnection(databasePath);\n            return Promise.resolve();\n          } else {\n            return Promise.reject(new Error(`Not implemented for ${_this2.platform} platform`));\n          }\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestNCDbsPage.ɵfac = function TestNCDbsPage_Factory(t) {\n    return new (t || TestNCDbsPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestNCDbsPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestNCDbsPage,\n    selectors: [[\"app-testncdbs\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestNCDbsPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testncdbs \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testncdbs\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RuY2Ricy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0bmNkYnMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"]\n  });\n  return TestNCDbsPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testncdbs/testncdbs.page.ts"],"names":["Dialog","i0","i1","i2","i3","TestNCDbsPage","constructor","_sqlite","_detailService","detail","initPlugin","platform","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","value","directory","databasePath","getNCDatabasePath","path","isNCDbExists","isNCDatabase","ret","checkConnectionsConsistency","isConn","isNCConnection","db","retrieveNCConnection","createNCConnection","open","retVer","getVersion","version","Promise","reject","Error","isDbOpen","isDBOpen","JSON","stringify","isTable","retCts","query","values","length","name","closeNCConnection","resolve","ɵfac","TestNCDbsPage_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestNCDbsPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class TestNCDbsPage {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.detail = false;\n        this.initPlugin = false;\n        this.platform = this._sqlite.platform;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World from Jeep\");\n            console.log(`from echo: ${result.value}`);\n            let directory;\n            if (this.platform === \"ios\")\n                directory = \"Applications/Files/Databases\";\n            if (this.platform === \"android\")\n                directory = \"files/databases\";\n            if (this.platform === 'ios' || this.platform === 'android') {\n                const databasePath = (await this._sqlite.getNCDatabasePath(directory, \"testncdb.db\")).path;\n                const isNCDbExists = (await this._sqlite.isNCDatabase(databasePath)).result;\n                const ret = await this._sqlite.checkConnectionsConsistency();\n                const isConn = (await this._sqlite.isNCConnection(databasePath)).result;\n                let db;\n                if (ret.result && isConn && isNCDbExists) {\n                    db = await this._sqlite.retrieveNCConnection(databasePath);\n                }\n                else {\n                    db = await this._sqlite.createNCConnection(databasePath, 1);\n                }\n                // open db testncdb.db\n                await db.open();\n                // get the database version\n                let retVer = await db.getVersion();\n                if (retVer.version !== 1) {\n                    return Promise.reject(new Error(\"GetVersion: version failed\"));\n                }\n                const isDbOpen = await db.isDBOpen();\n                console.log(`$$$$ isDbOpen.result ${JSON.stringify(isDbOpen.result)}`);\n                if (!isDbOpen.result) {\n                    return Promise.reject(new Error(\"IsDBOpen: database not opened\"));\n                }\n                const isTable = await db.isTable(\"contacts\");\n                console.log(`$$$$ isTable.result ${JSON.stringify(isTable.result)}`);\n                if (!isTable.result) {\n                    return Promise.reject(new Error(\"IsTable: table does not exist\"));\n                }\n                // select all contacts in db\n                const retCts = await db.query(\"SELECT * FROM contacts;\");\n                if (retCts.values.length !== 4 ||\n                    retCts.values[0].name !== \"Simpson\" ||\n                    retCts.values[1].name !== \"Jones\" ||\n                    retCts.values[2].name !== \"Whiteley\" ||\n                    retCts.values[3].name !== \"Brown\") {\n                    return Promise.reject(new Error(\"Query Contacts failed\"));\n                }\n                await this._sqlite.closeNCConnection(databasePath);\n                return Promise.resolve();\n            }\n            else {\n                return Promise.reject(new Error(`Not implemented for ${this.platform} platform`));\n            }\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTestNCDbsPage.ɵfac = function TestNCDbsPage_Factory(t) { return new (t || TestNCDbsPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestNCDbsPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestNCDbsPage, selectors: [[\"app-testncdbs\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestNCDbsPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testncdbs \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testncdbs\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RuY2Ricy5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0bmNkYnMucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}