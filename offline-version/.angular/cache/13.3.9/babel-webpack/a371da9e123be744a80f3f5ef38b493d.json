{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchema82 } from '../utils/no-encryption-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestCopyPage = /*#__PURE__*/(() => {\n  class TestCopyPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n      this.platform = this._sqlite.platform;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(); // Initialize the CapacitorSQLite plugin\n\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(\"$$$ runTest failed\");\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Test isConnection, isDatabase, isTable,\n          //      getDatabaseList, addSQLiteSuffix\n          // ************************************************\n\n          result = yield _this2._sqlite.isConnection(\"testcopy\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Connection 'testcopy' already exists\"));\n          } // test get the Database List\n\n\n          result = yield _this2._sqlite.getDatabaseList();\n          console.log(`test get Database List: ${JSON.stringify(result)}`);\n          result = yield _this2._sqlite.isConnection(\"testfromfile\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Connection 'testfromfile' already exists\"));\n          }\n\n          result = yield _this2._sqlite.isConnection(\"keep1\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Connection 'keep1' already exists\"));\n          } // test if the cordova databases where not at the \"default\" directory\n          // here we assume that they were stored at \"Files/Databases\"\n\n\n          let directory = \"Files/Databases\";\n          let dbList = [\"testcopy.db\", \"testfromfile.db\", \"keep1\"];\n          if (_this2.platform === \"ios\") directory = \"Applications/Files/Databases\";\n          if (_this2.platform === \"android\") directory = \"files/databases\";\n\n          if (_this2.platform === 'ios' || _this2.platform === 'android') {\n            const dbMigratableList = yield _this2._sqlite.getMigratableDbList(directory);\n            console.log(`dbMigratableList ${JSON.stringify(dbMigratableList)}`);\n\n            if (dbMigratableList.values.length != 4) {\n              return Promise.reject(new Error(\"GetMigratableDbList failed\"));\n            }\n\n            yield _this2._sqlite.addSQLiteSuffix(directory, dbList);\n          } // check if database \"testcopy\" exists\n\n\n          result = yield _this2._sqlite.isDatabase(\"testcopy\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Database 'testcopy' does not exist\"));\n          } // check if database \"testfromfile\" exists\n\n\n          result = yield _this2._sqlite.isDatabase(\"testfromfile\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Database 'testfromfile' does not exist\"));\n          } // check if database \"keep1\" exists\n\n\n          result = yield _this2._sqlite.isDatabase(\"keep1\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Database 'keep1' does not exist\"));\n          } // ************************************************\n          // Query the database\n          // ************************************************\n          // create the connection to the database\n\n\n          const db = yield _this2._sqlite.createConnection(\"testcopy\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'testcopy' failed\")); // open db testcopy\n\n          yield db.open(); // \n          // select all users in db\n\n          result = yield db.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Jackson\" || result.values[5].name !== \"Kennedy\" || result.values[6].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query Users failed\"));\n          } // check if the table \"users\" exists\n\n\n          result = yield db.isTable(\"users\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'users' does not exist\"));\n          } // check if the table \"messages\" exists\n\n\n          result = yield db.isTable(\"messages\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'messages' does not exist\"));\n          } // check if the table \"images\" exists\n\n\n          result = yield db.isTable(\"images\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'images' does not exist\"));\n          } // check if the table \"foo\" exists\n\n\n          result = yield db.isTable(\"foo\");\n\n          if (result.result) {\n            return Promise.reject(new Error(\"Table 'foo' exists\"));\n          } // create the connection to the database \"testfromfile\"\n\n\n          const db1 = yield _this2._sqlite.createConnection(\"testfromfile\", false, \"no-encryption\", 1);\n          if (db1 === null) return Promise.reject(new Error(\"CreateConnection 'testfromfile' failed\")); // open db testcopy\n\n          yield db1.open(); // check if the table \"users\" exists\n\n          result = yield db1.isTable(\"users\");\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"Table 'users' does not exist\"));\n          } // select all users in db\n\n\n          result = yield db1.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Jackson\" || result.values[5].name !== \"Kennedy\" || result.values[6].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query2 Users failed\"));\n          } // create the connection to the database\n\n\n          const db2 = yield _this2._sqlite.createConnection(\"keep1\", false, \"no-encryption\", 1);\n          if (db2 === null) return Promise.reject(new Error(\"CreateConnection 'keep1' failed\")); // open db testcopy\n\n          yield db2.open(); // \n          // select all users in db2\n\n          result = yield db2.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Jackson\" || result.values[5].name !== \"Kennedy\" || result.values[6].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query db2 Users failed\"));\n          } // delete old databases\n\n\n          yield _this2._sqlite.deleteOldDatabases(directory, dbList);\n\n          if (_this2.platform === 'ios' || _this2.platform === 'android') {\n            const dbMigratableList = yield _this2._sqlite.getMigratableDbList(directory);\n\n            if (dbMigratableList.values.length != 1) {\n              return Promise.reject(new Error(\"GetMigratableDbList failed\"));\n            }\n          } // initialize the connection for issue#82\n\n\n          const db3 = yield _this2._sqlite.createConnection(\"test-issue82\", false, \"no-encryption\", 1); // open db3 test-issue82\n\n          yield db3.open(); // create tables in db2\n\n          result = yield db3.execute(createSchema82);\n\n          if (result.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute in db2 failed\"));\n          } // select all users in db\n\n\n          result = yield db3.query(\"SELECT * FROM drawings WHERE congregationId = '494f7713-4dfe-4a92-b1a9-75aadcd71022';\");\n\n          if (result.values.length !== 0) {\n            return Promise.reject(new Error(\"Query in db2 failed\"));\n          } // close the connection \"testcopy\"\n\n\n          yield _this2._sqlite.closeConnection(\"testcopy\");\n\n          _this2._detailService.setExportJson(false); // close the connection \"testfromfile\"\n\n\n          yield _this2._sqlite.closeConnection(\"testfromfile\"); // close the connection \"keep1\"\n\n          yield _this2._sqlite.closeConnection(\"keep1\"); // close the connection \"test-issue82\"\n\n          yield _this2._sqlite.closeConnection(\"test-issue82\");\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestCopyPage.ɵfac = function TestCopyPage_Factory(t) {\n    return new (t || TestCopyPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestCopyPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestCopyPage,\n    selectors: [[\"app-testcopy\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestCopyPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Test Migrate Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Test Migrate Copy\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rjb3B5LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rjb3B5LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"]\n  });\n  return TestCopyPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testcopy/testcopy.page.ts"],"names":["createSchema82","Dialog","i0","i1","i2","i3","TestCopyPage","constructor","_sqlite","_detailService","initPlugin","platform","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","isConnection","Promise","reject","Error","getDatabaseList","JSON","stringify","directory","dbList","dbMigratableList","getMigratableDbList","values","length","addSQLiteSuffix","isDatabase","db","createConnection","open","query","name","isTable","db1","db2","deleteOldDatabases","db3","execute","changes","closeConnection","setExportJson","resolve","ɵfac","TestCopyPage_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestCopyPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { createSchema82 } from '../utils/no-encryption-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class TestCopyPage {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.initPlugin = false;\n        this.platform = this._sqlite.platform;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        // Initialize the CapacitorSQLite plugin\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(\"$$$ runTest failed\");\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // ************************************************\n            // Test isConnection, isDatabase, isTable,\n            //      getDatabaseList, addSQLiteSuffix\n            // ************************************************\n            result = await this._sqlite.isConnection(\"testcopy\");\n            if (result.result) {\n                return Promise.reject(new Error(\"Connection 'testcopy' already exists\"));\n            }\n            // test get the Database List\n            result = await this._sqlite.getDatabaseList();\n            console.log(`test get Database List: ${JSON.stringify(result)}`);\n            result = await this._sqlite.isConnection(\"testfromfile\");\n            if (result.result) {\n                return Promise.reject(new Error(\"Connection 'testfromfile' already exists\"));\n            }\n            result = await this._sqlite.isConnection(\"keep1\");\n            if (result.result) {\n                return Promise.reject(new Error(\"Connection 'keep1' already exists\"));\n            }\n            // test if the cordova databases where not at the \"default\" directory\n            // here we assume that they were stored at \"Files/Databases\"\n            let directory = \"Files/Databases\";\n            let dbList = [\"testcopy.db\", \"testfromfile.db\", \"keep1\"];\n            if (this.platform === \"ios\")\n                directory = \"Applications/Files/Databases\";\n            if (this.platform === \"android\")\n                directory = \"files/databases\";\n            if (this.platform === 'ios' || this.platform === 'android') {\n                const dbMigratableList = await this._sqlite.getMigratableDbList(directory);\n                console.log(`dbMigratableList ${JSON.stringify(dbMigratableList)}`);\n                if (dbMigratableList.values.length != 4) {\n                    return Promise.reject(new Error(\"GetMigratableDbList failed\"));\n                }\n                await this._sqlite.addSQLiteSuffix(directory, dbList);\n            }\n            // check if database \"testcopy\" exists\n            result = await this._sqlite.isDatabase(\"testcopy\");\n            if (!result.result) {\n                return Promise.reject(new Error(\"Database 'testcopy' does not exist\"));\n            }\n            // check if database \"testfromfile\" exists\n            result = await this._sqlite.isDatabase(\"testfromfile\");\n            if (!result.result) {\n                return Promise.reject(new Error(\"Database 'testfromfile' does not exist\"));\n            }\n            // check if database \"keep1\" exists\n            result = await this._sqlite.isDatabase(\"keep1\");\n            if (!result.result) {\n                return Promise.reject(new Error(\"Database 'keep1' does not exist\"));\n            }\n            // ************************************************\n            // Query the database\n            // ************************************************\n            // create the connection to the database\n            const db = await this._sqlite\n                .createConnection(\"testcopy\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection 'testcopy' failed\"));\n            // open db testcopy\n            await db.open();\n            // \n            // select all users in db\n            result = await db.query(\"SELECT * FROM users;\");\n            if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\"\n                || result.values[1].name !== \"Jones\"\n                || result.values[2].name !== \"Simpson\"\n                || result.values[3].name !== \"Brown\"\n                || result.values[4].name !== \"Jackson\"\n                || result.values[5].name !== \"Kennedy\"\n                || result.values[6].name !== \"Bush\") {\n                return Promise.reject(new Error(\"Query Users failed\"));\n            }\n            // check if the table \"users\" exists\n            result = await db.isTable(\"users\");\n            if (!result.result) {\n                return Promise.reject(new Error(\"Table 'users' does not exist\"));\n            }\n            // check if the table \"messages\" exists\n            result = await db.isTable(\"messages\");\n            if (!result.result) {\n                return Promise.reject(new Error(\"Table 'messages' does not exist\"));\n            }\n            // check if the table \"images\" exists\n            result = await db.isTable(\"images\");\n            if (!result.result) {\n                return Promise.reject(new Error(\"Table 'images' does not exist\"));\n            }\n            // check if the table \"foo\" exists\n            result = await db.isTable(\"foo\");\n            if (result.result) {\n                return Promise.reject(new Error(\"Table 'foo' exists\"));\n            }\n            // create the connection to the database \"testfromfile\"\n            const db1 = await this._sqlite\n                .createConnection(\"testfromfile\", false, \"no-encryption\", 1);\n            if (db1 === null)\n                return Promise.reject(new Error(\"CreateConnection 'testfromfile' failed\"));\n            // open db testcopy\n            await db1.open();\n            // check if the table \"users\" exists\n            result = await db1.isTable(\"users\");\n            if (!result.result) {\n                return Promise.reject(new Error(\"Table 'users' does not exist\"));\n            }\n            // select all users in db\n            result = await db1.query(\"SELECT * FROM users;\");\n            if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\"\n                || result.values[1].name !== \"Jones\"\n                || result.values[2].name !== \"Simpson\"\n                || result.values[3].name !== \"Brown\"\n                || result.values[4].name !== \"Jackson\"\n                || result.values[5].name !== \"Kennedy\"\n                || result.values[6].name !== \"Bush\") {\n                return Promise.reject(new Error(\"Query2 Users failed\"));\n            }\n            // create the connection to the database\n            const db2 = await this._sqlite\n                .createConnection(\"keep1\", false, \"no-encryption\", 1);\n            if (db2 === null)\n                return Promise.reject(new Error(\"CreateConnection 'keep1' failed\"));\n            // open db testcopy\n            await db2.open();\n            // \n            // select all users in db2\n            result = await db2.query(\"SELECT * FROM users;\");\n            if (result.values.length !== 7 || result.values[0].name !== \"Whiteley\"\n                || result.values[1].name !== \"Jones\"\n                || result.values[2].name !== \"Simpson\"\n                || result.values[3].name !== \"Brown\"\n                || result.values[4].name !== \"Jackson\"\n                || result.values[5].name !== \"Kennedy\"\n                || result.values[6].name !== \"Bush\") {\n                return Promise.reject(new Error(\"Query db2 Users failed\"));\n            }\n            // delete old databases\n            await this._sqlite.deleteOldDatabases(directory, dbList);\n            if (this.platform === 'ios' || this.platform === 'android') {\n                const dbMigratableList = await this._sqlite.getMigratableDbList(directory);\n                if (dbMigratableList.values.length != 1) {\n                    return Promise.reject(new Error(\"GetMigratableDbList failed\"));\n                }\n            }\n            // initialize the connection for issue#82\n            const db3 = await this._sqlite\n                .createConnection(\"test-issue82\", false, \"no-encryption\", 1);\n            // open db3 test-issue82\n            await db3.open();\n            // create tables in db2\n            result = await db3.execute(createSchema82);\n            if (result.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute in db2 failed\"));\n            }\n            // select all users in db\n            result = await db3.query(\"SELECT * FROM drawings WHERE congregationId = '494f7713-4dfe-4a92-b1a9-75aadcd71022';\");\n            if (result.values.length !== 0) {\n                return Promise.reject(new Error(\"Query in db2 failed\"));\n            }\n            // close the connection \"testcopy\"\n            await this._sqlite.closeConnection(\"testcopy\");\n            this._detailService.setExportJson(false);\n            // close the connection \"testfromfile\"\n            await this._sqlite.closeConnection(\"testfromfile\");\n            // close the connection \"keep1\"\n            await this._sqlite.closeConnection(\"keep1\");\n            // close the connection \"test-issue82\"\n            await this._sqlite.closeConnection(\"test-issue82\");\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTestCopyPage.ɵfac = function TestCopyPage_Factory(t) { return new (t || TestCopyPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestCopyPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestCopyPage, selectors: [[\"app-testcopy\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestCopyPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Test Migrate Copy \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Test Migrate Copy\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rjb3B5LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rjb3B5LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}