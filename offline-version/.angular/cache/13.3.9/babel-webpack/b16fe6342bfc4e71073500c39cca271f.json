{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchemaIssue230 } from '../utils/no-encryption-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let TestIssue230Page = /*#__PURE__*/(() => {\n  class TestIssue230Page {\n    constructor(_sqlite) {\n      this._sqlite = _sqlite;\n      this.detail = false;\n      this.initPlugin = false;\n      this.isNative = this._sqlite.native;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World from Jeep\");\n          console.log(`from echo: ${result.value}`); // initialize the connection\n\n          let db;\n\n          if ((yield _this2._sqlite.isConnection(\"testIssue230\")).result) {\n            db = yield _this2._sqlite.retrieveConnection(\"testIssue230\");\n          } else {\n            db = yield _this2._sqlite.createConnection(\"testIssue230\", false, \"no-encryption\", 1);\n          } // check if the databases exist \n          // and delete it for multiple successive tests\n\n\n          yield deleteDatabase(db); // open db testIssue230\n\n          yield db.open();\n          const name = db.getConnectionDBName();\n          console.log(`>>>>>> dbName: ${name}`);\n          const transaction = [{\n            statement: createSchemaIssue230\n          }, {\n            statement: \"INSERT INTO DemoTable VALUES (?,?)\",\n            values: [\"Alice\", 101]\n          }, {\n            statement: \"INSERT INTO DemoTable VALUES (?,?)\",\n            values: [\"Betty\", 202]\n          }];\n          console.log(`>>>>>> transaction: ${JSON.stringify(transaction)}`);\n          yield db.executeTransaction(transaction);\n          /*\n                  let ret: any = await db.execute(\"BEGIN TRANSACTION;\",false);\n                  // create table in db\n                  ret = await db.execute(createSchemaIssue230,false);\n                  if (ret.changes.changes < 0) {\n                    await db.execute(\"ROLLBACK;\",false);\n                    return Promise.reject(new Error(\"Execute createSchema failed\"));\n                  }\n                  // do some INSERT\n                  let sqlcmd: string =\n                  \"INSERT INTO DemoTable VALUES (?,?)\";\n                  let values: Array<any>  = [\"Alice\",101];\n                  ret = await db.run(sqlcmd,values,false);\n                  console.log(`INSERT1 ret.changes: ${JSON.stringify(ret.changes)}`);\n                  if(ret.changes.lastId === -1) {\n                    await db.execute(\"ROLLBACK;\",false);\n                    return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n                  }\n                  values  = [\"Betty\",202];\n                  ret = await db.run(sqlcmd,values,false);\n                  console.log(`INSERT2 ret.changes: ${JSON.stringify(ret.changes)}`);\n                  if(ret.changes.lastId === -1) {\n                    await db.execute(\"ROLLBACK;\",false);\n                    return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n                  }\n                  await db.execute(\"COMMIT;\",false);\n          */\n\n          yield _this2._sqlite.closeConnection(\"testIssue230\");\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestIssue230Page.ɵfac = function TestIssue230Page_Factory(t) {\n    return new (t || TestIssue230Page)(i0.ɵɵdirectiveInject(i1.SQLiteService));\n  };\n\n  TestIssue230Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestIssue230Page,\n    selectors: [[\"app-testIssue230\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestIssue230Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestIssue230 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestIssue230\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RJc3N1ZTIzMC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0SXNzdWUyMzAucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"]\n  });\n  return TestIssue230Page;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testIssue230/testIssue230.page.ts"],"names":["createSchemaIssue230","deleteDatabase","Dialog","i0","i1","i2","TestIssue230Page","constructor","_sqlite","detail","initPlugin","isNative","native","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","value","db","isConnection","retrieveConnection","createConnection","open","name","getConnectionDBName","transaction","statement","values","JSON","stringify","executeTransaction","closeConnection","Promise","resolve","reject","ɵfac","TestIssue230Page_Factory","t","ɵɵdirectiveInject","SQLiteService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestIssue230Page_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { createSchemaIssue230 } from '../utils/no-encryption-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport class TestIssue230Page {\n    constructor(_sqlite) {\n        this._sqlite = _sqlite;\n        this.detail = false;\n        this.initPlugin = false;\n        this.isNative = this._sqlite.native;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World from Jeep\");\n            console.log(`from echo: ${result.value}`);\n            // initialize the connection\n            let db;\n            if ((await this._sqlite.isConnection(\"testIssue230\")).result) {\n                db = await this._sqlite.retrieveConnection(\"testIssue230\");\n            }\n            else {\n                db = await this._sqlite\n                    .createConnection(\"testIssue230\", false, \"no-encryption\", 1);\n            }\n            // check if the databases exist \n            // and delete it for multiple successive tests\n            await deleteDatabase(db);\n            // open db testIssue230\n            await db.open();\n            const name = db.getConnectionDBName();\n            console.log(`>>>>>> dbName: ${name}`);\n            const transaction = [\n                { statement: createSchemaIssue230 },\n                { statement: \"INSERT INTO DemoTable VALUES (?,?)\",\n                    values: [\"Alice\", 101] },\n                { statement: \"INSERT INTO DemoTable VALUES (?,?)\",\n                    values: [\"Betty\", 202] }\n            ];\n            console.log(`>>>>>> transaction: ${JSON.stringify(transaction)}`);\n            await db.executeTransaction(transaction);\n            /*\n                    let ret: any = await db.execute(\"BEGIN TRANSACTION;\",false);\n                    // create table in db\n                    ret = await db.execute(createSchemaIssue230,false);\n                    if (ret.changes.changes < 0) {\n                      await db.execute(\"ROLLBACK;\",false);\n                      return Promise.reject(new Error(\"Execute createSchema failed\"));\n                    }\n                    // do some INSERT\n                    let sqlcmd: string =\n                    \"INSERT INTO DemoTable VALUES (?,?)\";\n                    let values: Array<any>  = [\"Alice\",101];\n                    ret = await db.run(sqlcmd,values,false);\n                    console.log(`INSERT1 ret.changes: ${JSON.stringify(ret.changes)}`);\n                    if(ret.changes.lastId === -1) {\n                      await db.execute(\"ROLLBACK;\",false);\n                      return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n                    }\n                    values  = [\"Betty\",202];\n                    ret = await db.run(sqlcmd,values,false);\n                    console.log(`INSERT2 ret.changes: ${JSON.stringify(ret.changes)}`);\n                    if(ret.changes.lastId === -1) {\n                      await db.execute(\"ROLLBACK;\",false);\n                      return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n                    }\n                    await db.execute(\"COMMIT;\",false);\n            */\n            await this._sqlite.closeConnection(\"testIssue230\");\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTestIssue230Page.ɵfac = function TestIssue230Page_Factory(t) { return new (t || TestIssue230Page)(i0.ɵɵdirectiveInject(i1.SQLiteService)); };\nTestIssue230Page.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestIssue230Page, selectors: [[\"app-testIssue230\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestIssue230Page_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestIssue230 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestIssue230\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RJc3N1ZTIzMC5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0SXNzdWUyMzAucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}