{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchema, twoUsers } from '../utils/no-encryption-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let TestencryptionPage = /*#__PURE__*/(() => {\n  class TestencryptionPage {\n    constructor(_sqlite) {\n      this._sqlite = _sqlite;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Create Database No Encryption\n          // ************************************************\n          // initialize the connection\n\n          let db = yield _this2._sqlite.createConnection(\"testEncryption\", false, \"no-encryption\", 1); // delete \"testEncryption\" if exists\n\n          yield deleteDatabase(db); // open db testEncryption\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable();\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSyncTable failed\"));\n          } // set the synchronization date\n\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // add two users in db\n\n          ret = yield db.execute(twoUsers);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute twoUsers failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query1 twoUsers failed\"));\n          } // select users where company is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query2 Users where Company null failed\"));\n          } // add one user with statement and values              \n\n\n          let sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n          let values = [\"Simpson\", \"Simpson@example.com\", 69];\n          ret = yield db.run(sqlcmd, values);\n\n          if (ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run1 add 1 User failed\"));\n          } // add one user with statement              \n\n\n          sqlcmd = `INSERT INTO users (name,email,age) VALUES ` + `(\"Brown\",\"Brown@example.com\",15)`;\n          ret = yield db.run(sqlcmd);\n\n          if (ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run2 add 1 User failed\"));\n          }\n\n          yield _this2._sqlite.closeConnection(\"testEncryption\"); // ************************************************\n          // Encrypt the existing database\n          // ************************************************\n\n          console.log(`&&&&                                               &&&&`);\n          console.log(`&&&& Going to create the connection for Encryption &&&&`); // initialize the connection\n\n          db = yield _this2._sqlite.createConnection(\"testEncryption\", true, \"encryption\", 1); // open db testEncryption\n\n          yield db.open(); // close the connection\n\n          yield _this2._sqlite.closeConnection(\"testEncryption\"); // ************************************************\n          // Work with the encrypted  database\n          // ************************************************\n          // initialize the connection\n\n          db = yield _this2._sqlite.createConnection(\"testEncryption\", true, \"secret\", 1); // open db testEncryption\n\n          yield db.open(); // add one user with statement and values              \n\n          sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n          values = [\"Jackson\", \"Jackson@example.com\", 32];\n          ret = yield db.run(sqlcmd, values);\n\n          if (ret.changes.lastId !== 5) {\n            return Promise.reject(new Error(\"Run3 add 1 User failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 5 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\" || ret.values[2].name !== \"Simpson\" || ret.values[3].name !== \"Brown\" || ret.values[4].name !== \"Jackson\") {\n            return Promise.reject(new Error(\"Query3  5 Users failed\"));\n          } // delete it for multiple successive tests\n\n\n          yield deleteDatabase(db);\n          yield _this2._sqlite.closeConnection(\"testEncryption\");\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestencryptionPage.ɵfac = function TestencryptionPage_Factory(t) {\n    return new (t || TestencryptionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService));\n  };\n\n  TestencryptionPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestencryptionPage,\n    selectors: [[\"app-testencryption\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestencryptionPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testencryption \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testencryption\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RlbmNyeXB0aW9uLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3RlbmNyeXB0aW9uLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"]\n  });\n  return TestencryptionPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testencryption/testencryption.page.ts"],"names":["createSchema","twoUsers","deleteDatabase","Dialog","i0","i1","i2","TestencryptionPage","constructor","_sqlite","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","db","createConnection","open","ret","execute","changes","Promise","reject","Error","createSyncTable","syncDate","setSyncDate","query","values","length","name","sqlcmd","run","lastId","closeConnection","resolve","ɵfac","TestencryptionPage_Factory","t","ɵɵdirectiveInject","SQLiteService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestencryptionPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { createSchema, twoUsers } from '../utils/no-encryption-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport class TestencryptionPage {\n    constructor(_sqlite) {\n        this._sqlite = _sqlite;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // ************************************************\n            // Create Database No Encryption\n            // ************************************************\n            // initialize the connection\n            let db = await this._sqlite\n                .createConnection(\"testEncryption\", false, \"no-encryption\", 1);\n            // delete \"testEncryption\" if exists\n            await deleteDatabase(db);\n            // open db testEncryption\n            await db.open();\n            // create tables in db\n            let ret = await db.execute(createSchema);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSchema failed\"));\n            }\n            // create synchronization table \n            ret = await db.createSyncTable();\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSyncTable failed\"));\n            }\n            // set the synchronization date\n            const syncDate = \"2020-11-25T08:30:25.000Z\";\n            await db.setSyncDate(syncDate);\n            // add two users in db\n            ret = await db.execute(twoUsers);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute twoUsers failed\"));\n            }\n            // select all users in db\n            ret = await db.query(\"SELECT * FROM users;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query1 twoUsers failed\"));\n            }\n            // select users where company is NULL in db\n            ret = await db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query2 Users where Company null failed\"));\n            }\n            // add one user with statement and values              \n            let sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n            let values = [\"Simpson\", \"Simpson@example.com\", 69];\n            ret = await db.run(sqlcmd, values);\n            if (ret.changes.lastId !== 3) {\n                return Promise.reject(new Error(\"Run1 add 1 User failed\"));\n            }\n            // add one user with statement              \n            sqlcmd = `INSERT INTO users (name,email,age) VALUES ` +\n                `(\"Brown\",\"Brown@example.com\",15)`;\n            ret = await db.run(sqlcmd);\n            if (ret.changes.lastId !== 4) {\n                return Promise.reject(new Error(\"Run2 add 1 User failed\"));\n            }\n            await this._sqlite.closeConnection(\"testEncryption\");\n            // ************************************************\n            // Encrypt the existing database\n            // ************************************************\n            console.log(`&&&&                                               &&&&`);\n            console.log(`&&&& Going to create the connection for Encryption &&&&`);\n            // initialize the connection\n            db = await this._sqlite\n                .createConnection(\"testEncryption\", true, \"encryption\", 1);\n            // open db testEncryption\n            await db.open();\n            // close the connection\n            await this._sqlite.closeConnection(\"testEncryption\");\n            // ************************************************\n            // Work with the encrypted  database\n            // ************************************************\n            // initialize the connection\n            db = await this._sqlite\n                .createConnection(\"testEncryption\", true, \"secret\", 1);\n            // open db testEncryption\n            await db.open();\n            // add one user with statement and values              \n            sqlcmd =\n                \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n            values = [\"Jackson\", \"Jackson@example.com\", 32];\n            ret = await db.run(sqlcmd, values);\n            if (ret.changes.lastId !== 5) {\n                return Promise.reject(new Error(\"Run3 add 1 User failed\"));\n            }\n            // select all users in db\n            ret = await db.query(\"SELECT * FROM users;\");\n            if (ret.values.length !== 5 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\" ||\n                ret.values[2].name !== \"Simpson\" ||\n                ret.values[3].name !== \"Brown\" ||\n                ret.values[4].name !== \"Jackson\") {\n                return Promise.reject(new Error(\"Query3  5 Users failed\"));\n            }\n            // delete it for multiple successive tests\n            await deleteDatabase(db);\n            await this._sqlite.closeConnection(\"testEncryption\");\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTestencryptionPage.ɵfac = function TestencryptionPage_Factory(t) { return new (t || TestencryptionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService)); };\nTestencryptionPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestencryptionPage, selectors: [[\"app-testencryption\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestencryptionPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testencryption \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testencryption\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RlbmNyeXB0aW9uLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3RlbmNyeXB0aW9uLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}