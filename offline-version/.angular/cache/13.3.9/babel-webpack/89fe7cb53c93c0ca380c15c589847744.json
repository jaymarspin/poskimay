{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./sqlite.service\";\nimport * as i2 from \"./database.service\";\nexport const createSchemaProducts = `\nCREATE TABLE IF NOT EXISTS products (\n  id INTEGER PRIMARY KEY NOT NULL,\n  name TEXT NOT NULL,\n  description TEXT DEFAULT '',\n  price NUMBER NOT NULL,\n  imageUrl TEXT DEFAULT '',\n  isAvailable BOOLEAN NOT NULL CHECK (isAvailable IN (0, 1)),\n  isPopular BOOLEAN NOT NULL CHECK (isAvailable IN (0, 1)),\n  category TEXT DEFAULT '',\n  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n  );\n`;\nexport const createSchemaTest = `\nCREATE TABLE IF NOT EXISTS test (\n  id INTEGER PRIMARY KEY NOT NULL,\n  name TEXT NOT NULL\n);\n`;\nexport let MigrationService = /*#__PURE__*/(() => {\n  class MigrationService {\n    constructor(sqliteService, databaseService) {\n      this.sqliteService = sqliteService;\n      this.databaseService = databaseService;\n    }\n\n    migrate() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this.createTestTable();\n        yield _this.createProductsTable();\n      })();\n    }\n\n    createProductsTable() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this2.databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (db) {\n            yield db.execute(createSchemaProducts);\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n    createTestTable() {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        console.log(`going to create a connection`);\n        const db = yield _this3.sqliteService.createConnection(environment.databaseName, false, \"no-encryption\", 1);\n        console.log(`db ${JSON.stringify(db)}`);\n        yield db.open();\n        console.log(`after db.open`);\n        let query = `\n            CREATE TABLE IF NOT EXISTS test (\n              id INTEGER PRIMARY KEY NOT NULL,\n              name TEXT NOT NULL\n            );\n            `;\n        console.log(`query ${query}`);\n        const res = yield db.execute(query);\n        console.log(`res: ${JSON.stringify(res)}`);\n        yield _this3.sqliteService.closeConnection(environment.databaseName);\n        console.log(`after closeConnection`);\n      })();\n    }\n\n  }\n\n  MigrationService.ɵfac = function MigrationService_Factory(t) {\n    return new (t || MigrationService)(i0.ɵɵinject(i1.SQLiteService), i0.ɵɵinject(i2.DatabaseService));\n  };\n\n  MigrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MigrationService,\n    factory: MigrationService.ɵfac\n  });\n  return MigrationService;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/services/migrations.service.ts"],"names":["environment","i0","i1","i2","createSchemaProducts","createSchemaTest","MigrationService","constructor","sqliteService","databaseService","migrate","createTestTable","createProductsTable","executeQuery","db","execute","console","log","createConnection","databaseName","JSON","stringify","open","query","res","closeConnection","ɵfac","MigrationService_Factory","t","ɵɵinject","SQLiteService","DatabaseService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,OAAO,MAAMC,oBAAoB,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO;AAaP,OAAO,MAAMC,gBAAgB,GAAI;AACjC;AACA;AACA;AACA;AACA,CALO;AAMP,WAAaC,gBAAb;AAAO,QAAMA,gBAAN,CAAuB;AAC1BC,IAAAA,WAAW,CAACC,aAAD,EAAgBC,eAAhB,EAAiC;AACxC,WAAKD,aAAL,GAAqBA,aAArB;AACA,WAAKC,eAAL,GAAuBA,eAAvB;AACH;;AACKC,IAAAA,OAAO,GAAG;AAAA;;AAAA;AACZ,cAAM,KAAI,CAACC,eAAL,EAAN;AACA,cAAM,KAAI,CAACC,mBAAL,EAAN;AAFY;AAGf;;AACKA,IAAAA,mBAAmB,GAAG;AAAA;;AAAA;AACxB,cAAM,MAAI,CAACH,eAAL,CAAqBI,YAArB;AAAA,uCAAkC,WAAOC,EAAP,EAAc;AAClD,kBAAMA,EAAE,CAACC,OAAH,CAAWX,oBAAX,CAAN;AACH,WAFK;;AAAA;AAAA;AAAA;AAAA,YAAN;AADwB;AAI3B;;AACKO,IAAAA,eAAe,GAAG;AAAA;;AAAA;AACpBK,QAAAA,OAAO,CAACC,GAAR,CAAa,8BAAb;AACA,cAAMH,EAAE,SAAS,MAAI,CAACN,aAAL,CAAmBU,gBAAnB,CAAoClB,WAAW,CAACmB,YAAhD,EAA8D,KAA9D,EAAqE,eAArE,EAAsF,CAAtF,CAAjB;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAa,MAAKG,IAAI,CAACC,SAAL,CAAeP,EAAf,CAAmB,EAArC;AACA,cAAMA,EAAE,CAACQ,IAAH,EAAN;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAa,eAAb;AACA,YAAIM,KAAK,GAAI;AACrB;AACA;AACA;AACA;AACA,aALQ;AAMAP,QAAAA,OAAO,CAACC,GAAR,CAAa,SAAQM,KAAM,EAA3B;AACA,cAAMC,GAAG,SAASV,EAAE,CAACC,OAAH,CAAWQ,KAAX,CAAlB;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAa,QAAOG,IAAI,CAACC,SAAL,CAAeG,GAAf,CAAoB,EAAxC;AACA,cAAM,MAAI,CAAChB,aAAL,CAAmBiB,eAAnB,CAAmCzB,WAAW,CAACmB,YAA/C,CAAN;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAa,uBAAb;AAhBoB;AAiBvB;;AA/ByB;;AAiC9BX,EAAAA,gBAAgB,CAACoB,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,WAAO,KAAKA,CAAC,IAAItB,gBAAV,EAA4BL,EAAE,CAAC4B,QAAH,CAAY3B,EAAE,CAAC4B,aAAf,CAA5B,EAA2D7B,EAAE,CAAC4B,QAAH,CAAY1B,EAAE,CAAC4B,eAAf,CAA3D,CAAP;AAAqG,GAApK;;AACAzB,EAAAA,gBAAgB,CAAC0B,KAAjB,GAAyB,aAAc/B,EAAE,CAACgC,kBAAH,CAAsB;AAAEC,IAAAA,KAAK,EAAE5B,gBAAT;AAA2B6B,IAAAA,OAAO,EAAE7B,gBAAgB,CAACoB;AAArD,GAAtB,CAAvC;AAlCA,SAAapB,gBAAb;AAAA","sourcesContent":["import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./sqlite.service\";\nimport * as i2 from \"./database.service\";\nexport const createSchemaProducts = `\nCREATE TABLE IF NOT EXISTS products (\n  id INTEGER PRIMARY KEY NOT NULL,\n  name TEXT NOT NULL,\n  description TEXT DEFAULT '',\n  price NUMBER NOT NULL,\n  imageUrl TEXT DEFAULT '',\n  isAvailable BOOLEAN NOT NULL CHECK (isAvailable IN (0, 1)),\n  isPopular BOOLEAN NOT NULL CHECK (isAvailable IN (0, 1)),\n  category TEXT DEFAULT '',\n  createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n  );\n`;\nexport const createSchemaTest = `\nCREATE TABLE IF NOT EXISTS test (\n  id INTEGER PRIMARY KEY NOT NULL,\n  name TEXT NOT NULL\n);\n`;\nexport class MigrationService {\n    constructor(sqliteService, databaseService) {\n        this.sqliteService = sqliteService;\n        this.databaseService = databaseService;\n    }\n    async migrate() {\n        await this.createTestTable();\n        await this.createProductsTable();\n    }\n    async createProductsTable() {\n        await this.databaseService.executeQuery(async (db) => {\n            await db.execute(createSchemaProducts);\n        });\n    }\n    async createTestTable() {\n        console.log(`going to create a connection`);\n        const db = await this.sqliteService.createConnection(environment.databaseName, false, \"no-encryption\", 1);\n        console.log(`db ${JSON.stringify(db)}`);\n        await db.open();\n        console.log(`after db.open`);\n        let query = `\n            CREATE TABLE IF NOT EXISTS test (\n              id INTEGER PRIMARY KEY NOT NULL,\n              name TEXT NOT NULL\n            );\n            `;\n        console.log(`query ${query}`);\n        const res = await db.execute(query);\n        console.log(`res: ${JSON.stringify(res)}`);\n        await this.sqliteService.closeConnection(environment.databaseName);\n        console.log(`after closeConnection`);\n    }\n}\nMigrationService.ɵfac = function MigrationService_Factory(t) { return new (t || MigrationService)(i0.ɵɵinject(i1.SQLiteService), i0.ɵɵinject(i2.DatabaseService)); };\nMigrationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MigrationService, factory: MigrationService.ɵfac });\n"]},"metadata":{},"sourceType":"module"}