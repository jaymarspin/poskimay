{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport productsData from './products-data-example';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/database.service\";\nexport let ProductRepository = /*#__PURE__*/(() => {\n  class ProductRepository {\n    constructor(_databaseService) {\n      this._databaseService = _databaseService;\n    }\n\n    getProducts() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        return _this._databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (db) {\n            var products = yield db.query(\"select * from products\");\n            return products.values;\n          });\n\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n    createProduct(product) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this2._databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (db) {\n            if (!product.imageUrl) {\n              product.imageUrl = 'https://via.placeholder.com/150';\n            }\n\n            let sqlcmd = \"insert into products (name, description, price, imageUrl, isAvailable, isPopular, category) values (?, ?, ?, ?, ?, ?, ?)\";\n            let values = [product.name, product.description, product.price, product.imageUrl, product.isAvailable, product.isPopular, product.category];\n            let ret = yield db.run(sqlcmd, values);\n\n            if (ret.changes.lastId > 0) {\n              return ret.changes;\n            }\n\n            throw Error('create product failed');\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n    updateProduct(product) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this3._databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator(function* (db) {\n            let sqlcmd = \"update products set name = ?, description = ?, price = ?, imageUrl = ?, isAvailable = ?, isPopular = ?, category = ? where id = ?\";\n            let values = [product.name, product.description, product.price, product.imageUrl, product.isAvailable, product.isPopular, product.category, product.id];\n            let ret = yield db.run(sqlcmd, values);\n\n            if (ret.changes.changes > 0) {\n              return yield _this3.getProductById(product.id);\n            }\n\n            throw Error('update product failed');\n          });\n\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n    getProductById(id) {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this4._databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (db) {\n            let sqlcmd = \"select * from products where id = ? limit 1\";\n            let values = [id];\n            let ret = yield db.query(sqlcmd, values);\n\n            if (ret.values.length > 0) {\n              return ret.values[0];\n            }\n\n            throw Error('get product by id failed');\n          });\n\n          return function (_x4) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n    deleteProductById(id) {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this5._databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref5 = _asyncToGenerator(function* (db) {\n            yield db.query(`delete from products where id = ${id};`);\n          });\n\n          return function (_x5) {\n            return _ref5.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n    getProductsByCategory(category) {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this6._databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref6 = _asyncToGenerator(function* (db) {\n            let sqlcmd = \"select * from products where category = ?\";\n            let values = [category];\n            let ret = yield db.query(sqlcmd, values);\n\n            if (ret.values.length > 0) {\n              return ret.values;\n            }\n\n            throw Error('get products by category failed');\n          });\n\n          return function (_x6) {\n            return _ref6.apply(this, arguments);\n          };\n        }());\n      })();\n    }\n\n    createTestData() {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this7._databaseService.executeQuery( /*#__PURE__*/function () {\n          var _ref7 = _asyncToGenerator(function* (db) {\n            //delete all products\n            let sqlcmd = \"DELETE FROM products;\";\n            yield db.execute(sqlcmd, false);\n          });\n\n          return function (_x7) {\n            return _ref7.apply(this, arguments);\n          };\n        }());\n        let products = productsData;\n\n        for (let product of products) {\n          yield _this7.createProduct(product);\n        }\n      })();\n    }\n\n  }\n\n  ProductRepository.ɵfac = function ProductRepository_Factory(t) {\n    return new (t || ProductRepository)(i0.ɵɵinject(i1.DatabaseService));\n  };\n\n  ProductRepository.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductRepository,\n    factory: ProductRepository.ɵfac\n  });\n  return ProductRepository;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/repositories/product.repository.ts"],"names":["productsData","i0","i1","ProductRepository","constructor","_databaseService","getProducts","executeQuery","db","products","query","values","createProduct","product","imageUrl","sqlcmd","name","description","price","isAvailable","isPopular","category","ret","run","changes","lastId","Error","updateProduct","id","getProductById","length","deleteProductById","getProductsByCategory","createTestData","execute","ɵfac","ProductRepository_Factory","t","ɵɵinject","DatabaseService","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import productsData from './products-data-example';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/database.service\";\nexport class ProductRepository {\n    constructor(_databaseService) {\n        this._databaseService = _databaseService;\n    }\n    async getProducts() {\n        return this._databaseService.executeQuery(async (db) => {\n            var products = await db.query(\"select * from products\");\n            return products.values;\n        });\n    }\n    async createProduct(product) {\n        return this._databaseService.executeQuery(async (db) => {\n            if (!product.imageUrl) {\n                product.imageUrl = 'https://via.placeholder.com/150';\n            }\n            let sqlcmd = \"insert into products (name, description, price, imageUrl, isAvailable, isPopular, category) values (?, ?, ?, ?, ?, ?, ?)\";\n            let values = [product.name, product.description, product.price, product.imageUrl, product.isAvailable, product.isPopular, product.category];\n            let ret = await db.run(sqlcmd, values);\n            if (ret.changes.lastId > 0) {\n                return ret.changes;\n            }\n            throw Error('create product failed');\n        });\n    }\n    async updateProduct(product) {\n        return this._databaseService.executeQuery(async (db) => {\n            let sqlcmd = \"update products set name = ?, description = ?, price = ?, imageUrl = ?, isAvailable = ?, isPopular = ?, category = ? where id = ?\";\n            let values = [product.name, product.description, product.price, product.imageUrl, product.isAvailable, product.isPopular, product.category, product.id];\n            let ret = await db.run(sqlcmd, values);\n            if (ret.changes.changes > 0) {\n                return await this.getProductById(product.id);\n            }\n            throw Error('update product failed');\n        });\n    }\n    async getProductById(id) {\n        return this._databaseService.executeQuery(async (db) => {\n            let sqlcmd = \"select * from products where id = ? limit 1\";\n            let values = [id];\n            let ret = await db.query(sqlcmd, values);\n            if (ret.values.length > 0) {\n                return ret.values[0];\n            }\n            throw Error('get product by id failed');\n        });\n    }\n    async deleteProductById(id) {\n        return this._databaseService.executeQuery(async (db) => {\n            await db.query(`delete from products where id = ${id};`);\n        });\n    }\n    async getProductsByCategory(category) {\n        return this._databaseService.executeQuery(async (db) => {\n            let sqlcmd = \"select * from products where category = ?\";\n            let values = [category];\n            let ret = await db.query(sqlcmd, values);\n            if (ret.values.length > 0) {\n                return ret.values;\n            }\n            throw Error('get products by category failed');\n        });\n    }\n    async createTestData() {\n        await this._databaseService.executeQuery(async (db) => {\n            //delete all products\n            let sqlcmd = \"DELETE FROM products;\";\n            await db.execute(sqlcmd, false);\n        });\n        let products = productsData;\n        for (let product of products) {\n            await this.createProduct(product);\n        }\n    }\n}\nProductRepository.ɵfac = function ProductRepository_Factory(t) { return new (t || ProductRepository)(i0.ɵɵinject(i1.DatabaseService)); };\nProductRepository.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductRepository, factory: ProductRepository.ɵfac });\n"]},"metadata":{},"sourceType":"module"}