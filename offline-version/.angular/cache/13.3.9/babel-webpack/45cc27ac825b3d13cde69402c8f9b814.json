{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { setUsers } from '../utils/no-encryption-utils';\nimport { createSchemaMessages, setMessages } from '../utils/encrypted-set-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let ExistingconnectionPage = /*#__PURE__*/(() => {\n  class ExistingconnectionPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // retrieve the connections\n\n          const db = yield _this2._sqlite.retrieveConnection(\"testNew\");\n          const db1 = yield _this2._sqlite.retrieveConnection(\"testSet\"); // load setUsers in db\n\n          var ret = yield db.executeSet(setUsers);\n\n          if (ret.changes.changes !== 3) {\n            return Promise.reject(new Error(\"executeSet setUsers failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 7 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\" || ret.values[2].name !== \"Simpson\" || ret.values[3].name !== \"Brown\" || ret.values[4].name !== \"Jackson\" || ret.values[5].name !== \"Kennedy\" || ret.values[6].name !== \"Bush\") {\n            return Promise.reject(new Error(\"Query 7 Users failed\"));\n          } // create table messages in db1\n\n\n          ret = yield db1.execute(createSchemaMessages);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"execute createSchemaMessages failed\"));\n          } // load setMessages in db1\n\n\n          ret = yield db1.executeSet(setMessages);\n\n          if (ret.changes.changes !== 3) {\n            return Promise.reject(new Error(\"executeSet setMessages failed\"));\n          } // select all users in db\n\n\n          ret = yield db1.query(\"SELECT * FROM messages;\");\n\n          if (ret.values.length !== 3 || ret.values[0].title !== \"message 1\" || ret.values[1].title !== \"message 2\" || ret.values[2].title !== \"message 3\") {\n            return Promise.reject(new Error(\"Query 3 Messages failed\"));\n          } // test retrieve all connections\n\n\n          var retDict = yield _this2._sqlite.retrieveAllConnections();\n\n          if (!retDict.has(\"testNew\") || retDict.get(\"testNew\") != db) {\n            return Promise.reject(new Error(\"retrieveAllConnections has TestNew failed\"));\n          }\n\n          if (!retDict.has(\"testSet\") || retDict.get(\"testSet\") != db1) {\n            return Promise.reject(new Error(\"retrieveAllConnections has TestSet failed\"));\n          }\n\n          yield _this2._sqlite.closeAllConnections();\n\n          _this2._detailService.setExistingConnection(false);\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  ExistingconnectionPage.ɵfac = function ExistingconnectionPage_Factory(t) {\n    return new (t || ExistingconnectionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  ExistingconnectionPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExistingconnectionPage,\n    selectors: [[\"app-existingconnection\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function ExistingconnectionPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Existingconnection \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Existingconnection\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4aXN0aW5nY29ubmVjdGlvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJleGlzdGluZ2Nvbm5lY3Rpb24ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"]\n  });\n  return ExistingconnectionPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/existingconnection/existingconnection.page.ts"],"names":["setUsers","createSchemaMessages","setMessages","Dialog","i0","i1","i2","i3","ExistingconnectionPage","constructor","_sqlite","_detailService","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","db","retrieveConnection","db1","ret","executeSet","changes","Promise","reject","Error","query","values","length","name","execute","retDict","retrieveAllConnections","has","get","closeAllConnections","setExistingConnection","resolve","ɵfac","ExistingconnectionPage_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","ExistingconnectionPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":";AAAA,SAASA,QAAT,QAAyB,8BAAzB;AACA,SAASC,oBAAT,EAA+BC,WAA/B,QAAkD,8BAAlD;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,+BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,+BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,WAAaC,sBAAb;AAAO,QAAMA,sBAAN,CAA6B;AAChCC,IAAAA,WAAW,CAACC,OAAD,EAAUC,cAAV,EAA0B;AACjC,WAAKD,OAAL,GAAeA,OAAf;AACA,WAAKC,cAAL,GAAsBA,cAAtB;AACA,WAAKC,UAAL,GAAkB,KAAlB;AACH;;AACKC,IAAAA,eAAe,GAAG;AAAA;;AAAA;AACpB,cAAMC,SAAS;AAAA,uCAAG,WAAOC,OAAP,EAAmB;AACjC,kBAAMZ,MAAM,CAACa,KAAP,CAAa;AACfC,cAAAA,KAAK,EAAE,cADQ;AAEfF,cAAAA,OAAO,EAAEA;AAFM,aAAb,CAAN;AAIH,WALc;;AAAA,0BAATD,SAAS;AAAA;AAAA;AAAA,WAAf;;AAMA,YAAI;AACA,gBAAM,KAAI,CAACI,OAAL,EAAN;AACAC,UAAAA,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,EAA0CC,SAA1C,CACKC,MADL,CACY,SADZ;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,SALD,CAMA,OAAOC,GAAP,EAAY;AACRN,UAAAA,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,EAA0CC,SAA1C,CACKC,MADL,CACY,SADZ;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBC,GAAG,CAACV,OAAQ,EAA9C;AACA,gBAAMD,SAAS,CAACW,GAAG,CAACV,OAAL,CAAf;AACH;AAlBmB;AAmBvB;;AACKG,IAAAA,OAAO,GAAG;AAAA;;AAAA;AACZ,YAAI;AACA,cAAIQ,MAAM,SAAS,MAAI,CAAChB,OAAL,CAAaiB,IAAb,CAAkB,aAAlB,CAAnB,CADA,CAEA;;AACA,gBAAMC,EAAE,SAAS,MAAI,CAAClB,OAAL,CAAamB,kBAAb,CAAgC,SAAhC,CAAjB;AACA,gBAAMC,GAAG,SAAS,MAAI,CAACpB,OAAL,CAAamB,kBAAb,CAAgC,SAAhC,CAAlB,CAJA,CAKA;;AACA,cAAIE,GAAG,SAASH,EAAE,CAACI,UAAH,CAAchC,QAAd,CAAhB;;AACA,cAAI+B,GAAG,CAACE,OAAJ,CAAYA,OAAZ,KAAwB,CAA5B,EAA+B;AAC3B,mBAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,4BAAV,CAAf,CAAP;AACH,WATD,CAUA;;;AACAL,UAAAA,GAAG,SAASH,EAAE,CAACS,KAAH,CAAS,sBAAT,CAAZ;;AACA,cAAIN,GAAG,CAACO,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IAA2BR,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,UAAlD,IACAT,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,OADvB,IAEAT,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,SAFvB,IAGAT,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,OAHvB,IAIAT,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,SAJvB,IAKAT,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,SALvB,IAMAT,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,MAN3B,EAMmC;AAC/B,mBAAON,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,sBAAV,CAAf,CAAP;AACH,WApBD,CAqBA;;;AACAL,UAAAA,GAAG,SAASD,GAAG,CAACW,OAAJ,CAAYxC,oBAAZ,CAAZ;;AACA,cAAI8B,GAAG,CAACE,OAAJ,CAAYA,OAAZ,GAAsB,CAA1B,EAA6B;AACzB,mBAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,qCAAV,CAAf,CAAP;AACH,WAzBD,CA0BA;;;AACAL,UAAAA,GAAG,SAASD,GAAG,CAACE,UAAJ,CAAe9B,WAAf,CAAZ;;AACA,cAAI6B,GAAG,CAACE,OAAJ,CAAYA,OAAZ,KAAwB,CAA5B,EAA+B;AAC3B,mBAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,+BAAV,CAAf,CAAP;AACH,WA9BD,CA+BA;;;AACAL,UAAAA,GAAG,SAASD,GAAG,CAACO,KAAJ,CAAU,yBAAV,CAAZ;;AACA,cAAIN,GAAG,CAACO,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IAA2BR,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcrB,KAAd,KAAwB,WAAnD,IACAc,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcrB,KAAd,KAAwB,WADxB,IAEAc,GAAG,CAACO,MAAJ,CAAW,CAAX,EAAcrB,KAAd,KAAwB,WAF5B,EAEyC;AACrC,mBAAOiB,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,yBAAV,CAAf,CAAP;AACH,WArCD,CAsCA;;;AACA,cAAIM,OAAO,SAAS,MAAI,CAAChC,OAAL,CAAaiC,sBAAb,EAApB;;AACA,cAAI,CAACD,OAAO,CAACE,GAAR,CAAY,SAAZ,CAAD,IAA2BF,OAAO,CAACG,GAAR,CAAY,SAAZ,KAA0BjB,EAAzD,EAA6D;AACzD,mBAAOM,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,2CAAV,CAAf,CAAP;AACH;;AACD,cAAI,CAACM,OAAO,CAACE,GAAR,CAAY,SAAZ,CAAD,IAA2BF,OAAO,CAACG,GAAR,CAAY,SAAZ,KAA0Bf,GAAzD,EAA8D;AAC1D,mBAAOI,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,2CAAV,CAAf,CAAP;AACH;;AACD,gBAAM,MAAI,CAAC1B,OAAL,CAAaoC,mBAAb,EAAN;;AACA,UAAA,MAAI,CAACnC,cAAL,CAAoBoC,qBAApB,CAA0C,KAA1C;;AACA,iBAAOb,OAAO,CAACc,OAAR,EAAP;AACH,SAjDD,CAkDA,OAAOvB,GAAP,EAAY;AACR,iBAAOS,OAAO,CAACC,MAAR,CAAeV,GAAf,CAAP;AACH;AArDW;AAsDf;;AAhF+B;;AAkFpCjB,EAAAA,sBAAsB,CAACyC,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,WAAO,KAAKA,CAAC,IAAI3C,sBAAV,EAAkCJ,EAAE,CAACgD,iBAAH,CAAqB/C,EAAE,CAACgD,aAAxB,CAAlC,EAA0EjD,EAAE,CAACgD,iBAAH,CAAqB9C,EAAE,CAACgD,aAAxB,CAA1E,CAAP;AAA2H,GAAtM;;AACA9C,EAAAA,sBAAsB,CAAC+C,IAAvB,GAA8B,aAAcnD,EAAE,CAACoD,iBAAH,CAAqB;AAAEC,IAAAA,IAAI,EAAEjD,sBAAR;AAAgCkD,IAAAA,SAAS,EAAE,CAAC,CAAC,wBAAD,CAAD,CAA3C;AAAyEC,IAAAA,KAAK,EAAE,EAAhF;AAAoFC,IAAAA,IAAI,EAAE,CAA1F;AAA6FC,IAAAA,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,aAAJ,CAAD,EAAqB,CAAC,MAAD,EAAS,OAAT,CAArB,EAAwC,CAAC,aAAD,EAAgB,GAAhB,CAAxC,EAA8D,CAAC,CAAD,EAAI,YAAJ,CAA9D,EAAiF,CAAC,UAAD,EAAa,UAAb,CAAjF,EAA2G,CAAC,MAAD,EAAS,OAAT,CAA3G,EAA8H,CAAC,IAAD,EAAO,WAAP,CAA9H,EAAmJ,CAAC,CAAD,EAAI,aAAJ,CAAnJ,EAAuK,CAAC,CAAD,EAAI,gBAAJ,EAAsB,SAAtB,CAAvK,EAAyM,CAAC,CAAD,EAAI,gBAAJ,EAAsB,SAAtB,CAAzM,CAArG;AAAiVC,IAAAA,QAAQ,EAAE,SAASC,+BAAT,CAAyCC,EAAzC,EAA6CC,GAA7C,EAAkD;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AACpd5D,QAAAA,EAAE,CAAC8D,cAAH,CAAkB,CAAlB,EAAqB,YAArB,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,aAAzC,EAAwD,CAAxD,EAA2D,aAA3D,EAA0E,CAA1E;AACA9D,QAAAA,EAAE,CAAC+D,SAAH,CAAa,CAAb,EAAgB,iBAAhB,EAAmC,CAAnC;AACA/D,QAAAA,EAAE,CAACgE,YAAH;AACAhE,QAAAA,EAAE,CAAC8D,cAAH,CAAkB,CAAlB,EAAqB,WAArB;AACA9D,QAAAA,EAAE,CAACiE,MAAH,CAAU,CAAV,EAAa,sBAAb;AACAjE,QAAAA,EAAE,CAACgE,YAAH;AACAhE,QAAAA,EAAE,CAAC8D,cAAH,CAAkB,CAAlB,EAAqB,aAArB,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,YAA1C,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D,aAA9D,EAA6E,CAA7E,EAAgF,WAAhF,EAA6F,CAA7F;AACA9D,QAAAA,EAAE,CAACiE,MAAH,CAAU,EAAV,EAAc,oBAAd;AACAjE,QAAAA,EAAE,CAACgE,YAAH;AACAhE,QAAAA,EAAE,CAAC8D,cAAH,CAAkB,EAAlB,EAAsB,KAAtB,EAA6B,CAA7B,EAAgC,EAAhC,EAAoC,UAApC,EAAgD,CAAhD,EAAmD,EAAnD,EAAuD,gBAAvD;AACA9D,QAAAA,EAAE,CAACiE,MAAH,CAAU,EAAV,EAAc,mCAAd;AACAjE,QAAAA,EAAE,CAACgE,YAAH;AACAhE,QAAAA,EAAE,CAAC8D,cAAH,CAAkB,EAAlB,EAAsB,GAAtB,EAA2B,CAA3B;AACA9D,QAAAA,EAAE,CAACiE,MAAH,CAAU,EAAV,EAAc,mCAAd;AACAjE,QAAAA,EAAE,CAACgE,YAAH;AACAhE,QAAAA,EAAE,CAAC8D,cAAH,CAAkB,EAAlB,EAAsB,GAAtB,EAA2B,CAA3B;AACA9D,QAAAA,EAAE,CAACiE,MAAH,CAAU,EAAV,EAAc,2BAAd;AACAjE,QAAAA,EAAE,CAACgE,YAAH;AACH;;AAAC,UAAIJ,EAAE,GAAG,CAAT,EAAY;AACV5D,QAAAA,EAAE,CAACkE,UAAH,CAAc,aAAd,EAA6B,IAA7B;AACAlE,QAAAA,EAAE,CAACmE,SAAH,CAAa,CAAb;AACAnE,QAAAA,EAAE,CAACkE,UAAH,CAAc,YAAd,EAA4B,IAA5B;AACH;AAAE,KAvB0D;AAuBxDE,IAAAA,UAAU,EAAE,CAACjE,EAAE,CAACkE,SAAJ,EAAelE,EAAE,CAACmE,UAAlB,EAA8BnE,EAAE,CAACoE,UAAjC,EAA6CpE,EAAE,CAACqE,aAAhD,EAA+DrE,EAAE,CAACsE,qBAAlE,EAAyFtE,EAAE,CAACuE,QAA5F,EAAsGvE,EAAE,CAACwE,UAAzG,EAAqHxE,EAAE,CAACyE,OAAxH,EAAiIzE,EAAE,CAAC0E,YAApI,CAvB4C;AAuBuGC,IAAAA,MAAM,EAAE,CAAC,ogDAAD;AAvB/G,GAArB,CAA5C;AAnFA,SAAa1E,sBAAb;AAAA","sourcesContent":["import { setUsers } from '../utils/no-encryption-utils';\nimport { createSchemaMessages, setMessages } from '../utils/encrypted-set-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class ExistingconnectionPage {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // retrieve the connections\n            const db = await this._sqlite.retrieveConnection(\"testNew\");\n            const db1 = await this._sqlite.retrieveConnection(\"testSet\");\n            // load setUsers in db\n            var ret = await db.executeSet(setUsers);\n            if (ret.changes.changes !== 3) {\n                return Promise.reject(new Error(\"executeSet setUsers failed\"));\n            }\n            // select all users in db\n            ret = await db.query(\"SELECT * FROM users;\");\n            if (ret.values.length !== 7 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\" ||\n                ret.values[2].name !== \"Simpson\" ||\n                ret.values[3].name !== \"Brown\" ||\n                ret.values[4].name !== \"Jackson\" ||\n                ret.values[5].name !== \"Kennedy\" ||\n                ret.values[6].name !== \"Bush\") {\n                return Promise.reject(new Error(\"Query 7 Users failed\"));\n            }\n            // create table messages in db1\n            ret = await db1.execute(createSchemaMessages);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"execute createSchemaMessages failed\"));\n            }\n            // load setMessages in db1\n            ret = await db1.executeSet(setMessages);\n            if (ret.changes.changes !== 3) {\n                return Promise.reject(new Error(\"executeSet setMessages failed\"));\n            }\n            // select all users in db\n            ret = await db1.query(\"SELECT * FROM messages;\");\n            if (ret.values.length !== 3 || ret.values[0].title !== \"message 1\" ||\n                ret.values[1].title !== \"message 2\" ||\n                ret.values[2].title !== \"message 3\") {\n                return Promise.reject(new Error(\"Query 3 Messages failed\"));\n            }\n            // test retrieve all connections\n            var retDict = await this._sqlite.retrieveAllConnections();\n            if (!retDict.has(\"testNew\") || retDict.get(\"testNew\") != db) {\n                return Promise.reject(new Error(\"retrieveAllConnections has TestNew failed\"));\n            }\n            if (!retDict.has(\"testSet\") || retDict.get(\"testSet\") != db1) {\n                return Promise.reject(new Error(\"retrieveAllConnections has TestSet failed\"));\n            }\n            await this._sqlite.closeAllConnections();\n            this._detailService.setExistingConnection(false);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nExistingconnectionPage.ɵfac = function ExistingconnectionPage_Factory(t) { return new (t || ExistingconnectionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nExistingconnectionPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ExistingconnectionPage, selectors: [[\"app-existingconnection\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function ExistingconnectionPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Existingconnection \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Existingconnection\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4aXN0aW5nY29ubmVjdGlvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJleGlzdGluZ2Nvbm5lY3Rpb24ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}