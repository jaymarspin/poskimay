{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index-33ffec25.js';\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\n\nconst createKeyboardController = keyboardChangeCallback => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n\n  const init = () => {\n    keyboardWillShowHandler = () => {\n      keyboardVisible = true;\n      if (keyboardChangeCallback) keyboardChangeCallback(true);\n    };\n\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      if (keyboardChangeCallback) keyboardChangeCallback(false);\n    };\n\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n\n  const isKeyboardVisible = () => keyboardVisible;\n\n  init();\n  return {\n    init,\n    destroy,\n    isKeyboardVisible\n  };\n};\n\nexport { createKeyboardController as c };","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@ionic/angular/node_modules/@ionic/core/dist/esm/keyboard-controller-73af62b2.js"],"names":["w","win","createKeyboardController","keyboardChangeCallback","keyboardWillShowHandler","keyboardWillHideHandler","keyboardVisible","init","addEventListener","destroy","removeEventListener","undefined","isKeyboardVisible","c"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,CAAC,IAAIC,GAAd,QAAyB,qBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,wBAAwB,GAAIC,sBAAD,IAA4B;AAC3D,MAAIC,uBAAJ;AACA,MAAIC,uBAAJ;AACA,MAAIC,eAAJ;;AACA,QAAMC,IAAI,GAAG,MAAM;AACjBH,IAAAA,uBAAuB,GAAG,MAAM;AAC9BE,MAAAA,eAAe,GAAG,IAAlB;AACA,UAAIH,sBAAJ,EACEA,sBAAsB,CAAC,IAAD,CAAtB;AACH,KAJD;;AAKAE,IAAAA,uBAAuB,GAAG,MAAM;AAC9BC,MAAAA,eAAe,GAAG,KAAlB;AACA,UAAIH,sBAAJ,EACEA,sBAAsB,CAAC,KAAD,CAAtB;AACH,KAJD;;AAKAF,IAAAA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACO,gBAAJ,CAAqB,kBAArB,EAAyCJ,uBAAzC,CAA1C;AACAH,IAAAA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACO,gBAAJ,CAAqB,kBAArB,EAAyCH,uBAAzC,CAA1C;AACD,GAbD;;AAcA,QAAMI,OAAO,GAAG,MAAM;AACpBR,IAAAA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACS,mBAAJ,CAAwB,kBAAxB,EAA4CN,uBAA5C,CAA1C;AACAH,IAAAA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAK,KAAK,CAA7B,GAAiC,KAAK,CAAtC,GAA0CA,GAAG,CAACS,mBAAJ,CAAwB,kBAAxB,EAA4CL,uBAA5C,CAA1C;AACAD,IAAAA,uBAAuB,GAAGC,uBAAuB,GAAGM,SAApD;AACD,GAJD;;AAKA,QAAMC,iBAAiB,GAAG,MAAMN,eAAhC;;AACAC,EAAAA,IAAI;AACJ,SAAO;AAAEA,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBG,IAAAA;AAAjB,GAAP;AACD,CA1BD;;AA4BA,SAASV,wBAAwB,IAAIW,CAArC","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win } from './index-33ffec25.js';\n\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nconst createKeyboardController = (keyboardChangeCallback) => {\n  let keyboardWillShowHandler;\n  let keyboardWillHideHandler;\n  let keyboardVisible;\n  const init = () => {\n    keyboardWillShowHandler = () => {\n      keyboardVisible = true;\n      if (keyboardChangeCallback)\n        keyboardChangeCallback(true);\n    };\n    keyboardWillHideHandler = () => {\n      keyboardVisible = false;\n      if (keyboardChangeCallback)\n        keyboardChangeCallback(false);\n    };\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n  };\n  const destroy = () => {\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n    win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n    keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n  };\n  const isKeyboardVisible = () => keyboardVisible;\n  init();\n  return { init, destroy, isKeyboardVisible };\n};\n\nexport { createKeyboardController as c };\n"]},"metadata":{},"sourceType":"module"}