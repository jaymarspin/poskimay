{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nconst NAMESPACE = 'jeep-sqlite';\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\n\nconst promiseResolve = v => Promise.resolve(v);\n\nconst supportsConstructibleStylesheets = /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replace === 'function';\n  } catch (e) {}\n\n  return false;\n})();\n\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n\nconst createTime = (fnName, tagName = '') => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst uniqueTime = (key, measureText) => {\n  {\n    return () => {\n      return;\n    };\n  }\n};\n\nconst rootAppliedStyles = new WeakMap();\n\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n\n  if (supportsConstructibleStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    style.replace(cssText);\n  } else {\n    style = cssText;\n  }\n\n  styles.set(scopeId, style);\n};\n\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n  let scopeId = getScopeId(cmpMeta);\n  const style = styles.get(scopeId); // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n\n  styleContainerNode = styleContainerNode.nodeType === 11\n  /* DocumentFragment */\n  ? styleContainerNode : doc;\n\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n\n      if (!appliedStyles.has(scopeId)) {\n        {\n          {\n            styleElm = doc.createElement('style');\n            styleElm.innerHTML = style;\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n\n  return scopeId;\n};\n\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n\n  if (flags & 10\n  /* needsScopedEncapsulation */\n  ) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n  }\n\n  endAttachStyles();\n};\n\nconst getScopeId = (cmp, mode) => 'sc-' + cmp.$tagName$;\n/**\n * Default style mode id\n */\n\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\n\n\nconst EMPTY_OBJ = {};\n\nconst isDef = v => v != null;\n\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\n\n\nconst h = (nodeName, vnodeData, ...children) => {\n  let child = null;\n  let simple = false;\n  let lastSimple = false;\n  const vNodeChildren = [];\n\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        }\n\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n\n        lastSimple = simple;\n      }\n    }\n  };\n\n  walk(children);\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n\n  return vnode;\n};\n\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  {\n    vnode.$attrs$ = null;\n  }\n  return vnode;\n};\n\nconst Host = {};\n\nconst isHost = node => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n\n\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    memberName.toLowerCase();\n    {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            const n = newValue == null ? '' : newValue; // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {}\n      }\n\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4\n      /* isHost */\n      || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\n\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11\n  /* DocumentFragment */\n  && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  } // add new & update changed attributes\n\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  // tslint:disable-next-line: prefer-const\n  const newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  {\n    // create element\n    elm = newVNode.$elm$ = doc.createElement(newVNode.$tag$); // add css classes, attrs, props, listeners, etc.\n\n    {\n      updateElement(null, newVNode, isSvgMode);\n    }\n\n    if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i); // return node could have been null\n\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n  }\n  return elm;\n};\n\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = parentElm;\n  let childNode;\n\n  if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx);\n\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, before);\n      }\n    }\n  }\n};\n\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnode = vnodes[startIdx]) {\n      elm = vnode.$elm$; // remove the vnode's element from the dom\n\n      elm.remove();\n    }\n  }\n};\n\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // Vnode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      patch(oldStartVnode, newEndVnode);\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      patch(oldEndVnode, newStartVnode);\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      {\n        // new element\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n        newStartVnode = newCh[++newStartIdx];\n      }\n\n      if (node) {\n        {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n\n  if (oldStartIdx > oldEndIdx) {\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (newStartIdx > newEndIdx) {\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n\nconst isSameVnode = (vnode1, vnode2) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (vnode1.$tag$ === vnode2.$tag$) {\n    return true;\n  }\n\n  return false;\n};\n\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  {\n    // element node\n    {\n      {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n\n    if (oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n  }\n};\n\nconst renderVdom = (hostRef, renderFnResults) => {\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n\n  if (cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(([propName, attribute]) => rootVnode.$attrs$[attribute] = hostElm[propName]);\n  }\n\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4\n  /* isHost */\n  ;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = hostElm.shadowRoot || hostElm;\n  {\n    scopeId = hostElm['s-sc'];\n  } // synchronous patch\n\n  patch(oldVNode, rootVnode);\n};\n\nconst getElement = ref => getHostRef(ref).$hostElement$;\n\nconst createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: detail => {\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4\n        /* Bubbles */\n        ),\n        composed: !!(flags & 2\n        /* Composed */\n        ),\n        cancelable: !!(flags & 1\n        /* Cancellable */\n        ),\n        detail\n      });\n    }\n  };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\n\n\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\n\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\n\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  {\n    hostRef.$flags$ |= 16\n    /* isQueuedForUpdate */\n    ;\n  }\n\n  if (hostRef.$flags$ & 4\n  /* isWaitingForChildren */\n  ) {\n    hostRef.$flags$ |= 512\n    /* needsRerender */\n    ;\n    return;\n  }\n\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$); // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n\n  return writeTask(dispatch);\n};\n\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = hostRef.$lazyInstance$;\n  let promise;\n\n  if (isInitialLoad) {\n    {\n      promise = safeCall(instance, 'componentWillLoad');\n    }\n  }\n\n  endSchedule();\n  return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n\nconst updateComponent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (hostRef, instance, isInitialLoad) {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n\n    if (isInitialLoad) {\n      // DOM WRITE!\n      attachStyles(hostRef);\n    }\n\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n      callRender(hostRef, instance);\n    }\n\n    if (rc) {\n      // ok, so turns out there are some child host elements\n      // waiting on this parent element to load\n      // let's fire off all update callbacks waiting\n      rc.map(cb => cb());\n      elm['s-rc'] = undefined;\n    }\n\n    endRender();\n    endUpdate();\n    {\n      const childrenPromises = elm['s-p'];\n\n      const postUpdate = () => postUpdateComponent(hostRef);\n\n      if (childrenPromises.length === 0) {\n        postUpdate();\n      } else {\n        Promise.all(childrenPromises).then(postUpdate);\n        hostRef.$flags$ |= 4\n        /* isWaitingForChildren */\n        ;\n        childrenPromises.length = 0;\n      }\n    }\n  });\n\n  return function updateComponent(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nconst callRender = (hostRef, instance, elm) => {\n  try {\n    instance = instance.render();\n    {\n      hostRef.$flags$ &= ~16\n      /* isQueuedForUpdate */\n      ;\n    }\n    {\n      hostRef.$flags$ |= 2\n      /* hasRendered */\n      ;\n    }\n    {\n      {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        {\n          renderVdom(hostRef, instance);\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n\n  return null;\n};\n\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = hostRef.$lazyInstance$;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n\n  if (!(hostRef.$flags$ & 64\n  /* hasLoadedComponent */\n  )) {\n    hostRef.$flags$ |= 64\n    /* hasLoadedComponent */\n    ;\n    {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    {\n      safeCall(instance, 'componentDidLoad');\n    }\n    endPostUpdate();\n    {\n      hostRef.$onReadyResolve$(elm);\n\n      if (!ancestorComponent) {\n        appDidLoad();\n      }\n    }\n  } else {\n    endPostUpdate();\n  }\n\n  {\n    hostRef.$onInstanceResolve$(elm);\n  } // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n\n  {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n\n    if (hostRef.$flags$ & 512\n    /* needsRerender */\n    ) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n\n    hostRef.$flags$ &= ~(4\n    /* isWaitingForChildren */\n    | 512\n    /* needsRerender */\n    );\n  } // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\n\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  {\n    addHydratedFlag(doc.documentElement);\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n};\n\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  return undefined;\n};\n\nconst then = (promise, thenFn) => {\n  return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\n\nconst addHydratedFlag = elm => elm.classList.add('hydrated');\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\n\n\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (propType & 4\n    /* Boolean */\n    ) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    } // redundant return here for better minification\n\n\n    return propValue;\n  } // not sure exactly what type we want\n  // so no need to change to a different type\n\n\n  return propValue;\n};\n\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\n\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = hostRef.$hostElement$;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = hostRef.$lazyInstance$;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]); // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n\n  if ((!(flags & 8\n  /* isConstructingInstance */\n  ) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n\n    if (instance) {\n      // get an array of method names of watch functions to call\n      if (cmpMeta.$watchers$ && flags & 128\n      /* isWatchReady */\n      ) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n\n      if ((flags & (2\n      /* hasRendered */\n      | 16\n      /* isQueuedForUpdate */\n      )) === 2\n      /* hasRendered */\n      ) {\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  if (cmpMeta.$members$) {\n    if (Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    } // It's better to have a const than two Object.entries()\n\n\n    const members = Object.entries(cmpMeta.$members$);\n    const prototype = Cstr.prototype;\n    members.map(([memberName, [memberFlags]]) => {\n      if (memberFlags & 31\n      /* Prop */\n      || flags & 2\n      /* proxyState */\n      && memberFlags & 32\n      /* State */\n      ) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n\n          set(newValue) {\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n\n          configurable: true,\n          enumerable: true\n        });\n      } else if (flags & 1\n      /* isElementConstructor */\n      && memberFlags & 64\n      /* Method */\n      ) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value(...args) {\n            const ref = getHostRef(this);\n            return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n          }\n\n        });\n      }\n    });\n\n    if (flags & 1\n    /* isElementConstructor */\n    ) {\n      const attrNameToPropName = new Map();\n\n      prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n        plt.jmp(() => {\n          const propName = attrNameToPropName.get(attrName); //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === 'number' && this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          }\n\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      }; // create an array of attributes to observe\n      // and also create a map of html attribute name to js property name\n\n\n      Cstr.observedAttributes = members.filter(([_, m]) => m[0] & 15\n      /* HasAttribute */\n      ) // filter to only keep props that should match attributes\n      .map(([propName, m]) => {\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n\n        if (m[0] & 512\n        /* ReflectAttr */\n        ) {\n          cmpMeta.$attrsToReflect$.push([propName, attrName]);\n        }\n\n        return attrName;\n      });\n    }\n  }\n\n  return Cstr;\n};\n\nconst initializeComponent = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (elm, hostRef, cmpMeta, hmrVersionId, Cstr) {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32\n    /* hasInitializedComponent */\n    ) === 0) {\n      {\n        // we haven't initialized this element yet\n        hostRef.$flags$ |= 32\n        /* hasInitializedComponent */\n        ; // lazy loaded components\n        // request the component's implementation to be\n        // wired up with the host element\n\n        Cstr = loadModule(cmpMeta);\n\n        if (Cstr.then) {\n          // Await creates a micro-task avoid if possible\n          const endLoad = uniqueTime();\n          Cstr = yield Cstr;\n          endLoad();\n        }\n\n        if (!Cstr.isProxied) {\n          // we've never proxied this Constructor before\n          // let's add the getters/setters to its prototype before\n          // the first time we create an instance of the implementation\n          {\n            cmpMeta.$watchers$ = Cstr.watchers;\n          }\n          proxyComponent(Cstr, cmpMeta, 2\n          /* proxyState */\n          );\n          Cstr.isProxied = true;\n        }\n\n        const endNewInstance = createTime('createInstance', cmpMeta.$tagName$); // ok, time to construct the instance\n        // but let's keep track of when we start and stop\n        // so that the getters/setters don't incorrectly step on data\n\n        {\n          hostRef.$flags$ |= 8\n          /* isConstructingInstance */\n          ;\n        } // construct the lazy-loaded component implementation\n        // passing the hostRef is very important during\n        // construction in order to directly wire together the\n        // host element and the lazy-loaded instance\n\n        try {\n          new Cstr(hostRef);\n        } catch (e) {\n          consoleError(e);\n        }\n\n        {\n          hostRef.$flags$ &= ~8\n          /* isConstructingInstance */\n          ;\n        }\n        {\n          hostRef.$flags$ |= 128\n          /* isWatchReady */\n          ;\n        }\n        endNewInstance();\n      }\n\n      if (Cstr.style) {\n        // this component has styles but we haven't registered them yet\n        let style = Cstr.style;\n        const scopeId = getScopeId(cmpMeta);\n\n        if (!styles.has(scopeId)) {\n          const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n          registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ));\n          endRegisterStyles();\n        }\n      }\n    } // we've successfully created a lazy instance\n\n\n    const ancestorComponent = hostRef.$ancestorComponent$;\n\n    const schedule = () => scheduleUpdate(hostRef, true);\n\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n      // this is the initial load and this component it has an ancestor component\n      // but the ancestor component has NOT fired its will update lifecycle yet\n      // so let's just cool our jets and wait for the ancestor to continue first\n      // this will get fired off when the ancestor component\n      // finally gets around to rendering its lazy self\n      // fire off the initial update\n      ancestorComponent['s-rc'].push(schedule);\n    } else {\n      schedule();\n    }\n  });\n\n  return function initializeComponent(_x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n\n    if (!(hostRef.$flags$ & 1\n    /* hasConnected */\n    )) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1\n      /* hasConnected */\n      ;\n      {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      } // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n\n      if (cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n          if (memberFlags & 31\n          /* Prop */\n          && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n\n      {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    }\n\n    endConnected();\n  }\n};\n\nconst disconnectedCallback = elm => {\n  if ((plt.$flags$ & 1\n  /* isTmpDisconnected */\n  ) === 0) {\n    getHostRef(elm);\n  }\n};\n\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n  const endBootstrap = createTime();\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const visibilityStyle = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  let appLoadFallback;\n  let isBootstrapping = true;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      {\n        cmpMeta.$watchers$ = {};\n      }\n      const tagName = cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n\n          if (cmpMeta.$flags$ & 1\n          /* shadowDomEncapsulation */\n          ) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            {\n              {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            }\n          }\n        }\n\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n\n      };\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1\n        /* isElementConstructor */\n        ));\n      }\n    });\n  });\n  {\n    visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n    visibilityStyle.setAttribute('data-styles', '');\n    head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n  } // Process deferred connectedCallbacks now all components have been registered\n\n  isBootstrapping = false;\n\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  } // Fallback appLoad event\n\n\n  endBootstrap();\n};\n\nconst hostRefs = new WeakMap();\n\nconst getHostRef = ref => hostRefs.get(ref);\n\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n\nconst registerHost = (elm, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: elm,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  {\n    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);\n  }\n  {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    elm['s-p'] = [];\n    elm['s-rc'] = [];\n  }\n  return hostRefs.set(elm, hostRef);\n};\n\nconst isMemberInElement = (elm, memberName) => memberName in elm;\n\nconst consoleError = (e, el) => (0, console.error)(e, el);\n\nconst cmpModules = /*@__PURE__*/new Map();\n\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  const module = cmpModules.get(bundleId);\n\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n\n\n  return import(\n  /* @vite-ignore */\n\n  /* webpackInclude: /\\.entry\\.js$/ */\n\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${''}`).then(importedModule => {\n    {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\n\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\n\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n\n  if (!queuePending) {\n    queuePending = true;\n\n    if (write && plt.$flags$ & 4\n    /* queueSync */\n    ) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\n\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n\n  queue.length = 0;\n};\n\nconst flush = () => {\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads); // DOM WRITES!!!\n\n  {\n    consume(queueDomWrites);\n\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\n\nconst nextTick = /*@__PURE__*/cb => promiseResolve().then(cb);\n\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { bootstrapLazy as b, createEvent as c, promiseResolve as p, registerInstance as r };","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/jeep-sqlite/dist/esm/index-51841070.js"],"names":["NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","win","window","doc","document","head","plt","$flags$","$resourcesUrl$","jmp","h","raf","requestAnimationFrame","ael","el","eventName","listener","opts","addEventListener","rel","removeEventListener","ce","CustomEvent","promiseResolve","v","Promise","resolve","supportsConstructibleStylesheets","CSSStyleSheet","replace","e","HYDRATED_CSS","createTime","fnName","tagName","uniqueTime","key","measureText","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","get","set","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","nodeType","appliedStyles","styleElm","Set","has","createElement","innerHTML","insertBefore","querySelector","add","adoptedStyleSheets","includes","attachStyles","hostRef","$cmpMeta$","elm","$hostElement$","flags","endAttachStyles","$tagName$","shadowRoot","getRootNode","classList","cmp","EMPTY_OBJ","isDef","isComplexType","o","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","c","i","length","Array","isArray","String","$text$","push","newVNode","vnode","$attrs$","$children$","tag","text","$tag$","$elm$","Host","isHost","node","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","toLowerCase","isComplex","n","getAttribute","removeAttribute","setAttribute","updateElement","oldVnode","newVnode","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","appendChild","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","remove","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","nextSibling","parentNode","vnode1","vnode2","oldVNode","oldChildren","newChildren","renderVdom","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","map","propName","attribute","getElement","ref","getHostRef","createEvent","name","emit","detail","emitEvent","bubbles","composed","cancelable","ev","dispatchEvent","attachToAncestor","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","dispatch","dispatchHooks","writeTask","endSchedule","instance","$lazyInstance$","promise","safeCall","then","updateComponent","endUpdate","rc","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","consoleError","endPostUpdate","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","who","documentElement","namespace","method","arg","thenFn","parsePropertyValue","propValue","propType","getValue","$instanceValues$","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","$watchers$","watchMethods","watchMethodName","proxyComponent","Cstr","watchers","members","Object","entries","prototype","memberFlags","defineProperty","configurable","enumerable","value","args","$onInstancePromise$","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","hasOwnProperty","observedAttributes","filter","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","schedule","connectedCallback","endConnected","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","HTMLElement","constructor","self","registerHost","attachShadow","clearTimeout","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","hostRefs","registerInstance","lazyInstance","console","error","cmpModules","exportName","bundleId","module","importedModule","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","b","p"],"mappings":";AAAA,MAAMA,SAAS,GAAG,aAAlB;AAEA,IAAIC,OAAJ;AACA,IAAIC,WAAJ;AACA,IAAIC,SAAS,GAAG,KAAhB;AACA,IAAIC,YAAY,GAAG,KAAnB;AACA,MAAMC,GAAG,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyC,EAArD;AACA,MAAMC,GAAG,GAAGF,GAAG,CAACG,QAAJ,IAAgB;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAA5B;AACA,MAAMC,GAAG,GAAG;AACRC,EAAAA,OAAO,EAAE,CADD;AAERC,EAAAA,cAAc,EAAE,EAFR;AAGRC,EAAAA,GAAG,EAAGC,CAAD,IAAOA,CAAC,EAHL;AAIRC,EAAAA,GAAG,EAAGD,CAAD,IAAOE,qBAAqB,CAACF,CAAD,CAJzB;AAKRG,EAAAA,GAAG,EAAE,CAACC,EAAD,EAAKC,SAAL,EAAgBC,QAAhB,EAA0BC,IAA1B,KAAmCH,EAAE,CAACI,gBAAH,CAAoBH,SAApB,EAA+BC,QAA/B,EAAyCC,IAAzC,CALhC;AAMRE,EAAAA,GAAG,EAAE,CAACL,EAAD,EAAKC,SAAL,EAAgBC,QAAhB,EAA0BC,IAA1B,KAAmCH,EAAE,CAACM,mBAAH,CAAuBL,SAAvB,EAAkCC,QAAlC,EAA4CC,IAA5C,CANhC;AAORI,EAAAA,EAAE,EAAE,CAACN,SAAD,EAAYE,IAAZ,KAAqB,IAAIK,WAAJ,CAAgBP,SAAhB,EAA2BE,IAA3B;AAPjB,CAAZ;;AASA,MAAMM,cAAc,GAAIC,CAAD,IAAOC,OAAO,CAACC,OAAR,CAAgBF,CAAhB,CAA9B;;AACA,MAAMG,gCAAgC,GAAG,aAAc,CAAC,MAAM;AACtD,MAAI;AACA,QAAIC,aAAJ;AACA,WAAO,OAAO,IAAIA,aAAJ,GAAoBC,OAA3B,KAAuC,UAA9C;AACH,GAHD,CAIA,OAAOC,CAAP,EAAU,CAAG;;AACb,SAAO,KAAP;AACH,CAPkD,GAAvD;;AASA,MAAMC,YAAY,GAAG,kDAArB;;AACA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,OAAO,GAAG,EAAnB,KAA0B;AACzC;AACI,WAAO,MAAM;AACT;AACH,KAFD;AAGH;AACJ,CAND;;AAOA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,WAAN,KAAsB;AACrC;AACI,WAAO,MAAM;AACT;AACH,KAFD;AAGH;AACJ,CAND;;AAOA,MAAMC,iBAAiB,GAAG,IAAIC,OAAJ,EAA1B;;AACA,MAAMC,aAAa,GAAG,CAAC3C,OAAD,EAAU4C,OAAV,EAAmBC,OAAnB,KAA+B;AACjD,MAAIC,KAAK,GAAGC,MAAM,CAACC,GAAP,CAAWhD,OAAX,CAAZ;;AACA,MAAI8B,gCAAgC,IAAIe,OAAxC,EAAiD;AAC7CC,IAAAA,KAAK,GAAIA,KAAK,IAAI,IAAIf,aAAJ,EAAlB;AACAe,IAAAA,KAAK,CAACd,OAAN,CAAcY,OAAd;AACH,GAHD,MAIK;AACDE,IAAAA,KAAK,GAAGF,OAAR;AACH;;AACDG,EAAAA,MAAM,CAACE,GAAP,CAAWjD,OAAX,EAAoB8C,KAApB;AACH,CAVD;;AAWA,MAAMI,QAAQ,GAAG,CAACC,kBAAD,EAAqBC,OAArB,EAA8BC,IAA9B,EAAoCC,OAApC,KAAgD;AAC7D,MAAItD,OAAO,GAAGuD,UAAU,CAACH,OAAD,CAAxB;AACA,QAAMN,KAAK,GAAGC,MAAM,CAACC,GAAP,CAAWhD,OAAX,CAAd,CAF6D,CAG7D;AACA;;AACAmD,EAAAA,kBAAkB,GAAGA,kBAAkB,CAACK,QAAnB,KAAgC;AAAG;AAAnC,IAA4DL,kBAA5D,GAAiF7C,GAAtG;;AACA,MAAIwC,KAAJ,EAAW;AACP,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BK,MAAAA,kBAAkB,GAAGA,kBAAkB,CAAC3C,IAAnB,IAA2B2C,kBAAhD;AACA,UAAIM,aAAa,GAAGhB,iBAAiB,CAACO,GAAlB,CAAsBG,kBAAtB,CAApB;AACA,UAAIO,QAAJ;;AACA,UAAI,CAACD,aAAL,EAAoB;AAChBhB,QAAAA,iBAAiB,CAACQ,GAAlB,CAAsBE,kBAAtB,EAA2CM,aAAa,GAAG,IAAIE,GAAJ,EAA3D;AACH;;AACD,UAAI,CAACF,aAAa,CAACG,GAAd,CAAkB5D,OAAlB,CAAL,EAAiC;AAC7B;AACI;AACI0D,YAAAA,QAAQ,GAAGpD,GAAG,CAACuD,aAAJ,CAAkB,OAAlB,CAAX;AACAH,YAAAA,QAAQ,CAACI,SAAT,GAAqBhB,KAArB;AACH;AACDK,UAAAA,kBAAkB,CAACY,YAAnB,CAAgCL,QAAhC,EAA0CP,kBAAkB,CAACa,aAAnB,CAAiC,MAAjC,CAA1C;AACH;;AACD,YAAIP,aAAJ,EAAmB;AACfA,UAAAA,aAAa,CAACQ,GAAd,CAAkBjE,OAAlB;AACH;AACJ;AACJ,KAnBD,MAoBK,IAAI,CAACmD,kBAAkB,CAACe,kBAAnB,CAAsCC,QAAtC,CAA+CrB,KAA/C,CAAL,EAA4D;AAC7DK,MAAAA,kBAAkB,CAACe,kBAAnB,GAAwC,CAAC,GAAGf,kBAAkB,CAACe,kBAAvB,EAA2CpB,KAA3C,CAAxC;AACH;AACJ;;AACD,SAAO9C,OAAP;AACH,CAhCD;;AAiCA,MAAMoE,YAAY,GAAIC,OAAD,IAAa;AAC9B,QAAMjB,OAAO,GAAGiB,OAAO,CAACC,SAAxB;AACA,QAAMC,GAAG,GAAGF,OAAO,CAACG,aAApB;AACA,QAAMC,KAAK,GAAGrB,OAAO,CAAC1C,OAAtB;AACA,QAAMgE,eAAe,GAAGvC,UAAU,CAAC,cAAD,EAAiBiB,OAAO,CAACuB,SAAzB,CAAlC;AACA,QAAM3E,OAAO,GAAGkD,QAAQ,CAACqB,GAAG,CAACK,UAAJ,GAAiBL,GAAG,CAACK,UAArB,GAAkCL,GAAG,CAACM,WAAJ,EAAnC,EAAsDzB,OAAtD,CAAxB;;AACA,MAAIqB,KAAK,GAAG;AAAG;AAAf,IAA+C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,IAAAA,GAAG,CAAC,MAAD,CAAH,GAAcvE,OAAd;AACAuE,IAAAA,GAAG,CAACO,SAAJ,CAAcb,GAAd,CAAkBjE,OAAO,GAAG,IAA5B;AACH;;AACD0E,EAAAA,eAAe;AAClB,CAlBD;;AAmBA,MAAMnB,UAAU,GAAG,CAACwB,GAAD,EAAM1B,IAAN,KAAe,QAAS0B,GAAG,CAACJ,SAA/C;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,MAAMK,SAAS,GAAG,EAAlB;;AACA,MAAMC,KAAK,GAAItD,CAAD,IAAOA,CAAC,IAAI,IAA1B;;AACA,MAAMuD,aAAa,GAAIC,CAAD,IAAO;AACzB;AACAA,EAAAA,CAAC,GAAG,OAAOA,CAAX;AACA,SAAOA,CAAC,KAAK,QAAN,IAAkBA,CAAC,KAAK,UAA/B;AACH,CAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMtE,CAAC,GAAG,CAACuE,QAAD,EAAWC,SAAX,EAAsB,GAAGC,QAAzB,KAAsC;AAC5C,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,QAAMC,aAAa,GAAG,EAAtB;;AACA,QAAMC,IAAI,GAAIC,CAAD,IAAO;AAChB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAAC,CAACE,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/BN,MAAAA,KAAK,GAAGK,CAAC,CAACC,CAAD,CAAT;;AACA,UAAIE,KAAK,CAACC,OAAN,CAAcT,KAAd,CAAJ,EAA0B;AACtBI,QAAAA,IAAI,CAACJ,KAAD,CAAJ;AACH,OAFD,MAGK,IAAIA,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,SAAtC,EAAiD;AAClD,YAAKC,MAAM,GAAG,OAAOJ,QAAP,KAAoB,UAApB,IAAkC,CAACF,aAAa,CAACK,KAAD,CAA9D,EAAwE;AACpEA,UAAAA,KAAK,GAAGU,MAAM,CAACV,KAAD,CAAd;AACH;;AACD,YAAIC,MAAM,IAAIC,UAAd,EAA0B;AACtB;AACAC,UAAAA,aAAa,CAACA,aAAa,CAACI,MAAd,GAAuB,CAAxB,CAAb,CAAwCI,MAAxC,IAAkDX,KAAlD;AACH,SAHD,MAIK;AACD;AACAG,UAAAA,aAAa,CAACS,IAAd,CAAmBX,MAAM,GAAGY,QAAQ,CAAC,IAAD,EAAOb,KAAP,CAAX,GAA2BA,KAApD;AACH;;AACDE,QAAAA,UAAU,GAAGD,MAAb;AACH;AACJ;AACJ,GArBD;;AAsBAG,EAAAA,IAAI,CAACL,QAAD,CAAJ;AACA,QAAMe,KAAK,GAAGD,QAAQ,CAAChB,QAAD,EAAW,IAAX,CAAtB;AACAiB,EAAAA,KAAK,CAACC,OAAN,GAAgBjB,SAAhB;;AACA,MAAIK,aAAa,CAACI,MAAd,GAAuB,CAA3B,EAA8B;AAC1BO,IAAAA,KAAK,CAACE,UAAN,GAAmBb,aAAnB;AACH;;AACD,SAAOW,KAAP;AACH,CAlCD;;AAmCA,MAAMD,QAAQ,GAAG,CAACI,GAAD,EAAMC,IAAN,KAAe;AAC5B,QAAMJ,KAAK,GAAG;AACV3F,IAAAA,OAAO,EAAE,CADC;AAEVgG,IAAAA,KAAK,EAAEF,GAFG;AAGVN,IAAAA,MAAM,EAAEO,IAHE;AAIVE,IAAAA,KAAK,EAAE,IAJG;AAKVJ,IAAAA,UAAU,EAAE;AALF,GAAd;AAOA;AACIF,IAAAA,KAAK,CAACC,OAAN,GAAgB,IAAhB;AACH;AACD,SAAOD,KAAP;AACH,CAZD;;AAaA,MAAMO,IAAI,GAAG,EAAb;;AACA,MAAMC,MAAM,GAAIC,IAAD,IAAUA,IAAI,IAAIA,IAAI,CAACJ,KAAL,KAAeE,IAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,WAAW,GAAG,CAACxC,GAAD,EAAMyC,UAAN,EAAkBC,QAAlB,EAA4BC,QAA5B,EAAsCC,KAAtC,EAA6C1C,KAA7C,KAAuD;AACvE,MAAIwC,QAAQ,KAAKC,QAAjB,EAA2B;AACvB,QAAIE,MAAM,GAAGC,iBAAiB,CAAC9C,GAAD,EAAMyC,UAAN,CAA9B;AACAA,IAAAA,UAAU,CAACM,WAAX;AACA;AACI;AACA,YAAMC,SAAS,GAAGrC,aAAa,CAACgC,QAAD,CAA/B;;AACA,UAAI,CAACE,MAAM,IAAKG,SAAS,IAAIL,QAAQ,KAAK,IAAtC,KAAgD,CAACC,KAArD,EAA4D;AACxD,YAAI;AACA,cAAI,CAAC5C,GAAG,CAAClC,OAAJ,CAAY8B,QAAZ,CAAqB,GAArB,CAAL,EAAgC;AAC5B,kBAAMqD,CAAC,GAAGN,QAAQ,IAAI,IAAZ,GAAmB,EAAnB,GAAwBA,QAAlC,CAD4B,CAE5B;;AACA,gBAAIF,UAAU,KAAK,MAAnB,EAA2B;AACvBI,cAAAA,MAAM,GAAG,KAAT;AACH,aAFD,MAGK,IAAIH,QAAQ,IAAI,IAAZ,IAAoB1C,GAAG,CAACyC,UAAD,CAAH,IAAmBQ,CAA3C,EAA8C;AAC/CjD,cAAAA,GAAG,CAACyC,UAAD,CAAH,GAAkBQ,CAAlB;AACH;AACJ,WATD,MAUK;AACDjD,YAAAA,GAAG,CAACyC,UAAD,CAAH,GAAkBE,QAAlB;AACH;AACJ,SAdD,CAeA,OAAOjF,CAAP,EAAU,CAAG;AAChB;;AACD,UAAIiF,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,KAAK,KAArC,EAA4C;AACxC,YAAIA,QAAQ,KAAK,KAAb,IAAsB3C,GAAG,CAACkD,YAAJ,CAAiBT,UAAjB,MAAiC,EAA3D,EAA+D;AAC3D;AACIzC,YAAAA,GAAG,CAACmD,eAAJ,CAAoBV,UAApB;AACH;AACJ;AACJ,OAND,MAOK,IAAI,CAAC,CAACI,MAAD,IAAW3C,KAAK,GAAG;AAAE;AAArB,SAAqC0C,KAAtC,KAAgD,CAACI,SAArD,EAAgE;AACjEL,QAAAA,QAAQ,GAAGA,QAAQ,KAAK,IAAb,GAAoB,EAApB,GAAyBA,QAApC;AACA;AACI3C,UAAAA,GAAG,CAACoD,YAAJ,CAAiBX,UAAjB,EAA6BE,QAA7B;AACH;AACJ;AACJ;AACJ;AACJ,CAxCD;;AAyCA,MAAMU,aAAa,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqB5H,SAArB,EAAgC8G,UAAhC,KAA+C;AACjE;AACA;AACA;AACA,QAAMzC,GAAG,GAAGuD,QAAQ,CAACnB,KAAT,CAAenD,QAAf,KAA4B;AAAG;AAA/B,KAAyDsE,QAAQ,CAACnB,KAAT,CAAeoB,IAAxE,GACND,QAAQ,CAACnB,KAAT,CAAeoB,IADT,GAEND,QAAQ,CAACnB,KAFf;AAGA,QAAMqB,aAAa,GAAIH,QAAQ,IAAIA,QAAQ,CAACvB,OAAtB,IAAkCtB,SAAxD;AACA,QAAMiD,aAAa,GAAGH,QAAQ,CAACxB,OAAT,IAAoBtB,SAA1C;AACA;AACI;AACA,SAAKgC,UAAL,IAAmBgB,aAAnB,EAAkC;AAC9B,UAAI,EAAEhB,UAAU,IAAIiB,aAAhB,CAAJ,EAAoC;AAChClB,QAAAA,WAAW,CAACxC,GAAD,EAAMyC,UAAN,EAAkBgB,aAAa,CAAChB,UAAD,CAA/B,EAA6CkB,SAA7C,EAAwDhI,SAAxD,EAAmE4H,QAAQ,CAACpH,OAA5E,CAAX;AACH;AACJ;AACJ,GAhBgE,CAiBjE;;AACA,OAAKsG,UAAL,IAAmBiB,aAAnB,EAAkC;AAC9BlB,IAAAA,WAAW,CAACxC,GAAD,EAAMyC,UAAN,EAAkBgB,aAAa,CAAChB,UAAD,CAA/B,EAA6CiB,aAAa,CAACjB,UAAD,CAA1D,EAAwE9G,SAAxE,EAAmF4H,QAAQ,CAACpH,OAA5F,CAAX;AACH;AACJ,CArBD;;AAsBA,MAAMyH,SAAS,GAAG,CAACC,cAAD,EAAiBC,cAAjB,EAAiCC,UAAjC,EAA6CC,SAA7C,KAA2D;AACzE;AACA,QAAMnC,QAAQ,GAAGiC,cAAc,CAAC9B,UAAf,CAA0B+B,UAA1B,CAAjB;AACA,MAAIzC,CAAC,GAAG,CAAR;AACA,MAAItB,GAAJ;AACA,MAAIiE,SAAJ;AACA;AACI;AACAjE,IAAAA,GAAG,GAAG6B,QAAQ,CAACO,KAAT,GAAkBrG,GAAG,CAACuD,aAAJ,CAAkBuC,QAAQ,CAACM,KAA3B,CAAxB,CAFJ,CAGI;;AACA;AACIkB,MAAAA,aAAa,CAAC,IAAD,EAAOxB,QAAP,EAAiBlG,SAAjB,CAAb;AACH;;AACD,QAAI+E,KAAK,CAACjF,OAAD,CAAL,IAAkBuE,GAAG,CAAC,MAAD,CAAH,KAAgBvE,OAAtC,EAA+C;AAC3C;AACA;AACAuE,MAAAA,GAAG,CAACO,SAAJ,CAAcb,GAAd,CAAmBM,GAAG,CAAC,MAAD,CAAH,GAAcvE,OAAjC;AACH;;AACD,QAAIoG,QAAQ,CAACG,UAAb,EAAyB;AACrB,WAAKV,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGO,QAAQ,CAACG,UAAT,CAAoBT,MAApC,EAA4C,EAAED,CAA9C,EAAiD;AAC7C;AACA2C,QAAAA,SAAS,GAAGL,SAAS,CAACC,cAAD,EAAiBhC,QAAjB,EAA2BP,CAA3B,CAArB,CAF6C,CAG7C;;AACA,YAAI2C,SAAJ,EAAe;AACX;AACAjE,UAAAA,GAAG,CAACkE,WAAJ,CAAgBD,SAAhB;AACH;AACJ;AACJ;AACJ;AACD,SAAOjE,GAAP;AACH,CA/BD;;AAgCA,MAAMmE,SAAS,GAAG,CAACH,SAAD,EAAYI,MAAZ,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCC,QAAzC,EAAmDC,MAAnD,KAA8D;AAC5E,MAAIC,YAAY,GAAIT,SAApB;AACA,MAAIC,SAAJ;;AACA,MAAIQ,YAAY,CAACpE,UAAb,IAA2BoE,YAAY,CAAC3G,OAAb,KAAyBpC,WAAxD,EAAqE;AACjE+I,IAAAA,YAAY,GAAGA,YAAY,CAACpE,UAA5B;AACH;;AACD,SAAOkE,QAAQ,IAAIC,MAAnB,EAA2B,EAAED,QAA7B,EAAuC;AACnC,QAAID,MAAM,CAACC,QAAD,CAAV,EAAsB;AAClBN,MAAAA,SAAS,GAAGL,SAAS,CAAC,IAAD,EAAOS,WAAP,EAAoBE,QAApB,CAArB;;AACA,UAAIN,SAAJ,EAAe;AACXK,QAAAA,MAAM,CAACC,QAAD,CAAN,CAAiBnC,KAAjB,GAAyB6B,SAAzB;AACAQ,QAAAA,YAAY,CAACjF,YAAb,CAA0ByE,SAA1B,EAAqCG,MAArC;AACH;AACJ;AACJ;AACJ,CAfD;;AAgBA,MAAMM,YAAY,GAAG,CAACJ,MAAD,EAASC,QAAT,EAAmBC,MAAnB,EAA2B1C,KAA3B,EAAkC9B,GAAlC,KAA0C;AAC3D,SAAOuE,QAAQ,IAAIC,MAAnB,EAA2B,EAAED,QAA7B,EAAuC;AACnC,QAAKzC,KAAK,GAAGwC,MAAM,CAACC,QAAD,CAAnB,EAAgC;AAC5BvE,MAAAA,GAAG,GAAG8B,KAAK,CAACM,KAAZ,CAD4B,CAE5B;;AACApC,MAAAA,GAAG,CAAC2E,MAAJ;AACH;AACJ;AACJ,CARD;;AASA,MAAMC,cAAc,GAAG,CAACZ,SAAD,EAAYa,KAAZ,EAAmBhD,QAAnB,EAA6BiD,KAA7B,KAAuC;AAC1D,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,SAAS,GAAGJ,KAAK,CAACtD,MAAN,GAAe,CAA/B;AACA,MAAI2D,aAAa,GAAGL,KAAK,CAAC,CAAD,CAAzB;AACA,MAAIM,WAAW,GAAGN,KAAK,CAACI,SAAD,CAAvB;AACA,MAAIG,SAAS,GAAGN,KAAK,CAACvD,MAAN,GAAe,CAA/B;AACA,MAAI8D,aAAa,GAAGP,KAAK,CAAC,CAAD,CAAzB;AACA,MAAIQ,WAAW,GAAGR,KAAK,CAACM,SAAD,CAAvB;AACA,MAAI7C,IAAJ;;AACA,SAAOwC,WAAW,IAAIE,SAAf,IAA4BD,WAAW,IAAII,SAAlD,EAA6D;AACzD,QAAIF,aAAa,IAAI,IAArB,EAA2B;AACvB;AACAA,MAAAA,aAAa,GAAGL,KAAK,CAAC,EAAEE,WAAH,CAArB;AACH,KAHD,MAIK,IAAII,WAAW,IAAI,IAAnB,EAAyB;AAC1BA,MAAAA,WAAW,GAAGN,KAAK,CAAC,EAAEI,SAAH,CAAnB;AACH,KAFI,MAGA,IAAII,aAAa,IAAI,IAArB,EAA2B;AAC5BA,MAAAA,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAH,CAArB;AACH,KAFI,MAGA,IAAIM,WAAW,IAAI,IAAnB,EAAyB;AAC1BA,MAAAA,WAAW,GAAGR,KAAK,CAAC,EAAEM,SAAH,CAAnB;AACH,KAFI,MAGA,IAAIG,WAAW,CAACL,aAAD,EAAgBG,aAAhB,CAAf,EAA+C;AAChDG,MAAAA,KAAK,CAACN,aAAD,EAAgBG,aAAhB,CAAL;AACAH,MAAAA,aAAa,GAAGL,KAAK,CAAC,EAAEE,WAAH,CAArB;AACAM,MAAAA,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAH,CAArB;AACH,KAJI,MAKA,IAAIO,WAAW,CAACJ,WAAD,EAAcG,WAAd,CAAf,EAA2C;AAC5CE,MAAAA,KAAK,CAACL,WAAD,EAAcG,WAAd,CAAL;AACAH,MAAAA,WAAW,GAAGN,KAAK,CAAC,EAAEI,SAAH,CAAnB;AACAK,MAAAA,WAAW,GAAGR,KAAK,CAAC,EAAEM,SAAH,CAAnB;AACH,KAJI,MAKA,IAAIG,WAAW,CAACL,aAAD,EAAgBI,WAAhB,CAAf,EAA6C;AAC9CE,MAAAA,KAAK,CAACN,aAAD,EAAgBI,WAAhB,CAAL;AACAtB,MAAAA,SAAS,CAACxE,YAAV,CAAuB0F,aAAa,CAAC9C,KAArC,EAA4C+C,WAAW,CAAC/C,KAAZ,CAAkBqD,WAA9D;AACAP,MAAAA,aAAa,GAAGL,KAAK,CAAC,EAAEE,WAAH,CAArB;AACAO,MAAAA,WAAW,GAAGR,KAAK,CAAC,EAAEM,SAAH,CAAnB;AACH,KALI,MAMA,IAAIG,WAAW,CAACJ,WAAD,EAAcE,aAAd,CAAf,EAA6C;AAC9CG,MAAAA,KAAK,CAACL,WAAD,EAAcE,aAAd,CAAL;AACArB,MAAAA,SAAS,CAACxE,YAAV,CAAuB2F,WAAW,CAAC/C,KAAnC,EAA0C8C,aAAa,CAAC9C,KAAxD;AACA+C,MAAAA,WAAW,GAAGN,KAAK,CAAC,EAAEI,SAAH,CAAnB;AACAI,MAAAA,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAH,CAArB;AACH,KALI,MAMA;AACD;AACI;AACAzC,QAAAA,IAAI,GAAGqB,SAAS,CAACiB,KAAK,IAAIA,KAAK,CAACG,WAAD,CAAf,EAA8BnD,QAA9B,EAAwCmD,WAAxC,CAAhB;AACAK,QAAAA,aAAa,GAAGP,KAAK,CAAC,EAAEE,WAAH,CAArB;AACH;;AACD,UAAIzC,IAAJ,EAAU;AACN;AACI2C,UAAAA,aAAa,CAAC9C,KAAd,CAAoBsD,UAApB,CAA+BlG,YAA/B,CAA4C+C,IAA5C,EAAkD2C,aAAa,CAAC9C,KAAhE;AACH;AACJ;AACJ;AACJ;;AACD,MAAI2C,WAAW,GAAGE,SAAlB,EAA6B;AACzBd,IAAAA,SAAS,CAACH,SAAD,EAAYc,KAAK,CAACM,SAAS,GAAG,CAAb,CAAL,IAAwB,IAAxB,GAA+B,IAA/B,GAAsCN,KAAK,CAACM,SAAS,GAAG,CAAb,CAAL,CAAqBhD,KAAvE,EAA8EP,QAA9E,EAAwFiD,KAAxF,EAA+FE,WAA/F,EAA4GI,SAA5G,CAAT;AACH,GAFD,MAGK,IAAIJ,WAAW,GAAGI,SAAlB,EAA6B;AAC9BV,IAAAA,YAAY,CAACG,KAAD,EAAQE,WAAR,EAAqBE,SAArB,CAAZ;AACH;AACJ,CAjED;;AAkEA,MAAMM,WAAW,GAAG,CAACI,MAAD,EAASC,MAAT,KAAoB;AACpC;AACA;AACA,MAAID,MAAM,CAACxD,KAAP,KAAiByD,MAAM,CAACzD,KAA5B,EAAmC;AAC/B,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH,CAPD;;AAQA,MAAMqD,KAAK,GAAG,CAACK,QAAD,EAAWhE,QAAX,KAAwB;AAClC,QAAM7B,GAAG,GAAI6B,QAAQ,CAACO,KAAT,GAAiByD,QAAQ,CAACzD,KAAvC;AACA,QAAM0D,WAAW,GAAGD,QAAQ,CAAC7D,UAA7B;AACA,QAAM+D,WAAW,GAAGlE,QAAQ,CAACG,UAA7B;AACA;AACI;AACA;AACI;AACI;AACA;AACA;AACAqB,QAAAA,aAAa,CAACwC,QAAD,EAAWhE,QAAX,EAAqBlG,SAArB,CAAb;AACH;AACJ;;AACD,QAAImK,WAAW,KAAK,IAAhB,IAAwBC,WAAW,KAAK,IAA5C,EAAkD;AAC9C;AACAnB,MAAAA,cAAc,CAAC5E,GAAD,EAAM8F,WAAN,EAAmBjE,QAAnB,EAA6BkE,WAA7B,CAAd;AACH,KAHD,MAIK,IAAIA,WAAW,KAAK,IAApB,EAA0B;AAC3B;AACA5B,MAAAA,SAAS,CAACnE,GAAD,EAAM,IAAN,EAAY6B,QAAZ,EAAsBkE,WAAtB,EAAmC,CAAnC,EAAsCA,WAAW,CAACxE,MAAZ,GAAqB,CAA3D,CAAT;AACH,KAHI,MAIA,IAAIuE,WAAW,KAAK,IAApB,EAA0B;AAC3B;AACApB,MAAAA,YAAY,CAACoB,WAAD,EAAc,CAAd,EAAiBA,WAAW,CAACvE,MAAZ,GAAqB,CAAtC,CAAZ;AACH;AACJ;AACJ,CA3BD;;AA4BA,MAAMyE,UAAU,GAAG,CAAClG,OAAD,EAAUmG,eAAV,KAA8B;AAC7C,QAAMlH,OAAO,GAAGe,OAAO,CAACG,aAAxB;AACA,QAAMpB,OAAO,GAAGiB,OAAO,CAACC,SAAxB;AACA,QAAM8F,QAAQ,GAAG/F,OAAO,CAACoG,OAAR,IAAmBrE,QAAQ,CAAC,IAAD,EAAO,IAAP,CAA5C;AACA,QAAMsE,SAAS,GAAG7D,MAAM,CAAC2D,eAAD,CAAN,GAA0BA,eAA1B,GAA4C3J,CAAC,CAAC,IAAD,EAAO,IAAP,EAAa2J,eAAb,CAA/D;AACAvK,EAAAA,WAAW,GAAGqD,OAAO,CAACjB,OAAtB;;AACA,MAAIe,OAAO,CAACuH,gBAAZ,EAA8B;AAC1BD,IAAAA,SAAS,CAACpE,OAAV,GAAoBoE,SAAS,CAACpE,OAAV,IAAqB,EAAzC;AACAlD,IAAAA,OAAO,CAACuH,gBAAR,CAAyBC,GAAzB,CAA6B,CAAC,CAACC,QAAD,EAAWC,SAAX,CAAD,KAA4BJ,SAAS,CAACpE,OAAV,CAAkBwE,SAAlB,IAA+BxH,OAAO,CAACuH,QAAD,CAA/F;AACH;;AACDH,EAAAA,SAAS,CAAChE,KAAV,GAAkB,IAAlB;AACAgE,EAAAA,SAAS,CAAChK,OAAV,IAAqB;AAAE;AAAvB;AACA2D,EAAAA,OAAO,CAACoG,OAAR,GAAkBC,SAAlB;AACAA,EAAAA,SAAS,CAAC/D,KAAV,GAAkByD,QAAQ,CAACzD,KAAT,GAAkBrD,OAAO,CAACsB,UAAR,IAAsBtB,OAA1D;AACA;AACItD,IAAAA,OAAO,GAAGsD,OAAO,CAAC,MAAD,CAAjB;AACH,GAhB4C,CAiB7C;;AACAyG,EAAAA,KAAK,CAACK,QAAD,EAAWM,SAAX,CAAL;AACH,CAnBD;;AAoBA,MAAMK,UAAU,GAAIC,GAAD,IAAUC,UAAU,CAACD,GAAD,CAAV,CAAgBxG,aAA7C;;AACA,MAAM0G,WAAW,GAAG,CAACF,GAAD,EAAMG,IAAN,EAAY1G,KAAZ,KAAsB;AACtC,QAAMF,GAAG,GAAGwG,UAAU,CAACC,GAAD,CAAtB;AACA,SAAO;AACHI,IAAAA,IAAI,EAAGC,MAAD,IAAY;AACd,aAAOC,SAAS,CAAC/G,GAAD,EAAM4G,IAAN,EAAY;AACxBI,QAAAA,OAAO,EAAE,CAAC,EAAE9G,KAAK,GAAG;AAAE;AAAZ,SADc;AAExB+G,QAAAA,QAAQ,EAAE,CAAC,EAAE/G,KAAK,GAAG;AAAE;AAAZ,SAFa;AAGxBgH,QAAAA,UAAU,EAAE,CAAC,EAAEhH,KAAK,GAAG;AAAE;AAAZ,SAHW;AAIxB4G,QAAAA;AAJwB,OAAZ,CAAhB;AAMH;AARE,GAAP;AAUH,CAZD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,SAAS,GAAG,CAAC/G,GAAD,EAAM4G,IAAN,EAAY/J,IAAZ,KAAqB;AACnC,QAAMsK,EAAE,GAAGjL,GAAG,CAACe,EAAJ,CAAO2J,IAAP,EAAa/J,IAAb,CAAX;AACAmD,EAAAA,GAAG,CAACoH,aAAJ,CAAkBD,EAAlB;AACA,SAAOA,EAAP;AACH,CAJD;;AAKA,MAAME,gBAAgB,GAAG,CAACvH,OAAD,EAAUwH,iBAAV,KAAgC;AACrD,MAAIA,iBAAiB,IAAI,CAACxH,OAAO,CAACyH,iBAA9B,IAAmDD,iBAAiB,CAAC,KAAD,CAAxE,EAAiF;AAC7EA,IAAAA,iBAAiB,CAAC,KAAD,CAAjB,CAAyB1F,IAAzB,CAA8B,IAAIvE,OAAJ,CAAamK,CAAD,IAAQ1H,OAAO,CAACyH,iBAAR,GAA4BC,CAAhD,CAA9B;AACH;AACJ,CAJD;;AAKA,MAAMC,cAAc,GAAG,CAAC3H,OAAD,EAAU4H,aAAV,KAA4B;AAC/C;AACI5H,IAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAG;AAAtB;AACH;;AACD,MAAI2D,OAAO,CAAC3D,OAAR,GAAkB;AAAE;AAAxB,IAAoD;AAChD2D,IAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAI;AAAvB;AACA;AACH;;AACDkL,EAAAA,gBAAgB,CAACvH,OAAD,EAAUA,OAAO,CAAC6H,mBAAlB,CAAhB,CAR+C,CAS/C;AACA;AACA;;AACA,QAAMC,QAAQ,GAAG,MAAMC,aAAa,CAAC/H,OAAD,EAAU4H,aAAV,CAApC;;AACA,SAAOI,SAAS,CAACF,QAAD,CAAhB;AACH,CAdD;;AAeA,MAAMC,aAAa,GAAG,CAAC/H,OAAD,EAAU4H,aAAV,KAA4B;AAC9C,QAAMK,WAAW,GAAGnK,UAAU,CAAC,gBAAD,EAAmBkC,OAAO,CAACC,SAAR,CAAkBK,SAArC,CAA9B;AACA,QAAM4H,QAAQ,GAAGlI,OAAO,CAACmI,cAAzB;AACA,MAAIC,OAAJ;;AACA,MAAIR,aAAJ,EAAmB;AACf;AACIQ,MAAAA,OAAO,GAAGC,QAAQ,CAACH,QAAD,EAAW,mBAAX,CAAlB;AACH;AACJ;;AACDD,EAAAA,WAAW;AACX,SAAOK,IAAI,CAACF,OAAD,EAAU,MAAMG,eAAe,CAACvI,OAAD,EAAUkI,QAAV,EAAoBN,aAApB,CAA/B,CAAX;AACH,CAXD;;AAYA,MAAMW,eAAe;AAAA,+BAAG,WAAOvI,OAAP,EAAgBkI,QAAhB,EAA0BN,aAA1B,EAA4C;AAChE;AACA,UAAM1H,GAAG,GAAGF,OAAO,CAACG,aAApB;AACA,UAAMqI,SAAS,GAAG1K,UAAU,CAAC,QAAD,EAAWkC,OAAO,CAACC,SAAR,CAAkBK,SAA7B,CAA5B;AACA,UAAMmI,EAAE,GAAGvI,GAAG,CAAC,MAAD,CAAd;;AACA,QAAI0H,aAAJ,EAAmB;AACf;AACA7H,MAAAA,YAAY,CAACC,OAAD,CAAZ;AACH;;AACD,UAAM0I,SAAS,GAAG5K,UAAU,CAAC,QAAD,EAAWkC,OAAO,CAACC,SAAR,CAAkBK,SAA7B,CAA5B;AACA;AACIqI,MAAAA,UAAU,CAAC3I,OAAD,EAAUkI,QAAV,CAAV;AACH;;AACD,QAAIO,EAAJ,EAAQ;AACJ;AACA;AACA;AACAA,MAAAA,EAAE,CAAClC,GAAH,CAAQqC,EAAD,IAAQA,EAAE,EAAjB;AACA1I,MAAAA,GAAG,CAAC,MAAD,CAAH,GAAc2D,SAAd;AACH;;AACD6E,IAAAA,SAAS;AACTF,IAAAA,SAAS;AACT;AACI,YAAMK,gBAAgB,GAAG3I,GAAG,CAAC,KAAD,CAA5B;;AACA,YAAM4I,UAAU,GAAG,MAAMC,mBAAmB,CAAC/I,OAAD,CAA5C;;AACA,UAAI6I,gBAAgB,CAACpH,MAAjB,KAA4B,CAAhC,EAAmC;AAC/BqH,QAAAA,UAAU;AACb,OAFD,MAGK;AACDvL,QAAAA,OAAO,CAACyL,GAAR,CAAYH,gBAAZ,EAA8BP,IAA9B,CAAmCQ,UAAnC;AACA9I,QAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAE;AAArB;AACAwM,QAAAA,gBAAgB,CAACpH,MAAjB,GAA0B,CAA1B;AACH;AACJ;AACJ,GAlCoB;;AAAA,kBAAf8G,eAAe;AAAA;AAAA;AAAA,GAArB;;AAmCA,MAAMI,UAAU,GAAG,CAAC3I,OAAD,EAAUkI,QAAV,EAAoBhI,GAApB,KAA4B;AAC3C,MAAI;AACAgI,IAAAA,QAAQ,GAAGA,QAAQ,CAACe,MAAT,EAAX;AACA;AACIjJ,MAAAA,OAAO,CAAC3D,OAAR,IAAmB,CAAC;AAAG;AAAvB;AACH;AACD;AACI2D,MAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAE;AAArB;AACH;AACD;AACI;AACI;AACA;AACA;AACA;AACI6J,UAAAA,UAAU,CAAClG,OAAD,EAAUkI,QAAV,CAAV;AACH;AACJ;AACJ;AACJ,GAlBD,CAmBA,OAAOtK,CAAP,EAAU;AACNsL,IAAAA,YAAY,CAACtL,CAAD,EAAIoC,OAAO,CAACG,aAAZ,CAAZ;AACH;;AACD,SAAO,IAAP;AACH,CAxBD;;AAyBA,MAAM4I,mBAAmB,GAAI/I,OAAD,IAAa;AACrC,QAAMhC,OAAO,GAAGgC,OAAO,CAACC,SAAR,CAAkBK,SAAlC;AACA,QAAMJ,GAAG,GAAGF,OAAO,CAACG,aAApB;AACA,QAAMgJ,aAAa,GAAGrL,UAAU,CAAC,YAAD,EAAeE,OAAf,CAAhC;AACA,QAAMkK,QAAQ,GAAGlI,OAAO,CAACmI,cAAzB;AACA,QAAMX,iBAAiB,GAAGxH,OAAO,CAAC6H,mBAAlC;;AACA,MAAI,EAAE7H,OAAO,CAAC3D,OAAR,GAAkB;AAAG;AAAvB,GAAJ,EAAsD;AAClD2D,IAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAG;AAAtB;AACA;AACI;AACA+M,MAAAA,eAAe,CAAClJ,GAAD,CAAf;AACH;AACD;AACImI,MAAAA,QAAQ,CAACH,QAAD,EAAW,kBAAX,CAAR;AACH;AACDiB,IAAAA,aAAa;AACb;AACInJ,MAAAA,OAAO,CAACqJ,gBAAR,CAAyBnJ,GAAzB;;AACA,UAAI,CAACsH,iBAAL,EAAwB;AACpB8B,QAAAA,UAAU;AACb;AACJ;AACJ,GAhBD,MAiBK;AACDH,IAAAA,aAAa;AAChB;;AACD;AACInJ,IAAAA,OAAO,CAACuJ,mBAAR,CAA4BrJ,GAA5B;AACH,GA5BoC,CA6BrC;AACA;;AACA;AACI,QAAIF,OAAO,CAACyH,iBAAZ,EAA+B;AAC3BzH,MAAAA,OAAO,CAACyH,iBAAR;AACAzH,MAAAA,OAAO,CAACyH,iBAAR,GAA4B5D,SAA5B;AACH;;AACD,QAAI7D,OAAO,CAAC3D,OAAR,GAAkB;AAAI;AAA1B,MAA+C;AAC3CmN,MAAAA,QAAQ,CAAC,MAAM7B,cAAc,CAAC3H,OAAD,EAAU,KAAV,CAArB,CAAR;AACH;;AACDA,IAAAA,OAAO,CAAC3D,OAAR,IAAmB,EAAE;AAAE;AAAF,MAA+B;AAAI;AAArC,KAAnB;AACH,GAxCoC,CAyCrC;AACA;AACA;AACH,CA5CD;;AA6CA,MAAMiN,UAAU,GAAIG,GAAD,IAAS;AACxB;AACA;AACA;AACIL,IAAAA,eAAe,CAACnN,GAAG,CAACyN,eAAL,CAAf;AACH;AACDF,EAAAA,QAAQ,CAAC,MAAMvC,SAAS,CAAClL,GAAD,EAAM,SAAN,EAAiB;AAAEiL,IAAAA,MAAM,EAAE;AAAE2C,MAAAA,SAAS,EAAEjO;AAAb;AAAV,GAAjB,CAAhB,CAAR;AACH,CAPD;;AAQA,MAAM2M,QAAQ,GAAG,CAACH,QAAD,EAAW0B,MAAX,EAAmBC,GAAnB,KAA2B;AACxC,MAAI3B,QAAQ,IAAIA,QAAQ,CAAC0B,MAAD,CAAxB,EAAkC;AAC9B,QAAI;AACA,aAAO1B,QAAQ,CAAC0B,MAAD,CAAR,CAAiBC,GAAjB,CAAP;AACH,KAFD,CAGA,OAAOjM,CAAP,EAAU;AACNsL,MAAAA,YAAY,CAACtL,CAAD,CAAZ;AACH;AACJ;;AACD,SAAOiG,SAAP;AACH,CAVD;;AAWA,MAAMyE,IAAI,GAAG,CAACF,OAAD,EAAU0B,MAAV,KAAqB;AAC9B,SAAO1B,OAAO,IAAIA,OAAO,CAACE,IAAnB,GAA0BF,OAAO,CAACE,IAAR,CAAawB,MAAb,CAA1B,GAAiDA,MAAM,EAA9D;AACH,CAFD;;AAGA,MAAMV,eAAe,GAAIlJ,GAAD,IAASA,GAAG,CAACO,SAAJ,CAAcb,GAAd,CAAkB,UAAlB,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMmK,kBAAkB,GAAG,CAACC,SAAD,EAAYC,QAAZ,KAAyB;AAChD;AACA,MAAID,SAAS,IAAI,IAAb,IAAqB,CAACnJ,aAAa,CAACmJ,SAAD,CAAvC,EAAoD;AAChD,QAAIC,QAAQ,GAAG;AAAE;AAAjB,MAAgC;AAC5B;AACA;AACA,aAAOD,SAAS,KAAK,OAAd,GAAwB,KAAxB,GAAgCA,SAAS,KAAK,EAAd,IAAoB,CAAC,CAACA,SAA7D;AACH,KAL+C,CAMhD;;;AACA,WAAOA,SAAP;AACH,GAV+C,CAWhD;AACA;;;AACA,SAAOA,SAAP;AACH,CAdD;;AAeA,MAAME,QAAQ,GAAG,CAACvD,GAAD,EAAMH,QAAN,KAAmBI,UAAU,CAACD,GAAD,CAAV,CAAgBwD,gBAAhB,CAAiCxL,GAAjC,CAAqC6H,QAArC,CAApC;;AACA,MAAM4D,QAAQ,GAAG,CAACzD,GAAD,EAAMH,QAAN,EAAgB6D,MAAhB,EAAwBtL,OAAxB,KAAoC;AACjD;AACA,QAAMiB,OAAO,GAAG4G,UAAU,CAACD,GAAD,CAA1B;AACA,QAAMzG,GAAG,GAAGF,OAAO,CAACG,aAApB;AACA,QAAMmK,MAAM,GAAGtK,OAAO,CAACmK,gBAAR,CAAyBxL,GAAzB,CAA6B6H,QAA7B,CAAf;AACA,QAAMpG,KAAK,GAAGJ,OAAO,CAAC3D,OAAtB;AACA,QAAM6L,QAAQ,GAAGlI,OAAO,CAACmI,cAAzB;AACAkC,EAAAA,MAAM,GAAGN,kBAAkB,CAACM,MAAD,EAAStL,OAAO,CAACwL,SAAR,CAAkB/D,QAAlB,EAA4B,CAA5B,CAAT,CAA3B,CAPiD,CAQjD;;AACA,QAAMgE,UAAU,GAAGC,MAAM,CAACC,KAAP,CAAaJ,MAAb,KAAwBG,MAAM,CAACC,KAAP,CAAaL,MAAb,CAA3C;AACA,QAAMM,cAAc,GAAGN,MAAM,KAAKC,MAAX,IAAqB,CAACE,UAA7C;;AACA,MAAI,CAAC,EAAEpK,KAAK,GAAG;AAAE;AAAZ,OAA6CkK,MAAM,KAAKzG,SAAzD,KAAuE8G,cAA3E,EAA2F;AACvF;AACA;AACA3K,IAAAA,OAAO,CAACmK,gBAAR,CAAyBvL,GAAzB,CAA6B4H,QAA7B,EAAuC6D,MAAvC;;AACA,QAAInC,QAAJ,EAAc;AACV;AACA,UAAInJ,OAAO,CAAC6L,UAAR,IAAsBxK,KAAK,GAAG;AAAI;AAAtC,QAA0D;AACtD,cAAMyK,YAAY,GAAG9L,OAAO,CAAC6L,UAAR,CAAmBpE,QAAnB,CAArB;;AACA,YAAIqE,YAAJ,EAAkB;AACd;AACAA,UAAAA,YAAY,CAACtE,GAAb,CAAkBuE,eAAD,IAAqB;AAClC,gBAAI;AACA;AACA5C,cAAAA,QAAQ,CAAC4C,eAAD,CAAR,CAA0BT,MAA1B,EAAkCC,MAAlC,EAA0C9D,QAA1C;AACH,aAHD,CAIA,OAAO5I,CAAP,EAAU;AACNsL,cAAAA,YAAY,CAACtL,CAAD,EAAIsC,GAAJ,CAAZ;AACH;AACJ,WARD;AASH;AACJ;;AACD,UAAI,CAACE,KAAK,IAAI;AAAE;AAAF,QAAsB;AAAG;AAA7B,OAAN,MAAiE;AAAE;AAAvE,QAA0F;AACtF;AACA;AACA;AACA;AACAuH,QAAAA,cAAc,CAAC3H,OAAD,EAAU,KAAV,CAAd;AACH;AACJ;AACJ;AACJ,CAzCD;;AA0CA,MAAM+K,cAAc,GAAG,CAACC,IAAD,EAAOjM,OAAP,EAAgBqB,KAAhB,KAA0B;AAC7C,MAAIrB,OAAO,CAACwL,SAAZ,EAAuB;AACnB,QAAIS,IAAI,CAACC,QAAT,EAAmB;AACflM,MAAAA,OAAO,CAAC6L,UAAR,GAAqBI,IAAI,CAACC,QAA1B;AACH,KAHkB,CAInB;;;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAerM,OAAO,CAACwL,SAAvB,CAAhB;AACA,UAAMc,SAAS,GAAGL,IAAI,CAACK,SAAvB;AACAH,IAAAA,OAAO,CAAC3E,GAAR,CAAY,CAAC,CAAC5D,UAAD,EAAa,CAAC2I,WAAD,CAAb,CAAD,KAAiC;AACzC,UAAKA,WAAW,GAAG;AAAG;AAAjB,SACKlL,KAAK,GAAG;AAAE;AAAX,SAAgCkL,WAAW,GAAG;AAAG;AAD1D,QACyE;AACrE;AACAH,QAAAA,MAAM,CAACI,cAAP,CAAsBF,SAAtB,EAAiC1I,UAAjC,EAA6C;AACzChE,UAAAA,GAAG,GAAG;AACF;AACA,mBAAOuL,QAAQ,CAAC,IAAD,EAAOvH,UAAP,CAAf;AACH,WAJwC;;AAKzC/D,UAAAA,GAAG,CAACiE,QAAD,EAAW;AACV;AACAuH,YAAAA,QAAQ,CAAC,IAAD,EAAOzH,UAAP,EAAmBE,QAAnB,EAA6B9D,OAA7B,CAAR;AACH,WARwC;;AASzCyM,UAAAA,YAAY,EAAE,IAT2B;AAUzCC,UAAAA,UAAU,EAAE;AAV6B,SAA7C;AAYH,OAfD,MAgBK,IAAIrL,KAAK,GAAG;AAAE;AAAV,SACLkL,WAAW,GAAG;AAAG;AADhB,QAC8B;AAC/B;AACAH,QAAAA,MAAM,CAACI,cAAP,CAAsBF,SAAtB,EAAiC1I,UAAjC,EAA6C;AACzC+I,UAAAA,KAAK,CAAC,GAAGC,IAAJ,EAAU;AACX,kBAAMhF,GAAG,GAAGC,UAAU,CAAC,IAAD,CAAtB;AACA,mBAAOD,GAAG,CAACiF,mBAAJ,CAAwBtD,IAAxB,CAA6B,MAAM3B,GAAG,CAACwB,cAAJ,CAAmBxF,UAAnB,EAA+B,GAAGgJ,IAAlC,CAAnC,CAAP;AACH;;AAJwC,SAA7C;AAMH;AACJ,KA3BD;;AA4BA,QAAKvL,KAAK,GAAG;AAAE;AAAf,MAA4C;AACxC,YAAMyL,kBAAkB,GAAG,IAAIC,GAAJ,EAA3B;;AACAT,MAAAA,SAAS,CAACU,wBAAV,GAAqC,UAAUC,QAAV,EAAoBC,SAApB,EAA+BpJ,QAA/B,EAAyC;AAC1EzG,QAAAA,GAAG,CAACG,GAAJ,CAAQ,MAAM;AACV,gBAAMiK,QAAQ,GAAGqF,kBAAkB,CAAClN,GAAnB,CAAuBqN,QAAvB,CAAjB,CADU,CAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,cAAI,KAAKE,cAAL,CAAoB1F,QAApB,CAAJ,EAAmC;AAC/B3D,YAAAA,QAAQ,GAAG,KAAK2D,QAAL,CAAX;AACA,mBAAO,KAAKA,QAAL,CAAP;AACH,WAHD,MAIK,IAAI6E,SAAS,CAACa,cAAV,CAAyB1F,QAAzB,KACL,OAAO,KAAKA,QAAL,CAAP,KAA0B,QADrB,IAEL,KAAKA,QAAL,KAAkB3D,QAFjB,EAE2B;AAC5B;AACA;AACA;AACA;AACH;;AACD,eAAK2D,QAAL,IAAiB3D,QAAQ,KAAK,IAAb,IAAqB,OAAO,KAAK2D,QAAL,CAAP,KAA0B,SAA/C,GAA2D,KAA3D,GAAmE3D,QAApF;AACH,SAhDD;AAiDH,OAlDD,CAFwC,CAqDxC;AACA;;;AACAmI,MAAAA,IAAI,CAACmB,kBAAL,GAA0BjB,OAAO,CAC5BkB,MADqB,CACd,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAAYA,CAAC,CAAC,CAAD,CAAD,GAAO;AAAG;AADR,QAC4B;AAD5B,OAErB/F,GAFqB,CAEjB,CAAC,CAACC,QAAD,EAAW8F,CAAX,CAAD,KAAmB;AACxB,cAAMN,QAAQ,GAAGM,CAAC,CAAC,CAAD,CAAD,IAAQ9F,QAAzB;AACAqF,QAAAA,kBAAkB,CAACjN,GAAnB,CAAuBoN,QAAvB,EAAiCxF,QAAjC;;AACA,YAAI8F,CAAC,CAAC,CAAD,CAAD,GAAO;AAAI;AAAf,UAAkC;AAC9BvN,UAAAA,OAAO,CAACuH,gBAAR,CAAyBxE,IAAzB,CAA8B,CAAC0E,QAAD,EAAWwF,QAAX,CAA9B;AACH;;AACD,eAAOA,QAAP;AACH,OATyB,CAA1B;AAUH;AACJ;;AACD,SAAOhB,IAAP;AACH,CAxGD;;AAyGA,MAAMuB,mBAAmB;AAAA,gCAAG,WAAOrM,GAAP,EAAYF,OAAZ,EAAqBjB,OAArB,EAA8ByN,YAA9B,EAA4CxB,IAA5C,EAAqD;AAC7E;AACA,QAAI,CAAChL,OAAO,CAAC3D,OAAR,GAAkB;AAAG;AAAtB,UAAyD,CAA7D,EAAgE;AAC5D;AACI;AACA2D,QAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAG;AAAtB,SAFJ,CAGI;AACA;AACA;;AACA2O,QAAAA,IAAI,GAAGyB,UAAU,CAAC1N,OAAD,CAAjB;;AACA,YAAIiM,IAAI,CAAC1C,IAAT,EAAe;AACX;AACA,gBAAMoE,OAAO,GAAGzO,UAAU,EAA1B;AACA+M,UAAAA,IAAI,SAASA,IAAb;AACA0B,UAAAA,OAAO;AACV;;AACD,YAAI,CAAC1B,IAAI,CAAC2B,SAAV,EAAqB;AACjB;AACA;AACA;AACA;AACI5N,YAAAA,OAAO,CAAC6L,UAAR,GAAqBI,IAAI,CAACC,QAA1B;AACH;AACDF,UAAAA,cAAc,CAACC,IAAD,EAAOjM,OAAP,EAAgB;AAAE;AAAlB,WAAd;AACAiM,UAAAA,IAAI,CAAC2B,SAAL,GAAiB,IAAjB;AACH;;AACD,cAAMC,cAAc,GAAG9O,UAAU,CAAC,gBAAD,EAAmBiB,OAAO,CAACuB,SAA3B,CAAjC,CAvBJ,CAwBI;AACA;AACA;;AACA;AACIN,UAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAE;AAArB;AACH,SA7BL,CA8BI;AACA;AACA;AACA;;AACA,YAAI;AACA,cAAI2O,IAAJ,CAAShL,OAAT;AACH,SAFD,CAGA,OAAOpC,CAAP,EAAU;AACNsL,UAAAA,YAAY,CAACtL,CAAD,CAAZ;AACH;;AACD;AACIoC,UAAAA,OAAO,CAAC3D,OAAR,IAAmB,CAAC;AAAE;AAAtB;AACH;AACD;AACI2D,UAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAI;AAAvB;AACH;AACDuQ,QAAAA,cAAc;AACjB;;AACD,UAAI5B,IAAI,CAACvM,KAAT,EAAgB;AACZ;AACA,YAAIA,KAAK,GAAGuM,IAAI,CAACvM,KAAjB;AACA,cAAM9C,OAAO,GAAGuD,UAAU,CAACH,OAAD,CAA1B;;AACA,YAAI,CAACL,MAAM,CAACa,GAAP,CAAW5D,OAAX,CAAL,EAA0B;AACtB,gBAAMkR,iBAAiB,GAAG/O,UAAU,CAAC,gBAAD,EAAmBiB,OAAO,CAACuB,SAA3B,CAApC;AACAhC,UAAAA,aAAa,CAAC3C,OAAD,EAAU8C,KAAV,EAAiB,CAAC,EAAEM,OAAO,CAAC1C,OAAR,GAAkB;AAAE;AAAtB,WAAlB,CAAb;AACAwQ,UAAAA,iBAAiB;AACpB;AACJ;AACJ,KA7D4E,CA8D7E;;;AACA,UAAMrF,iBAAiB,GAAGxH,OAAO,CAAC6H,mBAAlC;;AACA,UAAMiF,QAAQ,GAAG,MAAMnF,cAAc,CAAC3H,OAAD,EAAU,IAAV,CAArC;;AACA,QAAIwH,iBAAiB,IAAIA,iBAAiB,CAAC,MAAD,CAA1C,EAAoD;AAChD;AACA;AACA;AACA;AACA;AACA;AACAA,MAAAA,iBAAiB,CAAC,MAAD,CAAjB,CAA0B1F,IAA1B,CAA+BgL,QAA/B;AACH,KARD,MASK;AACDA,MAAAA,QAAQ;AACX;AACJ,GA7EwB;;AAAA,kBAAnBP,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;AA8EA,MAAMQ,iBAAiB,GAAI7M,GAAD,IAAS;AAC/B,MAAI,CAAC9D,GAAG,CAACC,OAAJ,GAAc;AAAE;AAAjB,QAA8C,CAAlD,EAAqD;AACjD,UAAM2D,OAAO,GAAG4G,UAAU,CAAC1G,GAAD,CAA1B;AACA,UAAMnB,OAAO,GAAGiB,OAAO,CAACC,SAAxB;AACA,UAAM+M,YAAY,GAAGlP,UAAU,CAAC,mBAAD,EAAsBiB,OAAO,CAACuB,SAA9B,CAA/B;;AACA,QAAI,EAAEN,OAAO,CAAC3D,OAAR,GAAkB;AAAE;AAAtB,KAAJ,EAA+C;AAC3C;AACA2D,MAAAA,OAAO,CAAC3D,OAAR,IAAmB;AAAE;AAArB;AACA;AACI;AACA;AACA,YAAImL,iBAAiB,GAAGtH,GAAxB;;AACA,eAAQsH,iBAAiB,GAAGA,iBAAiB,CAAC5B,UAAlB,IAAgC4B,iBAAiB,CAAC9D,IAA9E,EAAqF;AACjF;AACA;AACA,cAAI8D,iBAAiB,CAAC,KAAD,CAArB,EAA8B;AAC1B;AACA;AACAD,YAAAA,gBAAgB,CAACvH,OAAD,EAAWA,OAAO,CAAC6H,mBAAR,GAA8BL,iBAAzC,CAAhB;AACA;AACH;AACJ;AACJ,OAjB0C,CAkB3C;AACA;;AACA,UAAIzI,OAAO,CAACwL,SAAZ,EAAuB;AACnBY,QAAAA,MAAM,CAACC,OAAP,CAAerM,OAAO,CAACwL,SAAvB,EAAkChE,GAAlC,CAAsC,CAAC,CAAC5D,UAAD,EAAa,CAAC2I,WAAD,CAAb,CAAD,KAAiC;AACnE,cAAIA,WAAW,GAAG;AAAG;AAAjB,aAA+BpL,GAAG,CAACgM,cAAJ,CAAmBvJ,UAAnB,CAAnC,EAAmE;AAC/D,kBAAM+I,KAAK,GAAGxL,GAAG,CAACyC,UAAD,CAAjB;AACA,mBAAOzC,GAAG,CAACyC,UAAD,CAAV;AACAzC,YAAAA,GAAG,CAACyC,UAAD,CAAH,GAAkB+I,KAAlB;AACH;AACJ,SAND;AAOH;;AACD;AACIa,QAAAA,mBAAmB,CAACrM,GAAD,EAAMF,OAAN,EAAejB,OAAf,CAAnB;AACH;AACJ;;AACDiO,IAAAA,YAAY;AACf;AACJ,CAxCD;;AAyCA,MAAMC,oBAAoB,GAAI/M,GAAD,IAAS;AAClC,MAAI,CAAC9D,GAAG,CAACC,OAAJ,GAAc;AAAE;AAAjB,QAA8C,CAAlD,EAAqD;AACjDuK,IAAAA,UAAU,CAAC1G,GAAD,CAAV;AACH;AACJ,CAJD;;AAKA,MAAMgN,aAAa,GAAG,CAACC,WAAD,EAAcC,OAAO,GAAG,EAAxB,KAA+B;AACjD,QAAMC,YAAY,GAAGvP,UAAU,EAA/B;AACA,QAAMwP,OAAO,GAAG,EAAhB;AACA,QAAMC,OAAO,GAAGH,OAAO,CAACG,OAAR,IAAmB,EAAnC;AACA,QAAMC,cAAc,GAAGzR,GAAG,CAACyR,cAA3B;AACA,QAAMrR,IAAI,GAAGF,GAAG,CAACE,IAAjB;AACA,QAAMsR,WAAW,GAAG,aAActR,IAAI,CAACwD,aAAL,CAAmB,eAAnB,CAAlC;AACA,QAAM+N,eAAe,GAAG,aAAczR,GAAG,CAACuD,aAAJ,CAAkB,OAAlB,CAAtC;AACA,QAAMmO,0BAA0B,GAAG,EAAnC;AACA,MAAIC,eAAJ;AACA,MAAIC,eAAe,GAAG,IAAtB;AACA1C,EAAAA,MAAM,CAAC2C,MAAP,CAAc1R,GAAd,EAAmBgR,OAAnB;AACAhR,EAAAA,GAAG,CAACE,cAAJ,GAAqB,IAAIyR,GAAJ,CAAQX,OAAO,CAACY,YAAR,IAAwB,IAAhC,EAAsC/R,GAAG,CAACgS,OAA1C,EAAmDC,IAAxE;AACAf,EAAAA,WAAW,CAAC5G,GAAZ,CAAiB4H,UAAD,IAAgB;AAC5BA,IAAAA,UAAU,CAAC,CAAD,CAAV,CAAc5H,GAAd,CAAmB6H,WAAD,IAAiB;AAC/B,YAAMrP,OAAO,GAAG;AACZ1C,QAAAA,OAAO,EAAE+R,WAAW,CAAC,CAAD,CADR;AAEZ9N,QAAAA,SAAS,EAAE8N,WAAW,CAAC,CAAD,CAFV;AAGZ7D,QAAAA,SAAS,EAAE6D,WAAW,CAAC,CAAD,CAHV;AAIZC,QAAAA,WAAW,EAAED,WAAW,CAAC,CAAD;AAJZ,OAAhB;AAMA;AACIrP,QAAAA,OAAO,CAACwL,SAAR,GAAoB6D,WAAW,CAAC,CAAD,CAA/B;AACH;AACD;AACIrP,QAAAA,OAAO,CAACuH,gBAAR,GAA2B,EAA3B;AACH;AACD;AACIvH,QAAAA,OAAO,CAAC6L,UAAR,GAAqB,EAArB;AACH;AACD,YAAM5M,OAAO,GAAGe,OAAO,CAACuB,SAAxB;AACA,YAAMgO,WAAW,GAAG,cAAcC,WAAd,CAA0B;AAC1C;AACAC,QAAAA,WAAW,CAACC,IAAD,EAAO;AACd;AACA,gBAAMA,IAAN;AACAA,UAAAA,IAAI,GAAG,IAAP;AACAC,UAAAA,YAAY,CAACD,IAAD,EAAO1P,OAAP,CAAZ;;AACA,cAAIA,OAAO,CAAC1C,OAAR,GAAkB;AAAE;AAAxB,YAAsD;AAClD;AACA;AACA;AACA;AACA;AACI;AACIoS,gBAAAA,IAAI,CAACE,YAAL,CAAkB;AAAE3P,kBAAAA,IAAI,EAAE;AAAR,iBAAlB;AACH;AACJ;AACJ;AACJ;;AACD+N,QAAAA,iBAAiB,GAAG;AAChB,cAAIa,eAAJ,EAAqB;AACjBgB,YAAAA,YAAY,CAAChB,eAAD,CAAZ;AACAA,YAAAA,eAAe,GAAG,IAAlB;AACH;;AACD,cAAIC,eAAJ,EAAqB;AACjB;AACAF,YAAAA,0BAA0B,CAAC7L,IAA3B,CAAgC,IAAhC;AACH,WAHD,MAIK;AACD1F,YAAAA,GAAG,CAACG,GAAJ,CAAQ,MAAMwQ,iBAAiB,CAAC,IAAD,CAA/B;AACH;AACJ;;AACDE,QAAAA,oBAAoB,GAAG;AACnB7Q,UAAAA,GAAG,CAACG,GAAJ,CAAQ,MAAM0Q,oBAAoB,CAAC,IAAD,CAAlC;AACH;;AACD4B,QAAAA,gBAAgB,GAAG;AACf,iBAAOjI,UAAU,CAAC,IAAD,CAAV,CAAiBkI,gBAAxB;AACH;;AArCyC,OAA9C;AAuCA/P,MAAAA,OAAO,CAACgQ,cAAR,GAAyBZ,UAAU,CAAC,CAAD,CAAnC;;AACA,UAAI,CAACZ,OAAO,CAACzN,QAAR,CAAiB9B,OAAjB,CAAD,IAA8B,CAACwP,cAAc,CAAC7O,GAAf,CAAmBX,OAAnB,CAAnC,EAAgE;AAC5DsP,QAAAA,OAAO,CAACxL,IAAR,CAAa9D,OAAb;AACAwP,QAAAA,cAAc,CAACwB,MAAf,CAAsBhR,OAAtB,EAA+B+M,cAAc,CAACuD,WAAD,EAAcvP,OAAd,EAAuB;AAAE;AAAzB,SAA7C;AACH;AACJ,KA7DD;AA8DH,GA/DD;AAgEA;AACI2O,IAAAA,eAAe,CAACjO,SAAhB,GAA4B6N,OAAO,GAAGzP,YAAtC;AACA6P,IAAAA,eAAe,CAACpK,YAAhB,CAA6B,aAA7B,EAA4C,EAA5C;AACAnH,IAAAA,IAAI,CAACuD,YAAL,CAAkBgO,eAAlB,EAAmCD,WAAW,GAAGA,WAAW,CAAC9H,WAAf,GAA6BxJ,IAAI,CAAC8S,UAAhF;AACH,GAjFgD,CAkFjD;;AACApB,EAAAA,eAAe,GAAG,KAAlB;;AACA,MAAIF,0BAA0B,CAAClM,MAA/B,EAAuC;AACnCkM,IAAAA,0BAA0B,CAACpH,GAA3B,CAAgC7C,IAAD,IAAUA,IAAI,CAACqJ,iBAAL,EAAzC;AACH,GAFD,MAGK;AACD;AACI3Q,MAAAA,GAAG,CAACG,GAAJ,CAAQ,MAAOqR,eAAe,GAAGsB,UAAU,CAAC5F,UAAD,EAAa,EAAb,CAA3C;AACH;AACJ,GA3FgD,CA4FjD;;;AACA+D,EAAAA,YAAY;AACf,CA9FD;;AA+FA,MAAM8B,QAAQ,GAAG,IAAI9Q,OAAJ,EAAjB;;AACA,MAAMuI,UAAU,GAAID,GAAD,IAASwI,QAAQ,CAACxQ,GAAT,CAAagI,GAAb,CAA5B;;AACA,MAAMyI,gBAAgB,GAAG,CAACC,YAAD,EAAerP,OAAf,KAA2BmP,QAAQ,CAACvQ,GAAT,CAAcoB,OAAO,CAACmI,cAAR,GAAyBkH,YAAvC,EAAsDrP,OAAtD,CAApD;;AACA,MAAM0O,YAAY,GAAG,CAACxO,GAAD,EAAMnB,OAAN,KAAkB;AACnC,QAAMiB,OAAO,GAAG;AACZ3D,IAAAA,OAAO,EAAE,CADG;AAEZ8D,IAAAA,aAAa,EAAED,GAFH;AAGZD,IAAAA,SAAS,EAAElB,OAHC;AAIZoL,IAAAA,gBAAgB,EAAE,IAAI2B,GAAJ;AAJN,GAAhB;AAMA;AACI9L,IAAAA,OAAO,CAAC4L,mBAAR,GAA8B,IAAIrO,OAAJ,CAAamK,CAAD,IAAQ1H,OAAO,CAACuJ,mBAAR,GAA8B7B,CAAlD,CAA9B;AACH;AACD;AACI1H,IAAAA,OAAO,CAAC8O,gBAAR,GAA2B,IAAIvR,OAAJ,CAAamK,CAAD,IAAQ1H,OAAO,CAACqJ,gBAAR,GAA2B3B,CAA/C,CAA3B;AACAxH,IAAAA,GAAG,CAAC,KAAD,CAAH,GAAa,EAAb;AACAA,IAAAA,GAAG,CAAC,MAAD,CAAH,GAAc,EAAd;AACH;AACD,SAAOiP,QAAQ,CAACvQ,GAAT,CAAasB,GAAb,EAAkBF,OAAlB,CAAP;AACH,CAhBD;;AAiBA,MAAMgD,iBAAiB,GAAG,CAAC9C,GAAD,EAAMyC,UAAN,KAAqBA,UAAU,IAAIzC,GAA7D;;AACA,MAAMgJ,YAAY,GAAG,CAACtL,CAAD,EAAIhB,EAAJ,KAAW,CAAC,GAAG0S,OAAO,CAACC,KAAZ,EAAmB3R,CAAnB,EAAsBhB,EAAtB,CAAhC;;AACA,MAAM4S,UAAU,GAAG,aAAc,IAAI1D,GAAJ,EAAjC;;AACA,MAAMW,UAAU,GAAG,CAAC1N,OAAD,EAAUiB,OAAV,EAAmBwM,YAAnB,KAAoC;AACnD;AACA,QAAMiD,UAAU,GAAG1Q,OAAO,CAACuB,SAAR,CAAkB3C,OAAlB,CAA0B,IAA1B,EAAgC,GAAhC,CAAnB;AACA,QAAM+R,QAAQ,GAAG3Q,OAAO,CAACgQ,cAAzB;AACA,QAAMY,MAAM,GAAGH,UAAU,CAAC7Q,GAAX,CAAe+Q,QAAf,CAAf;;AACA,MAAIC,MAAJ,EAAY;AACR,WAAOA,MAAM,CAACF,UAAD,CAAb;AACH;AACD;;;AACA,SAAO;AACP;;AACA;;AACA;;AACA;AACC,OAAIC,QAAS,YAAW,EAAG,EALrB,EAKwBpH,IALxB,CAK8BsH,cAAD,IAAoB;AACpD;AACIJ,MAAAA,UAAU,CAAC5Q,GAAX,CAAe8Q,QAAf,EAAyBE,cAAzB;AACH;AACD,WAAOA,cAAc,CAACH,UAAD,CAArB;AACH,GAVM,EAUJvG,YAVI,CAAP;AAWH,CApBD;;AAqBA,MAAMxK,MAAM,GAAG,IAAIoN,GAAJ,EAAf;AACA,MAAM+D,aAAa,GAAG,EAAtB;AACA,MAAMC,cAAc,GAAG,EAAvB;;AACA,MAAMC,SAAS,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAmBrH,EAAD,IAAQ;AACxCoH,EAAAA,KAAK,CAAClO,IAAN,CAAW8G,EAAX;;AACA,MAAI,CAAC9M,YAAL,EAAmB;AACfA,IAAAA,YAAY,GAAG,IAAf;;AACA,QAAImU,KAAK,IAAI7T,GAAG,CAACC,OAAJ,GAAc;AAAE;AAA7B,MAA8C;AAC1CmN,MAAAA,QAAQ,CAAC0G,KAAD,CAAR;AACH,KAFD,MAGK;AACD9T,MAAAA,GAAG,CAACK,GAAJ,CAAQyT,KAAR;AACH;AACJ;AACJ,CAXD;;AAYA,MAAMC,OAAO,GAAIH,KAAD,IAAW;AACvB,OAAK,IAAIxO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwO,KAAK,CAACvO,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAI;AACAwO,MAAAA,KAAK,CAACxO,CAAD,CAAL,CAAS4O,WAAW,CAACC,GAAZ,EAAT;AACH,KAFD,CAGA,OAAOzS,CAAP,EAAU;AACNsL,MAAAA,YAAY,CAACtL,CAAD,CAAZ;AACH;AACJ;;AACDoS,EAAAA,KAAK,CAACvO,MAAN,GAAe,CAAf;AACH,CAVD;;AAWA,MAAMyO,KAAK,GAAG,MAAM;AAChB;AACA;AACA;AACAC,EAAAA,OAAO,CAACN,aAAD,CAAP,CAJgB,CAKhB;;AACA;AACIM,IAAAA,OAAO,CAACL,cAAD,CAAP;;AACA,QAAKhU,YAAY,GAAG+T,aAAa,CAACpO,MAAd,GAAuB,CAA3C,EAA+C;AAC3C;AACA;AACArF,MAAAA,GAAG,CAACK,GAAJ,CAAQyT,KAAR;AACH;AACJ;AACJ,CAdD;;AAeA,MAAM1G,QAAQ,GAAG,aAAeZ,EAAD,IAAQvL,cAAc,GAAGiL,IAAjB,CAAsBM,EAAtB,CAAvC;;AACA,MAAMZ,SAAS,GAAG,aAAc+H,SAAS,CAACD,cAAD,EAAiB,IAAjB,CAAzC;AAEA,SAAS5C,aAAa,IAAIoD,CAA1B,EAA6BzJ,WAAW,IAAItF,CAA5C,EAA+ClE,cAAc,IAAIkT,CAAjE,EAAoEnB,gBAAgB,IAAI1H,CAAxF","sourcesContent":["const NAMESPACE = 'jeep-sqlite';\n\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructibleStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replace === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst rootAppliedStyles = new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructibleStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        style.replace(cssText);\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        memberName.toLowerCase();\n        {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // Vnode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // new element\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\nconst isSameVnode = (vnode1, vnode2) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (vnode1.$tag$ === vnode2.$tag$) {\n        return true;\n    }\n    return false;\n};\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    {\n        // element node\n        {\n            {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* Bubbles */),\n                composed: !!(flags & 2 /* Composed */),\n                cancelable: !!(flags & 1 /* Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    if (isInitialLoad) {\n        {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* isWaitingForChildren */ | 512 /* needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* hasRendered */ | 16 /* isQueuedForUpdate */)) === 2 /* hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* Prop */ ||\n                    ((flags & 2 /* proxyState */) && memberFlags & 32 /* State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (flags & 1 /* isElementConstructor */ &&\n                memberFlags & 64 /* Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if ((flags & 1 /* isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (m[0] & 512 /* ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* isWatchReady */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = new Map();\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { bootstrapLazy as b, createEvent as c, promiseResolve as p, registerInstance as r };\n\n"]},"metadata":{},"sourceType":"module"}