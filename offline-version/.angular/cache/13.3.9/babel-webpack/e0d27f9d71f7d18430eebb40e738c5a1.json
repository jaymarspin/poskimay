{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n//import { Capacitor } from '@capacitor/core';\n\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n  constructor(sqlite) {\n    this.sqlite = sqlite;\n    this._connectionDict = new Map();\n  }\n\n  initWebStore() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this.sqlite.initWebStore();\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  saveToStore(database) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.sqlite.saveToStore({\n          database\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  echo(value) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this3.sqlite.echo({\n          value\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isSecretStored() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this4.sqlite.isSecretStored();\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  setEncryptionSecret(passphrase) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this5.sqlite.setEncryptionSecret({\n          passphrase: passphrase\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  changeEncryptionSecret(passphrase, oldpassphrase) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this6.sqlite.changeEncryptionSecret({\n          passphrase: passphrase,\n          oldpassphrase: oldpassphrase\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  clearEncryptionSecret() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this7.sqlite.clearEncryptionSecret();\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  addUpgradeStatement(database, fromVersion, toVersion, statement, set) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const upgrade = {\n        fromVersion,\n        toVersion,\n        statement,\n        set: set ? set : []\n      };\n\n      try {\n        if (database.endsWith('.db')) database = database.slice(0, -3);\n        yield _this8.sqlite.addUpgradeStatement({\n          database,\n          upgrade: [upgrade]\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  createConnection(database, encrypted, mode, version) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (database.endsWith('.db')) database = database.slice(0, -3);\n        yield _this9.sqlite.createConnection({\n          database,\n          encrypted,\n          mode,\n          version\n        });\n        const conn = new SQLiteDBConnection(database, _this9.sqlite);\n\n        _this9._connectionDict.set(database, conn);\n\n        return Promise.resolve(conn);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  closeConnection(database) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (database.endsWith('.db')) database = database.slice(0, -3);\n        yield _this10.sqlite.closeConnection({\n          database\n        });\n\n        _this10._connectionDict.delete(database);\n\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isConnection(database) {\n    var _this11 = this;\n\n    return _asyncToGenerator(function* () {\n      const res = {};\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n      res.result = _this11._connectionDict.has(database);\n      return Promise.resolve(res);\n    })();\n  }\n\n  retrieveConnection(database) {\n    var _this12 = this;\n\n    return _asyncToGenerator(function* () {\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n\n      if (_this12._connectionDict.has(database)) {\n        const conn = _this12._connectionDict.get(database);\n\n        if (typeof conn != 'undefined') return Promise.resolve(conn);else {\n          return Promise.reject(`Connection ${database} is undefined`);\n        }\n      } else {\n        return Promise.reject(`Connection ${database} does not exist`);\n      }\n    })();\n  }\n\n  getNCDatabasePath(path, database) {\n    var _this13 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const databasePath = yield _this13.sqlite.getNCDatabasePath({\n          path,\n          database\n        });\n        return Promise.resolve(databasePath);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  createNCConnection(databasePath, version) {\n    var _this14 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this14.sqlite.createNCConnection({\n          databasePath,\n          version\n        });\n        const conn = new SQLiteDBConnection(databasePath, _this14.sqlite);\n\n        _this14._connectionDict.set(databasePath, conn);\n\n        return Promise.resolve(conn);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  closeNCConnection(databasePath) {\n    var _this15 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this15.sqlite.closeNCConnection({\n          databasePath\n        });\n\n        _this15._connectionDict.delete(databasePath);\n\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isNCConnection(databasePath) {\n    var _this16 = this;\n\n    return _asyncToGenerator(function* () {\n      const res = {};\n      res.result = _this16._connectionDict.has(databasePath);\n      return Promise.resolve(res);\n    })();\n  }\n\n  retrieveNCConnection(databasePath) {\n    var _this17 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this17._connectionDict.has(databasePath)) {\n        const conn = _this17._connectionDict.get(databasePath);\n\n        if (typeof conn != 'undefined') return Promise.resolve(conn);else {\n          return Promise.reject(`Connection ${databasePath} is undefined`);\n        }\n      } else {\n        return Promise.reject(`Connection ${databasePath} does not exist`);\n      }\n    })();\n  }\n\n  isNCDatabase(databasePath) {\n    var _this18 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this18.sqlite.isNCDatabase({\n          databasePath\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  retrieveAllConnections() {\n    var _this19 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this19._connectionDict;\n    })();\n  }\n\n  closeAllConnections() {\n    var _this20 = this;\n\n    return _asyncToGenerator(function* () {\n      const delDict = new Map();\n\n      try {\n        for (const database of _this20._connectionDict.keys()) {\n          yield _this20.sqlite.closeConnection({\n            database\n          });\n          delDict.set(database, null);\n        }\n\n        for (const database of delDict.keys()) {\n          _this20._connectionDict.delete(database);\n        }\n\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  checkConnectionsConsistency() {\n    var _this21 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const keys = [..._this21._connectionDict.keys()];\n        const res = yield _this21.sqlite.checkConnectionsConsistency({\n          dbNames: keys\n        });\n        if (!res.result) _this21._connectionDict = new Map();\n        return Promise.resolve(res);\n      } catch (err) {\n        _this21._connectionDict = new Map();\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  importFromJson(jsonstring) {\n    var _this22 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const ret = yield _this22.sqlite.importFromJson({\n          jsonstring: jsonstring\n        });\n        return Promise.resolve(ret);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isJsonValid(jsonstring) {\n    var _this23 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const ret = yield _this23.sqlite.isJsonValid({\n          jsonstring: jsonstring\n        });\n        return Promise.resolve(ret);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  copyFromAssets(overwrite) {\n    var _this24 = this;\n\n    return _asyncToGenerator(function* () {\n      const mOverwrite = overwrite != null ? overwrite : true;\n\n      try {\n        yield _this24.sqlite.copyFromAssets({\n          overwrite: mOverwrite\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isDatabase(database) {\n    var _this25 = this;\n\n    return _asyncToGenerator(function* () {\n      if (database.endsWith('.db')) database = database.slice(0, -3);\n\n      try {\n        const res = yield _this25.sqlite.isDatabase({\n          database: database\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getDatabaseList() {\n    var _this26 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this26.sqlite.getDatabaseList();\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getMigratableDbList(folderPath) {\n    var _this27 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!folderPath || folderPath.length === 0) {\n        return Promise.reject('You must provide a folder path');\n      }\n\n      try {\n        const res = yield _this27.sqlite.getMigratableDbList({\n          folderPath: folderPath\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  addSQLiteSuffix(folderPath, dbNameList) {\n    var _this28 = this;\n\n    return _asyncToGenerator(function* () {\n      const path = folderPath ? folderPath : 'default';\n      const dbList = dbNameList ? dbNameList : [];\n\n      try {\n        const res = yield _this28.sqlite.addSQLiteSuffix({\n          folderPath: path,\n          dbNameList: dbList\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  deleteOldDatabases(folderPath, dbNameList) {\n    var _this29 = this;\n\n    return _asyncToGenerator(function* () {\n      const path = folderPath ? folderPath : 'default';\n      const dbList = dbNameList ? dbNameList : [];\n\n      try {\n        const res = yield _this29.sqlite.deleteOldDatabases({\n          folderPath: path,\n          dbNameList: dbList\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n    var _this30 = this;\n\n    return _asyncToGenerator(function* () {\n      const path = folderPath ? folderPath : 'default';\n      const dbList = dbNameList ? dbNameList : [];\n      return _this30.sqlite.moveDatabasesAndAddSuffix({\n        folderPath: path,\n        dbNameList: dbList\n      });\n    })();\n  }\n\n}\n/**\n * SQLiteDBConnection Class\n */\n\nexport class SQLiteDBConnection {\n  constructor(dbName, sqlite) {\n    this.dbName = dbName;\n    this.sqlite = sqlite;\n  }\n\n  getConnectionDBName() {\n    return this.dbName;\n  }\n\n  open() {\n    var _this31 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this31.sqlite.open({\n          database: _this31.dbName\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  close() {\n    var _this32 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this32.sqlite.close({\n          database: _this32.dbName\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getUrl() {\n    var _this33 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this33.sqlite.getUrl({\n          database: _this33.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getVersion() {\n    var _this34 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const version = yield _this34.sqlite.getVersion({\n          database: _this34.dbName\n        });\n        return Promise.resolve(version);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getTableList() {\n    var _this35 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this35.sqlite.getTableList({\n          database: _this35.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  execute(statements, transaction = true) {\n    var _this36 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this36.sqlite.execute({\n          database: _this36.dbName,\n          statements: statements,\n          transaction: transaction\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  query(statement, values) {\n    var _this37 = this;\n\n    return _asyncToGenerator(function* () {\n      let res;\n\n      try {\n        if (values && values.length > 0) {\n          res = yield _this37.sqlite.query({\n            database: _this37.dbName,\n            statement: statement,\n            values: values\n          });\n        } else {\n          res = yield _this37.sqlite.query({\n            database: _this37.dbName,\n            statement: statement,\n            values: []\n          });\n        }\n\n        if (res && typeof res.values[0] === 'object') {\n          if (Object.keys(res.values[0]).includes('ios_columns')) {\n            const columnList = res.values[0]['ios_columns'];\n            const iosRes = [];\n\n            for (let i = 1; i < res.values.length; i++) {\n              const rowJson = res.values[i];\n              const resRowJson = {};\n\n              for (const item of columnList) {\n                resRowJson[item] = rowJson[item];\n              }\n\n              iosRes.push(resRowJson);\n            }\n\n            res = {};\n            res['values'] = iosRes;\n          }\n        }\n\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  run(statement, values, transaction = true) {\n    var _this38 = this;\n\n    return _asyncToGenerator(function* () {\n      let res;\n\n      try {\n        if (values && values.length > 0) {\n          res = yield _this38.sqlite.run({\n            database: _this38.dbName,\n            statement: statement,\n            values: values,\n            transaction: transaction\n          }); //        }\n        } else {\n          res = yield _this38.sqlite.run({\n            database: _this38.dbName,\n            statement: statement,\n            values: [],\n            transaction: transaction\n          });\n        }\n\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  executeSet(set, transaction = true) {\n    var _this39 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this39.sqlite.executeSet({\n          database: _this39.dbName,\n          set: set,\n          transaction: transaction\n        }); //      }\n\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isExists() {\n    var _this40 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this40.sqlite.isDBExists({\n          database: _this40.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isTable(table) {\n    var _this41 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this41.sqlite.isTableExists({\n          database: _this41.dbName,\n          table: table\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  isDBOpen() {\n    var _this42 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this42.sqlite.isDBOpen({\n          database: _this42.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  delete() {\n    var _this43 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this43.sqlite.deleteDatabase({\n          database: _this43.dbName\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  createSyncTable() {\n    var _this44 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this44.sqlite.createSyncTable({\n          database: _this44.dbName\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  setSyncDate(syncdate) {\n    var _this45 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this45.sqlite.setSyncDate({\n          database: _this45.dbName,\n          syncdate: syncdate\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  getSyncDate() {\n    var _this46 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this46.sqlite.getSyncDate({\n          database: _this46.dbName\n        });\n        let retDate = '';\n        if (res.syncDate > 0) retDate = new Date(res.syncDate * 1000).toISOString();\n        return Promise.resolve(retDate);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  exportToJson(mode) {\n    var _this47 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const res = yield _this47.sqlite.exportToJson({\n          database: _this47.dbName,\n          jsonexportmode: mode\n        });\n        return Promise.resolve(res);\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  deleteExportedRows() {\n    var _this48 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this48.sqlite.deleteExportedRows({\n          database: _this48.dbName\n        });\n        return Promise.resolve();\n      } catch (err) {\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n  executeTransaction(txn) {\n    var _this49 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const ret = yield _this49.sqlite.execute({\n          database: _this49.dbName,\n          statements: 'BEGIN TRANSACTION;',\n          transaction: false\n        });\n\n        if (ret.changes.changes < 0) {\n          return Promise.reject('Error in BEGIN TRANSACTION');\n        }\n\n        for (const task of txn) {\n          if (task.values && task.values.length > 0) {\n            const ret = yield _this49.sqlite.run({\n              database: _this49.dbName,\n              statement: task.statement,\n              values: task.values,\n              transaction: false\n            });\n\n            if (ret.changes.lastId === -1) {\n              yield _this49.execute('ROLLBACK;', false);\n              return Promise.reject('Error in transaction run ');\n            }\n          } else {\n            const ret = yield _this49.sqlite.execute({\n              database: _this49.dbName,\n              statements: task.statement,\n              transaction: false\n            });\n\n            if (ret.changes.changes < 0) {\n              yield _this49.sqlite.execute({\n                database: _this49.dbName,\n                statements: 'ROLLBACK;',\n                transaction: false\n              });\n              return Promise.reject('Error in transaction execute ');\n            }\n          }\n        }\n\n        yield _this49.sqlite.execute({\n          database: _this49.dbName,\n          statements: 'COMMIT;',\n          transaction: false\n        });\n        return Promise.resolve();\n      } catch (err) {\n        yield _this49.sqlite.execute({\n          database: _this49.dbName,\n          statements: 'ROLLBACK;',\n          transaction: false\n        });\n        return Promise.reject(err);\n      }\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@capacitor-community/sqlite/dist/esm/definitions.js"],"names":["SQLiteConnection","constructor","sqlite","_connectionDict","Map","initWebStore","Promise","resolve","err","reject","saveToStore","database","echo","value","res","isSecretStored","setEncryptionSecret","passphrase","changeEncryptionSecret","oldpassphrase","clearEncryptionSecret","addUpgradeStatement","fromVersion","toVersion","statement","set","upgrade","endsWith","slice","createConnection","encrypted","mode","version","conn","SQLiteDBConnection","closeConnection","delete","isConnection","result","has","retrieveConnection","get","getNCDatabasePath","path","databasePath","createNCConnection","closeNCConnection","isNCConnection","retrieveNCConnection","isNCDatabase","retrieveAllConnections","closeAllConnections","delDict","keys","checkConnectionsConsistency","dbNames","importFromJson","jsonstring","ret","isJsonValid","copyFromAssets","overwrite","mOverwrite","isDatabase","getDatabaseList","getMigratableDbList","folderPath","length","addSQLiteSuffix","dbNameList","dbList","deleteOldDatabases","moveDatabasesAndAddSuffix","dbName","getConnectionDBName","open","close","getUrl","getVersion","getTableList","execute","statements","transaction","query","values","Object","includes","columnList","iosRes","i","rowJson","resRowJson","item","push","run","executeSet","isExists","isDBExists","isTable","table","isTableExists","isDBOpen","deleteDatabase","createSyncTable","setSyncDate","syncdate","getSyncDate","retDate","syncDate","Date","toISOString","exportToJson","jsonexportmode","deleteExportedRows","executeTransaction","txn","changes","task","lastId"],"mappings":"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","sourcesContent":["//import { Capacitor } from '@capacitor/core';\n/**\n * SQLiteConnection Class\n */\nexport class SQLiteConnection {\n    constructor(sqlite) {\n        this.sqlite = sqlite;\n        this._connectionDict = new Map();\n    }\n    async initWebStore() {\n        try {\n            await this.sqlite.initWebStore();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async saveToStore(database) {\n        try {\n            await this.sqlite.saveToStore({ database });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async echo(value) {\n        try {\n            const res = await this.sqlite.echo({ value });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isSecretStored() {\n        try {\n            const res = await this.sqlite.isSecretStored();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setEncryptionSecret(passphrase) {\n        try {\n            await this.sqlite.setEncryptionSecret({ passphrase: passphrase });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async changeEncryptionSecret(passphrase, oldpassphrase) {\n        try {\n            await this.sqlite.changeEncryptionSecret({\n                passphrase: passphrase,\n                oldpassphrase: oldpassphrase,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async clearEncryptionSecret() {\n        try {\n            await this.sqlite.clearEncryptionSecret();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addUpgradeStatement(database, fromVersion, toVersion, statement, set) {\n        const upgrade = {\n            fromVersion,\n            toVersion,\n            statement,\n            set: set ? set : [],\n        };\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.addUpgradeStatement({\n                database,\n                upgrade: [upgrade],\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createConnection(database, encrypted, mode, version) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.createConnection({\n                database,\n                encrypted,\n                mode,\n                version,\n            });\n            const conn = new SQLiteDBConnection(database, this.sqlite);\n            this._connectionDict.set(database, conn);\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeConnection(database) {\n        try {\n            if (database.endsWith('.db'))\n                database = database.slice(0, -3);\n            await this.sqlite.closeConnection({ database });\n            this._connectionDict.delete(database);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isConnection(database) {\n        const res = {};\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        res.result = this._connectionDict.has(database);\n        return Promise.resolve(res);\n    }\n    async retrieveConnection(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        if (this._connectionDict.has(database)) {\n            const conn = this._connectionDict.get(database);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${database} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${database} does not exist`);\n        }\n    }\n    async getNCDatabasePath(path, database) {\n        try {\n            const databasePath = await this.sqlite.getNCDatabasePath({\n                path,\n                database,\n            });\n            return Promise.resolve(databasePath);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createNCConnection(databasePath, version) {\n        try {\n            await this.sqlite.createNCConnection({\n                databasePath,\n                version,\n            });\n            const conn = new SQLiteDBConnection(databasePath, this.sqlite);\n            this._connectionDict.set(databasePath, conn);\n            return Promise.resolve(conn);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async closeNCConnection(databasePath) {\n        try {\n            await this.sqlite.closeNCConnection({ databasePath });\n            this._connectionDict.delete(databasePath);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isNCConnection(databasePath) {\n        const res = {};\n        res.result = this._connectionDict.has(databasePath);\n        return Promise.resolve(res);\n    }\n    async retrieveNCConnection(databasePath) {\n        if (this._connectionDict.has(databasePath)) {\n            const conn = this._connectionDict.get(databasePath);\n            if (typeof conn != 'undefined')\n                return Promise.resolve(conn);\n            else {\n                return Promise.reject(`Connection ${databasePath} is undefined`);\n            }\n        }\n        else {\n            return Promise.reject(`Connection ${databasePath} does not exist`);\n        }\n    }\n    async isNCDatabase(databasePath) {\n        try {\n            const res = await this.sqlite.isNCDatabase({ databasePath });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async retrieveAllConnections() {\n        return this._connectionDict;\n    }\n    async closeAllConnections() {\n        const delDict = new Map();\n        try {\n            for (const database of this._connectionDict.keys()) {\n                await this.sqlite.closeConnection({ database });\n                delDict.set(database, null);\n            }\n            for (const database of delDict.keys()) {\n                this._connectionDict.delete(database);\n            }\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async checkConnectionsConsistency() {\n        try {\n            const keys = [...this._connectionDict.keys()];\n            const res = await this.sqlite.checkConnectionsConsistency({ dbNames: keys });\n            if (!res.result)\n                this._connectionDict = new Map();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            this._connectionDict = new Map();\n            return Promise.reject(err);\n        }\n    }\n    async importFromJson(jsonstring) {\n        try {\n            const ret = await this.sqlite.importFromJson({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isJsonValid(jsonstring) {\n        try {\n            const ret = await this.sqlite.isJsonValid({ jsonstring: jsonstring });\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async copyFromAssets(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        try {\n            await this.sqlite.copyFromAssets({ overwrite: mOverwrite });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDatabase(database) {\n        if (database.endsWith('.db'))\n            database = database.slice(0, -3);\n        try {\n            const res = await this.sqlite.isDatabase({ database: database });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getDatabaseList() {\n        try {\n            const res = await this.sqlite.getDatabaseList();\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getMigratableDbList(folderPath) {\n        if (!folderPath || folderPath.length === 0) {\n            return Promise.reject('You must provide a folder path');\n        }\n        try {\n            const res = await this.sqlite.getMigratableDbList({\n                folderPath: folderPath,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async addSQLiteSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.addSQLiteSuffix({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteOldDatabases(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        try {\n            const res = await this.sqlite.deleteOldDatabases({\n                folderPath: path,\n                dbNameList: dbList,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n        const path = folderPath ? folderPath : 'default';\n        const dbList = dbNameList ? dbNameList : [];\n        return this.sqlite.moveDatabasesAndAddSuffix({\n            folderPath: path,\n            dbNameList: dbList,\n        });\n    }\n}\n/**\n * SQLiteDBConnection Class\n */\nexport class SQLiteDBConnection {\n    constructor(dbName, sqlite) {\n        this.dbName = dbName;\n        this.sqlite = sqlite;\n    }\n    getConnectionDBName() {\n        return this.dbName;\n    }\n    async open() {\n        try {\n            await this.sqlite.open({ database: this.dbName });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async close() {\n        try {\n            await this.sqlite.close({ database: this.dbName });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getUrl() {\n        try {\n            const res = await this.sqlite.getUrl({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getVersion() {\n        try {\n            const version = await this.sqlite.getVersion({\n                database: this.dbName,\n            });\n            return Promise.resolve(version);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getTableList() {\n        try {\n            const res = await this.sqlite.getTableList({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async execute(statements, transaction = true) {\n        try {\n            const res = await this.sqlite.execute({\n                database: this.dbName,\n                statements: statements,\n                transaction: transaction,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async query(statement, values) {\n        let res;\n        try {\n            if (values && values.length > 0) {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: values,\n                });\n            }\n            else {\n                res = await this.sqlite.query({\n                    database: this.dbName,\n                    statement: statement,\n                    values: [],\n                });\n            }\n            if (res && typeof res.values[0] === 'object') {\n                if (Object.keys(res.values[0]).includes('ios_columns')) {\n                    const columnList = res.values[0]['ios_columns'];\n                    const iosRes = [];\n                    for (let i = 1; i < res.values.length; i++) {\n                        const rowJson = res.values[i];\n                        const resRowJson = {};\n                        for (const item of columnList) {\n                            resRowJson[item] = rowJson[item];\n                        }\n                        iosRes.push(resRowJson);\n                    }\n                    res = {};\n                    res['values'] = iosRes;\n                }\n            }\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async run(statement, values, transaction = true) {\n        let res;\n        try {\n            if (values && values.length > 0) {\n                res = await this.sqlite.run({\n                    database: this.dbName,\n                    statement: statement,\n                    values: values,\n                    transaction: transaction,\n                });\n                //        }\n            }\n            else {\n                res = await this.sqlite.run({\n                    database: this.dbName,\n                    statement: statement,\n                    values: [],\n                    transaction: transaction,\n                });\n            }\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeSet(set, transaction = true) {\n        try {\n            const res = await this.sqlite.executeSet({\n                database: this.dbName,\n                set: set,\n                transaction: transaction,\n            });\n            //      }\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isExists() {\n        try {\n            const res = await this.sqlite.isDBExists({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isTable(table) {\n        try {\n            const res = await this.sqlite.isTableExists({\n                database: this.dbName,\n                table: table,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async isDBOpen() {\n        try {\n            const res = await this.sqlite.isDBOpen({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async delete() {\n        try {\n            await this.sqlite.deleteDatabase({ database: this.dbName });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async createSyncTable() {\n        try {\n            const res = await this.sqlite.createSyncTable({\n                database: this.dbName,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async setSyncDate(syncdate) {\n        try {\n            await this.sqlite.setSyncDate({\n                database: this.dbName,\n                syncdate: syncdate,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async getSyncDate() {\n        try {\n            const res = await this.sqlite.getSyncDate({\n                database: this.dbName,\n            });\n            let retDate = '';\n            if (res.syncDate > 0)\n                retDate = new Date(res.syncDate * 1000).toISOString();\n            return Promise.resolve(retDate);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async exportToJson(mode) {\n        try {\n            const res = await this.sqlite.exportToJson({\n                database: this.dbName,\n                jsonexportmode: mode,\n            });\n            return Promise.resolve(res);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteExportedRows() {\n        try {\n            await this.sqlite.deleteExportedRows({ database: this.dbName });\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async executeTransaction(txn) {\n        try {\n            const ret = await this.sqlite.execute({\n                database: this.dbName,\n                statements: 'BEGIN TRANSACTION;',\n                transaction: false,\n            });\n            if (ret.changes.changes < 0) {\n                return Promise.reject('Error in BEGIN TRANSACTION');\n            }\n            for (const task of txn) {\n                if (task.values && task.values.length > 0) {\n                    const ret = await this.sqlite.run({\n                        database: this.dbName,\n                        statement: task.statement,\n                        values: task.values,\n                        transaction: false,\n                    });\n                    if (ret.changes.lastId === -1) {\n                        await this.execute('ROLLBACK;', false);\n                        return Promise.reject('Error in transaction run ');\n                    }\n                }\n                else {\n                    const ret = await this.sqlite.execute({\n                        database: this.dbName,\n                        statements: task.statement,\n                        transaction: false,\n                    });\n                    if (ret.changes.changes < 0) {\n                        await this.sqlite.execute({\n                            database: this.dbName,\n                            statements: 'ROLLBACK;',\n                            transaction: false,\n                        });\n                        return Promise.reject('Error in transaction execute ');\n                    }\n                }\n            }\n            await this.sqlite.execute({\n                database: this.dbName,\n                statements: 'COMMIT;',\n                transaction: false,\n            });\n            return Promise.resolve();\n        }\n        catch (err) {\n            await this.sqlite.execute({\n                database: this.dbName,\n                statements: 'ROLLBACK;',\n                transaction: false,\n            });\n            return Promise.reject(err);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}