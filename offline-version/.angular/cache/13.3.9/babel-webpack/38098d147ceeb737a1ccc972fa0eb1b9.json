{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { schemaToImport245V1, schemaToImport245V2 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let Testjson245Page = /*#__PURE__*/(() => {\n  class Testjson245Page {\n    constructor(_sqlite) {\n      this._sqlite = _sqlite;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          let msg = err.message ? err.message : err;\n          yield showAlert(msg);\n          console.log(`$$$ runTest failed ${msg}`);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Import Json Object V1 Issue#245\n          // ************************************************\n          // test Full Json object V1 validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(schemaToImport245V1));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid V1 Full failed\"));\n          } // full import \n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(schemaToImport245V1));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson V1 'full' failed\"));\n          console.log(`>>> Import V1 changes: ${result.changes.changes}`); // create the connection to the database\n\n          let db = yield _this2._sqlite.createConnection(\"product-db\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection product-db V1 failed\")); // open db product-db\n\n          yield db.open(); // create synchronization table \n\n          result = yield db.createSyncTable();\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          result = yield db.getSyncDate();\n          if (result.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // select all vendors in db\n\n          let ret = yield db.query('SELECT company_name FROM vendors;');\n\n          if (ret.values.length !== 3 || ret.values[0].company_name !== 'Devdactic' || ret.values[1].company_name !== 'Ionic Academy' || ret.values[2].company_name !== 'Ionic Company') {\n            return Promise.reject(new Error(\"Query vendors V1 failed\"));\n          } // select all products in db\n\n\n          ret = yield db.query(\"SELECT name FROM products;\");\n\n          if (ret.values.length !== 4 || ret.values[0].name !== 'Devdactic Fan Hat' || ret.values[1].name !== 'Ionic Academy Membership' || ret.values[2].name !== 'Ionic Sticker Swag' || ret.values[3].name !== 'Practical Ionic Book') {\n            return Promise.reject(new Error(\"Query products V1 failed\"));\n          }\n\n          ret = yield db.getTableList();\n          console.log(`>>> ret TableList ${JSON.stringify(ret)}`);\n\n          if (ret.values.length !== 2 || ret.values[0] !== 'products' || ret.values[1] !== 'vendors') {\n            return Promise.reject(new Error(\"GetTableList V1 failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"product-db\"); // ************************************************\n          // Try to Import again Json Object V1 Issue#245\n          // ************************************************\n          // full import \n\n          if (Object.keys(schemaToImport245V1).includes(\"overwrite\")) {\n            schemaToImport245V1.overwrite = false;\n          }\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(schemaToImport245V1));\n          console.log(`>>> Re-Import V1 changes: ${result.changes.changes}`);\n          if (result.changes.changes != 0) return Promise.reject(new Error(\"Re-ImportFromJson V1 'full' failed\"));\n          schemaToImport245V1.overwrite = true; // ************************************************\n          // Import Json Object V2 Issue#245\n          // ************************************************\n          // test Full Json object V2 validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(schemaToImport245V2));\n          console.log(`IsJsonValid V2: ${JSON.stringify(result)}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid V2 Full failed\"));\n          } // full import \n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(schemaToImport245V2));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson V2 'full' failed\"));\n          console.log(`>>> Import V2 changes: ${result.changes.changes}`); // create the connection to the database\n\n          db = yield _this2._sqlite.createConnection(\"product-db\", false, \"no-encryption\", 2);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection product-db V2 failed\")); // open db product-db\n\n          yield db.open(); // Set the new synchronization date\n\n          yield db.setSyncDate(`${new Date().toISOString().substring(0, 24)}`); // select all vendors email in db\n\n          ret = yield db.query('SELECT company_email FROM vendors;');\n\n          if (ret.values.length !== 3 || ret.values[0].company_email !== 'devdactic@example.com' || ret.values[1].company_email !== 'ionic.academy@example.com' || ret.values[2].company_email !== 'ionic@example.com') {\n            return Promise.reject(new Error(\"Query vendors V2 failed\"));\n          }\n\n          const queryStmt = `SELECT vendors.company_name AS company,\n          COUNT(products.vendorid) AS nb_products from products\n          INNER JOIN vendors ON vendors.id = products.vendorid\n          GROUP BY products.vendorid ORDER BY company;`;\n          ret = yield db.query(queryStmt);\n\n          if (ret.values.length !== 3 || ret.values[0].nb_products !== 2 || ret.values[1].nb_products !== 1 || ret.values[2].nb_products !== 1) {\n            return Promise.reject(new Error(\"Query count products V2 failed\"));\n          } // delete the db\n\n\n          yield db.delete(); // ************************************************\n          // Export Json Object from an Existing Database\n          // ************************************************\n\n          /*\n                // export json full\n                let jsonObj: any = await db.exportToJson('full');\n              \n                // test Json object validity\n                result = await this._sqlite\n                                      .isJsonValid(JSON.stringify(jsonObj.export));\n                if(!result.result) {\n                  return Promise.reject(new Error(\"IsJsonValid export 'full' failed\"));\n                }\n          \n                // export json partial\n                jsonObj = await db.exportToJson('partial');\n              \n                // test Json object validity\n                result = await this._sqlite\n                                      .isJsonValid(JSON.stringify(jsonObj.export));\n                if(!result.result) {\n                  return Promise.reject(new Error(\"IsJsonValid export 'partial' failed\"));\n                }\n          */\n          // close the connection\n\n          yield _this2._sqlite.closeConnection(\"product-db\");\n          return Promise.resolve();\n        } catch (err) {\n          // close the connection\n          yield _this2._sqlite.closeConnection(\"product-db\");\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  Testjson245Page.ɵfac = function Testjson245Page_Factory(t) {\n    return new (t || Testjson245Page)(i0.ɵɵdirectiveInject(i1.SQLiteService));\n  };\n\n  Testjson245Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Testjson245Page,\n    selectors: [[\"app-testjson245\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function Testjson245Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#245 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#245\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMjQ1LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rqc29uMjQ1LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"]\n  });\n  return Testjson245Page;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testjson245/testjson245.page.ts"],"names":["schemaToImport245V1","schemaToImport245V2","Dialog","i0","i1","i2","Testjson245Page","constructor","_sqlite","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","msg","result","echo","isJsonValid","JSON","stringify","Promise","reject","Error","importFromJson","changes","db","createConnection","open","createSyncTable","getSyncDate","length","ret","query","values","company_name","name","getTableList","closeConnection","Object","keys","includes","overwrite","setSyncDate","Date","toISOString","substring","company_email","queryStmt","nb_products","delete","resolve","ɵfac","Testjson245Page_Factory","t","ɵɵdirectiveInject","SQLiteService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","Testjson245Page_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { schemaToImport245V1, schemaToImport245V2 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport class Testjson245Page {\n    constructor(_sqlite) {\n        this._sqlite = _sqlite;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            let msg = err.message ? err.message : err;\n            await showAlert(msg);\n            console.log(`$$$ runTest failed ${msg}`);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // ************************************************\n            // Import Json Object V1 Issue#245\n            // ************************************************\n            // test Full Json object V1 validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(schemaToImport245V1));\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJsonValid V1 Full failed\"));\n            }\n            // full import \n            result = await this._sqlite\n                .importFromJson(JSON.stringify(schemaToImport245V1));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson V1 'full' failed\"));\n            console.log(`>>> Import V1 changes: ${result.changes.changes}`);\n            // create the connection to the database\n            let db = await this._sqlite\n                .createConnection(\"product-db\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection product-db V1 failed\"));\n            // open db product-db\n            await db.open();\n            // create synchronization table \n            result = await db.createSyncTable();\n            if (result.changes.changes < 0)\n                return Promise.reject(new Error(\"CreateSyncTable failed\"));\n            result = await db.getSyncDate();\n            if (result.length === 0)\n                return Promise.reject(new Error(\"GetSyncDate failed\"));\n            // select all vendors in db\n            let ret = await db.query('SELECT company_name FROM vendors;');\n            if (ret.values.length !== 3 || ret.values[0].company_name !== 'Devdactic' ||\n                ret.values[1].company_name !== 'Ionic Academy' ||\n                ret.values[2].company_name !== 'Ionic Company') {\n                return Promise.reject(new Error(\"Query vendors V1 failed\"));\n            }\n            // select all products in db\n            ret = await db.query(\"SELECT name FROM products;\");\n            if (ret.values.length !== 4 || ret.values[0].name !== 'Devdactic Fan Hat' ||\n                ret.values[1].name !== 'Ionic Academy Membership' ||\n                ret.values[2].name !== 'Ionic Sticker Swag' ||\n                ret.values[3].name !== 'Practical Ionic Book') {\n                return Promise.reject(new Error(\"Query products V1 failed\"));\n            }\n            ret = await db.getTableList();\n            console.log(`>>> ret TableList ${JSON.stringify(ret)}`);\n            if (ret.values.length !== 2 || ret.values[0] !== 'products' ||\n                ret.values[1] !== 'vendors') {\n                return Promise.reject(new Error(\"GetTableList V1 failed\"));\n            }\n            // close the connection\n            await this._sqlite.closeConnection(\"product-db\");\n            // ************************************************\n            // Try to Import again Json Object V1 Issue#245\n            // ************************************************\n            // full import \n            if (Object.keys(schemaToImport245V1).includes(\"overwrite\")) {\n                schemaToImport245V1.overwrite = false;\n            }\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(schemaToImport245V1));\n            console.log(`>>> Re-Import V1 changes: ${result.changes.changes}`);\n            if (result.changes.changes != 0)\n                return Promise.reject(new Error(\"Re-ImportFromJson V1 'full' failed\"));\n            schemaToImport245V1.overwrite = true;\n            // ************************************************\n            // Import Json Object V2 Issue#245\n            // ************************************************\n            // test Full Json object V2 validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(schemaToImport245V2));\n            console.log(`IsJsonValid V2: ${JSON.stringify(result)}`);\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJsonValid V2 Full failed\"));\n            }\n            // full import \n            result = await this._sqlite\n                .importFromJson(JSON.stringify(schemaToImport245V2));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson V2 'full' failed\"));\n            console.log(`>>> Import V2 changes: ${result.changes.changes}`);\n            // create the connection to the database\n            db = await this._sqlite\n                .createConnection(\"product-db\", false, \"no-encryption\", 2);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection product-db V2 failed\"));\n            // open db product-db\n            await db.open();\n            // Set the new synchronization date\n            await db.setSyncDate(`${(new Date()).toISOString().substring(0, 24)}`);\n            // select all vendors email in db\n            ret = await db.query('SELECT company_email FROM vendors;');\n            if (ret.values.length !== 3 || ret.values[0].company_email !== 'devdactic@example.com' ||\n                ret.values[1].company_email !== 'ionic.academy@example.com' ||\n                ret.values[2].company_email !== 'ionic@example.com') {\n                return Promise.reject(new Error(\"Query vendors V2 failed\"));\n            }\n            const queryStmt = `SELECT vendors.company_name AS company,\n          COUNT(products.vendorid) AS nb_products from products\n          INNER JOIN vendors ON vendors.id = products.vendorid\n          GROUP BY products.vendorid ORDER BY company;`;\n            ret = await db.query(queryStmt);\n            if (ret.values.length !== 3 || ret.values[0].nb_products !== 2 ||\n                ret.values[1].nb_products !== 1 || ret.values[2].nb_products !== 1) {\n                return Promise.reject(new Error(\"Query count products V2 failed\"));\n            }\n            // delete the db\n            await db.delete();\n            // ************************************************\n            // Export Json Object from an Existing Database\n            // ************************************************\n            /*\n                  // export json full\n                  let jsonObj: any = await db.exportToJson('full');\n                \n                  // test Json object validity\n                  result = await this._sqlite\n                                        .isJsonValid(JSON.stringify(jsonObj.export));\n                  if(!result.result) {\n                    return Promise.reject(new Error(\"IsJsonValid export 'full' failed\"));\n                  }\n            \n                  // export json partial\n                  jsonObj = await db.exportToJson('partial');\n                \n                  // test Json object validity\n                  result = await this._sqlite\n                                        .isJsonValid(JSON.stringify(jsonObj.export));\n                  if(!result.result) {\n                    return Promise.reject(new Error(\"IsJsonValid export 'partial' failed\"));\n                  }\n            */\n            // close the connection\n            await this._sqlite.closeConnection(\"product-db\");\n            return Promise.resolve();\n        }\n        catch (err) {\n            // close the connection\n            await this._sqlite.closeConnection(\"product-db\");\n            return Promise.reject(err);\n        }\n    }\n}\nTestjson245Page.ɵfac = function Testjson245Page_Factory(t) { return new (t || Testjson245Page)(i0.ɵɵdirectiveInject(i1.SQLiteService)); };\nTestjson245Page.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Testjson245Page, selectors: [[\"app-testjson245\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function Testjson245Page_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#245 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#245\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMjQ1LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rqc29uMjQ1LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}