{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchema, twoUsers, twoTests } from '../utils/no-encryption-utils';\nimport { createSchemaContacts, setContacts, setIssue170, createSchemaIssues220221, setIssues220221, updIssues220221 } from '../utils/encrypted-set-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let Test2dbsPage = /*#__PURE__*/(() => {\n  class Test2dbsPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n      this.isNative = this._sqlite.native;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World from Jeep\");\n          console.log(`from echo: ${result.value}`); // initialize the connection\n\n          let db;\n          let db1;\n          const retCC = (yield _this2._sqlite.checkConnectionsConsistency()).result;\n          let isConn = (yield _this2._sqlite.isConnection(\"testNew\")).result;\n\n          if (retCC && isConn) {\n            db = yield _this2._sqlite.retrieveConnection(\"testNew\");\n          } else {\n            db = yield _this2._sqlite.createConnection(\"testNew\", false, \"no-encryption\", 1);\n          }\n\n          isConn = (yield _this2._sqlite.isConnection(\"testSet\")).result;\n\n          if (retCC && isConn) {\n            db1 = yield _this2._sqlite.retrieveConnection(\"testSet\");\n          } else {\n            db1 = yield _this2._sqlite.createConnection(\"testSet\", true, \"secret\", 1);\n          } // check if the databases exist \n          // and delete it for multiple successive tests\n\n\n          yield deleteDatabase(db);\n          yield deleteDatabase(db1); // open db testNew\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable(); // set the synchronization date\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // delete users if any from previous run\n\n          let delUsers = `DELETE FROM users;`;\n          ret = yield db.execute(delUsers, false); // add two users in db\n\n          ret = yield db.execute(twoUsers);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute 2 users failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 users failed\"));\n          } // open db testSet\n\n\n          yield db1.open(); // create tables in db1\n\n          ret = yield db1.execute(createSchemaContacts); // load setContacts in db1\n\n          ret = yield db1.executeSet(setContacts);\n\n          if (ret.changes.changes !== 5) {\n            return Promise.reject(new Error(\"ExecuteSet 5 contacts failed\"));\n          } // test issue170\n\n\n          ret = yield db1.executeSet(setIssue170);\n\n          if (ret.changes.changes !== 1) {\n            return Promise.reject(new Error(\"ExecuteSet 6 issue170 failed\"));\n          } // select users where company is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 users where company is null failed\"));\n          } // add one user with statement and values              \n\n\n          let sqlcmd = \"INSERT INTO users (name,email,age,size,company) VALUES (?,?,?,?,?)\";\n          let values = [\"Simpson\", \"Simpson@example.com\", 69, 1.82, null];\n          ret = yield db.run(sqlcmd, values);\n\n          if (ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n          } // add one user with statement              \n\n\n          sqlcmd = `INSERT INTO users (name,email,age,size,company) VALUES ` + `(\"Brown\",\"Brown@example.com\",15,1.75,null)`;\n          ret = yield db.run(sqlcmd);\n\n          if (ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run 1 users with statement failed\"));\n          }\n\n          let delTest56 = `DELETE FROM test56;`;\n          ret = yield db.execute(delTest56, false); // add some tests issue#56\n\n          ret = yield db.execute(twoTests);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute issue#56 failed\"));\n          } // add one test\n\n\n          sqlcmd = \"INSERT INTO test56 (name) VALUES (?)\";\n          let vals = [\"test 3 added insert \"];\n          ret = yield db.run(sqlcmd, vals);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run 1 test issue#56 failed\"));\n          } // add a null test\n\n\n          vals = [null];\n          ret = yield db.run(sqlcmd, vals);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run 1 test null issue#56 failed\"));\n          } // add a another null test\n\n\n          vals = [];\n          ret = yield db.run(sqlcmd, vals);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 5) {\n            return Promise.reject(new Error(\"Run another null test issue#56 failed\"));\n          } // add test [null, 'test2']\n\n\n          sqlcmd = \"INSERT INTO test56 (name,name1) VALUES (?,?)\";\n          vals = [null, 'test2'];\n          ret = yield db.run(sqlcmd, vals);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 6) {\n            return Promise.reject(new Error(\"Run [null, 'test2'] test issue#56 failed\"));\n          } // Test issues 220 && 221\n          // create tables in db1\n\n\n          ret = yield db1.execute(createSchemaIssues220221); // load setIssues220221 in db1\n\n          ret = yield db1.executeSet(setIssues220221);\n          console.log(`setIssues220221 ret ${JSON.stringify(ret)}`);\n\n          if (ret.changes.changes !== 3) {\n            return Promise.reject(new Error(\"ExecuteSet 3 issues220221 failed\"));\n          } // update updIssues220221 in db1\n\n\n          ret = yield db1.executeSet(updIssues220221);\n          console.log(`updIssues220221 ret ${JSON.stringify(ret)}`); // update twice updIssues220221 in db1\n\n          ret = yield db1.executeSet(updIssues220221);\n          console.log(`twice updIssues220221 ret ${JSON.stringify(ret)}`); // get the database version\n\n          ret = yield db.getVersion();\n\n          if (ret.version !== 1) {\n            return Promise.reject(new Error(\"GetVersion: version failed\"));\n          }\n\n          _this2._detailService.setExistingConnection(true);\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  Test2dbsPage.ɵfac = function Test2dbsPage_Factory(t) {\n    return new (t || Test2dbsPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  Test2dbsPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Test2dbsPage,\n    selectors: [[\"app-test2dbs\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function Test2dbsPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Test2dbs \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Test2dbs\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QyZGJzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3QyZGJzLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"]\n  });\n  return Test2dbsPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/test2dbs/test2dbs.page.ts"],"names":["createSchema","twoUsers","twoTests","createSchemaContacts","setContacts","setIssue170","createSchemaIssues220221","setIssues220221","updIssues220221","deleteDatabase","Dialog","i0","i1","i2","i3","Test2dbsPage","constructor","_sqlite","_detailService","detail","initPlugin","isNative","native","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","value","db","db1","retCC","checkConnectionsConsistency","isConn","isConnection","retrieveConnection","createConnection","open","ret","execute","changes","Promise","reject","Error","createSyncTable","syncDate","setSyncDate","delUsers","query","values","length","name","executeSet","sqlcmd","run","lastId","delTest56","vals","JSON","stringify","getVersion","version","setExistingConnection","resolve","ɵfac","Test2dbsPage_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","Test2dbsPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { createSchema, twoUsers, twoTests } from '../utils/no-encryption-utils';\nimport { createSchemaContacts, setContacts, setIssue170, createSchemaIssues220221, setIssues220221, updIssues220221 } from '../utils/encrypted-set-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class Test2dbsPage {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.detail = false;\n        this.initPlugin = false;\n        this.isNative = this._sqlite.native;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World from Jeep\");\n            console.log(`from echo: ${result.value}`);\n            // initialize the connection\n            let db;\n            let db1;\n            const retCC = (await this._sqlite.checkConnectionsConsistency()).result;\n            let isConn = (await this._sqlite.isConnection(\"testNew\")).result;\n            if (retCC && isConn) {\n                db = await this._sqlite.retrieveConnection(\"testNew\");\n            }\n            else {\n                db = await this._sqlite\n                    .createConnection(\"testNew\", false, \"no-encryption\", 1);\n            }\n            isConn = (await this._sqlite.isConnection(\"testSet\")).result;\n            if (retCC && isConn) {\n                db1 = await this._sqlite.retrieveConnection(\"testSet\");\n            }\n            else {\n                db1 = await this._sqlite\n                    .createConnection(\"testSet\", true, \"secret\", 1);\n            }\n            // check if the databases exist \n            // and delete it for multiple successive tests\n            await deleteDatabase(db);\n            await deleteDatabase(db1);\n            // open db testNew\n            await db.open();\n            // create tables in db\n            let ret = await db.execute(createSchema);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSchema failed\"));\n            }\n            // create synchronization table \n            ret = await db.createSyncTable();\n            // set the synchronization date\n            const syncDate = \"2020-11-25T08:30:25.000Z\";\n            await db.setSyncDate(syncDate);\n            // delete users if any from previous run\n            let delUsers = `DELETE FROM users;`;\n            ret = await db.execute(delUsers, false);\n            // add two users in db\n            ret = await db.execute(twoUsers);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute 2 users failed\"));\n            }\n            // select all users in db\n            ret = await db.query(\"SELECT * FROM users;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 2 users failed\"));\n            }\n            // open db testSet\n            await db1.open();\n            // create tables in db1\n            ret = await db1.execute(createSchemaContacts);\n            // load setContacts in db1\n            ret = await db1.executeSet(setContacts);\n            if (ret.changes.changes !== 5) {\n                return Promise.reject(new Error(\"ExecuteSet 5 contacts failed\"));\n            }\n            // test issue170\n            ret = await db1.executeSet(setIssue170);\n            if (ret.changes.changes !== 1) {\n                return Promise.reject(new Error(\"ExecuteSet 6 issue170 failed\"));\n            }\n            // select users where company is NULL in db\n            ret = await db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 2 users where company is null failed\"));\n            }\n            // add one user with statement and values              \n            let sqlcmd = \"INSERT INTO users (name,email,age,size,company) VALUES (?,?,?,?,?)\";\n            let values = [\"Simpson\", \"Simpson@example.com\", 69, 1.82, null];\n            ret = await db.run(sqlcmd, values);\n            if (ret.changes.lastId !== 3) {\n                return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n            }\n            // add one user with statement              \n            sqlcmd = `INSERT INTO users (name,email,age,size,company) VALUES ` +\n                `(\"Brown\",\"Brown@example.com\",15,1.75,null)`;\n            ret = await db.run(sqlcmd);\n            if (ret.changes.lastId !== 4) {\n                return Promise.reject(new Error(\"Run 1 users with statement failed\"));\n            }\n            let delTest56 = `DELETE FROM test56;`;\n            ret = await db.execute(delTest56, false);\n            // add some tests issue#56\n            ret = await db.execute(twoTests);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute issue#56 failed\"));\n            }\n            // add one test\n            sqlcmd = \"INSERT INTO test56 (name) VALUES (?)\";\n            let vals = [\"test 3 added insert \"];\n            ret = await db.run(sqlcmd, vals);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 3) {\n                return Promise.reject(new Error(\"Run 1 test issue#56 failed\"));\n            }\n            // add a null test\n            vals = [null];\n            ret = await db.run(sqlcmd, vals);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 4) {\n                return Promise.reject(new Error(\"Run 1 test null issue#56 failed\"));\n            }\n            // add a another null test\n            vals = [];\n            ret = await db.run(sqlcmd, vals);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 5) {\n                return Promise.reject(new Error(\"Run another null test issue#56 failed\"));\n            }\n            // add test [null, 'test2']\n            sqlcmd = \"INSERT INTO test56 (name,name1) VALUES (?,?)\";\n            vals = [null, 'test2'];\n            ret = await db.run(sqlcmd, vals);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 6) {\n                return Promise.reject(new Error(\"Run [null, 'test2'] test issue#56 failed\"));\n            }\n            // Test issues 220 && 221\n            // create tables in db1\n            ret = await db1.execute(createSchemaIssues220221);\n            // load setIssues220221 in db1\n            ret = await db1.executeSet(setIssues220221);\n            console.log(`setIssues220221 ret ${JSON.stringify(ret)}`);\n            if (ret.changes.changes !== 3) {\n                return Promise.reject(new Error(\"ExecuteSet 3 issues220221 failed\"));\n            }\n            // update updIssues220221 in db1\n            ret = await db1.executeSet(updIssues220221);\n            console.log(`updIssues220221 ret ${JSON.stringify(ret)}`);\n            // update twice updIssues220221 in db1\n            ret = await db1.executeSet(updIssues220221);\n            console.log(`twice updIssues220221 ret ${JSON.stringify(ret)}`);\n            // get the database version\n            ret = await db.getVersion();\n            if (ret.version !== 1) {\n                return Promise.reject(new Error(\"GetVersion: version failed\"));\n            }\n            this._detailService.setExistingConnection(true);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTest2dbsPage.ɵfac = function Test2dbsPage_Factory(t) { return new (t || Test2dbsPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTest2dbsPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Test2dbsPage, selectors: [[\"app-test2dbs\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function Test2dbsPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Test2dbs \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Test2dbs\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QyZGJzLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3QyZGJzLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}