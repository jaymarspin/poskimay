{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { dataToImport, partialImport1, partialImport2, partialImport3 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestimportjsonPage = /*#__PURE__*/(() => {\n  class TestimportjsonPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          let msg = err.message ? err.message : err;\n          yield showAlert(msg);\n          console.log(`$$$ runTest failed ${msg}`);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Create Database from imported Json\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataToImport));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataToImport));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' dataToImport failed\")); // create the connection to the database\n\n          let db = yield _this2._sqlite.createConnection(\"db-from-json\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'db-from-json' failed\")); // open db \"db-from-json\"\n\n          yield db.open(); // create synchronization table \n\n          result = yield db.createSyncTable();\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          result = yield db.getSyncDate();\n          if (result.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // select all users in db\n\n          result = yield db.query(\"SELECT * FROM users;\");\n          console.log(`&&& Query4: ${result.values.length}`);\n          console.log(`&&& Query4: ${JSON.stringify(result)}`);\n\n          if (result.values.length !== 4 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\") {\n            return Promise.reject(new Error(\"Query 4 Users failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-from-json\"); // partial import 1\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(partialImport1));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport1 failed\"));\n          console.log(`&&& Partial import 1 nb changes: ${result.changes.changes}`); // partial import 2\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(partialImport2));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport2 failed\")); // partial import 3\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(partialImport3));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport2 failed\")); // create the connection to the database\n\n          db = yield _this2._sqlite.createConnection(\"db-from-json\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection 'db-from-json' after 'partial' failed\")); // open db \"db-from-json\"\n\n          yield db.open();\n          result = yield db.getSyncDate();\n          if (result.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // select all users in db\n\n          result = yield db.query(\"SELECT * FROM users;\");\n\n          if (result.values.length !== 6 || result.values[0].name !== \"Whiteley\" || result.values[1].name !== \"Jones\" || result.values[2].name !== \"Simpson\" || result.values[3].name !== \"Brown\" || result.values[4].name !== \"Addington\" || result.values[5].name !== \"Bannister\") {\n            return Promise.reject(new Error(\"Query 6 Users failed\"));\n          } // select all messages in db\n\n\n          result = yield db.query(\"SELECT * FROM messages;\");\n\n          if (result.values.length !== 4 || result.values[0].title !== \"test post 1\" || result.values[1].title !== \"test post 2\" || result.values[2].title !== \"test post 3\" || result.values[3].title !== \"test post 4\") {\n            return Promise.reject(new Error(\"Query 4 Messages failed\"));\n          } // select all images in db\n\n\n          result = yield db.query(\"SELECT * FROM images;\");\n\n          if (result.values.length !== 2 || result.values[0].name !== \"feather\" || result.values[1].name !== \"meowth\") {\n            return Promise.reject(new Error(\"Query 2 Images failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-from-json\");\n\n          _this2._detailService.setExportJson(true);\n\n          return Promise.resolve();\n        } catch (err) {\n          if (yield _this2._sqlite.isConnection(\"db-from-json\")) {\n            yield _this2._sqlite.closeConnection(\"db-from-json\");\n          }\n\n          _this2._detailService.setExportJson(false);\n\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestimportjsonPage.ɵfac = function TestimportjsonPage_Factory(t) {\n    return new (t || TestimportjsonPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestimportjsonPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestimportjsonPage,\n    selectors: [[\"app-testimportjson\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestimportjsonPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestImportJson \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestImportJson\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RpbXBvcnRqc29uLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3RpbXBvcnRqc29uLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"]\n  });\n  return TestimportjsonPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testimportjson/testimportjson.page.ts"],"names":["dataToImport","partialImport1","partialImport2","partialImport3","Dialog","i0","i1","i2","i3","TestimportjsonPage","constructor","_sqlite","_detailService","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","msg","result","echo","isJsonValid","JSON","stringify","Promise","reject","Error","importFromJson","changes","db","createConnection","open","createSyncTable","getSyncDate","length","query","values","name","closeConnection","setExportJson","resolve","isConnection","ɵfac","TestimportjsonPage_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestimportjsonPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { dataToImport, partialImport1, partialImport2, partialImport3 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class TestimportjsonPage {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            let msg = err.message ? err.message : err;\n            await showAlert(msg);\n            console.log(`$$$ runTest failed ${msg}`);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // ************************************************\n            // Create Database from imported Json\n            // ************************************************\n            // test Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(dataToImport));\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJsonValid failed\"));\n            }\n            // full import\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(dataToImport));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'full' dataToImport failed\"));\n            // create the connection to the database\n            let db = await this._sqlite\n                .createConnection(\"db-from-json\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection 'db-from-json' failed\"));\n            // open db \"db-from-json\"\n            await db.open();\n            // create synchronization table \n            result = await db.createSyncTable();\n            if (result.changes.changes < 0)\n                return Promise.reject(new Error(\"CreateSyncTable failed\"));\n            result = await db.getSyncDate();\n            if (result.length === 0)\n                return Promise.reject(new Error(\"GetSyncDate failed\"));\n            // select all users in db\n            result = await db.query(\"SELECT * FROM users;\");\n            console.log(`&&& Query4: ${result.values.length}`);\n            console.log(`&&& Query4: ${JSON.stringify(result)}`);\n            if (result.values.length !== 4 ||\n                result.values[0].name !== \"Whiteley\" ||\n                result.values[1].name !== \"Jones\" ||\n                result.values[2].name !== \"Simpson\" ||\n                result.values[3].name !== \"Brown\") {\n                return Promise.reject(new Error(\"Query 4 Users failed\"));\n            }\n            // close the connection\n            await this._sqlite.closeConnection(\"db-from-json\");\n            // partial import 1\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(partialImport1));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport1 failed\"));\n            console.log(`&&& Partial import 1 nb changes: ${result.changes.changes}`);\n            // partial import 2\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(partialImport2));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport2 failed\"));\n            // partial import 3\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(partialImport3));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'partial' partialImport2 failed\"));\n            // create the connection to the database\n            db = await this._sqlite\n                .createConnection(\"db-from-json\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection 'db-from-json' after 'partial' failed\"));\n            // open db \"db-from-json\"\n            await db.open();\n            result = await db.getSyncDate();\n            if (result.length === 0)\n                return Promise.reject(new Error(\"GetSyncDate failed\"));\n            // select all users in db\n            result = await db.query(\"SELECT * FROM users;\");\n            if (result.values.length !== 6 ||\n                result.values[0].name !== \"Whiteley\" ||\n                result.values[1].name !== \"Jones\" ||\n                result.values[2].name !== \"Simpson\" ||\n                result.values[3].name !== \"Brown\" ||\n                result.values[4].name !== \"Addington\" ||\n                result.values[5].name !== \"Bannister\") {\n                return Promise.reject(new Error(\"Query 6 Users failed\"));\n            }\n            // select all messages in db\n            result = await db.query(\"SELECT * FROM messages;\");\n            if (result.values.length !== 4 ||\n                result.values[0].title !== \"test post 1\" ||\n                result.values[1].title !== \"test post 2\" ||\n                result.values[2].title !== \"test post 3\" ||\n                result.values[3].title !== \"test post 4\") {\n                return Promise.reject(new Error(\"Query 4 Messages failed\"));\n            }\n            // select all images in db\n            result = await db.query(\"SELECT * FROM images;\");\n            if (result.values.length !== 2 ||\n                result.values[0].name !== \"feather\" ||\n                result.values[1].name !== \"meowth\") {\n                return Promise.reject(new Error(\"Query 2 Images failed\"));\n            }\n            // close the connection\n            await this._sqlite.closeConnection(\"db-from-json\");\n            this._detailService.setExportJson(true);\n            return Promise.resolve();\n        }\n        catch (err) {\n            if (await this._sqlite.isConnection(\"db-from-json\")) {\n                await this._sqlite.closeConnection(\"db-from-json\");\n            }\n            this._detailService.setExportJson(false);\n            return Promise.reject(err);\n        }\n    }\n}\nTestimportjsonPage.ɵfac = function TestimportjsonPage_Factory(t) { return new (t || TestimportjsonPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestimportjsonPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestimportjsonPage, selectors: [[\"app-testimportjson\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestimportjsonPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestImportJson \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestImportJson\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RpbXBvcnRqc29uLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3RpbXBvcnRqc29uLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}