{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { dataToImport231, dataToImportPartial231 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let Testjson231Page = /*#__PURE__*/(() => {\n  class Testjson231Page {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(\"$$$ runTest failed\");\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Import Json Object Issue#231\n          // ************************************************\n          // test Full Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataToImport231));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid Full failed\"));\n          } // full import create schema only\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataToImport231));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\")); // test Partial Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataToImportPartial231));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid Partial failed\"));\n          } // partial import load the data\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataToImportPartial231));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'partial' failed\")); // create the connection to the database\n\n          const db = yield _this2._sqlite.createConnection(\"db-from-json231\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-from-json231 failed\")); // open db db-from-json231\n\n          yield db.open(); // select all countries in db\n\n          let ret = yield db.query(\"SELECT * FROM countries;\");\n\n          if (ret.values.length !== 3 || ret.values[0].name !== \"Afghanistan\" || ret.values[1].name !== \"Albania\" || ret.values[2].name !== \"Algeria\") {\n            return Promise.reject(new Error(\"Query countries failed\"));\n          } // select all customers in db\n\n\n          ret = yield db.query(\"SELECT * FROM customers ORDER BY email;\");\n          console.log(`>>>> ret: ${JSON.stringify(ret)}`);\n\n          if (ret.values.length !== 2 || ret.values[0][\"last_name\"] !== \"Brown\" || ret.values[1][\"last_name\"] !== \"Jones\") {\n            return Promise.reject(new Error(\"Query customers failed\"));\n          } // ************************************************\n          // Export Json Object from an Existing Database\n          // ************************************************\n          // export json full\n\n\n          let jsonObj = yield db.exportToJson('full'); // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(jsonObj.export));\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJsonValid export 'full' failed\"));\n          } // export json partial\n\n          /*      jsonObj = await db.exportToJson('partial');\n              \n                // test Json object validity\n                result = await this._sqlite\n                                      .isJsonValid(JSON.stringify(jsonObj.export));\n                if(!result.result) {\n                  return Promise.reject(new Error(\"IsJsonValid export 'partial' failed\"));\n                }\n          */\n          // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-from-json231\");\n          return Promise.resolve();\n        } catch (err) {\n          // close the connection\n          yield _this2._sqlite.closeConnection(\"db-from-json231\");\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  Testjson231Page.ɵfac = function Testjson231Page_Factory(t) {\n    return new (t || Testjson231Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  Testjson231Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Testjson231Page,\n    selectors: [[\"app-testjson231\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function Testjson231Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#231 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#231\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMjMxLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rqc29uMjMxLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"]\n  });\n  return Testjson231Page;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testjson231/testjson231.page.ts"],"names":["dataToImport231","dataToImportPartial231","Dialog","i0","i1","i2","i3","Testjson231Page","constructor","_sqlite","_detailService","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","isJsonValid","JSON","stringify","Promise","reject","Error","importFromJson","changes","db","createConnection","open","ret","query","values","length","name","jsonObj","exportToJson","export","closeConnection","resolve","ɵfac","Testjson231Page_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","Testjson231Page_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { dataToImport231, dataToImportPartial231 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class Testjson231Page {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(\"$$$ runTest failed\");\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // ************************************************\n            // Import Json Object Issue#231\n            // ************************************************\n            // test Full Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(dataToImport231));\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJsonValid Full failed\"));\n            }\n            // full import create schema only\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(dataToImport231));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n            // test Partial Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(dataToImportPartial231));\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJsonValid Partial failed\"));\n            }\n            // partial import load the data\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(dataToImportPartial231));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'partial' failed\"));\n            // create the connection to the database\n            const db = await this._sqlite\n                .createConnection(\"db-from-json231\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection db-from-json231 failed\"));\n            // open db db-from-json231\n            await db.open();\n            // select all countries in db\n            let ret = await db.query(\"SELECT * FROM countries;\");\n            if (ret.values.length !== 3 || ret.values[0].name !== \"Afghanistan\" ||\n                ret.values[1].name !== \"Albania\" ||\n                ret.values[2].name !== \"Algeria\") {\n                return Promise.reject(new Error(\"Query countries failed\"));\n            }\n            // select all customers in db\n            ret = await db.query(\"SELECT * FROM customers ORDER BY email;\");\n            console.log(`>>>> ret: ${JSON.stringify(ret)}`);\n            if (ret.values.length !== 2 || ret.values[0][\"last_name\"] !== \"Brown\" ||\n                ret.values[1][\"last_name\"] !== \"Jones\") {\n                return Promise.reject(new Error(\"Query customers failed\"));\n            }\n            // ************************************************\n            // Export Json Object from an Existing Database\n            // ************************************************\n            // export json full\n            let jsonObj = await db.exportToJson('full');\n            // test Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(jsonObj.export));\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJsonValid export 'full' failed\"));\n            }\n            // export json partial\n            /*      jsonObj = await db.exportToJson('partial');\n                \n                  // test Json object validity\n                  result = await this._sqlite\n                                        .isJsonValid(JSON.stringify(jsonObj.export));\n                  if(!result.result) {\n                    return Promise.reject(new Error(\"IsJsonValid export 'partial' failed\"));\n                  }\n            */\n            // close the connection\n            await this._sqlite.closeConnection(\"db-from-json231\");\n            return Promise.resolve();\n        }\n        catch (err) {\n            // close the connection\n            await this._sqlite.closeConnection(\"db-from-json231\");\n            return Promise.reject(err);\n        }\n    }\n}\nTestjson231Page.ɵfac = function Testjson231Page_Factory(t) { return new (t || Testjson231Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestjson231Page.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Testjson231Page, selectors: [[\"app-testjson231\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function Testjson231Page_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#231 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#231\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMjMxLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rqc29uMjMxLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}