{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-88bdeaae.js';\nimport { b as getIonMode } from './ionic-global-00475c3a.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-4d272360.js';\nimport { p as printIonWarning, b as printIonError } from './index-c4b11676.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nimport { p as parseDate, e as getToday, D as is24Hour, M as getLocalizedDateTime, A as getMonthAndYear, E as getLocalizedTime, N as getMonthDayAndYear } from './parse-26477881.js';\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst DatetimeButton = class {\n  constructor(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    this.datetimePresentation = 'date-time';\n    this.datetimeActive = false;\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n\n    this.color = 'primary';\n    /**\n     * If `true`, the user cannot interact with the button.\n     */\n\n    this.disabled = false;\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n\n    this.setDateTimeText = () => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n\n      if (!datetimeEl) {\n        return;\n      }\n\n      const {\n        value,\n        locale,\n        hourCycle,\n        preferWheel,\n        multiple\n      } = datetimeEl;\n\n      if (multiple) {\n        printIonWarning(`Multi-date selection cannot be used with ion-datetime-button.\n\nPlease upvote https://github.com/ionic-team/ionic-framework/issues/25668 if you are interested in seeing this functionality added.\n      `, this.el);\n        return;\n      }\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n\n\n      const parsedDatetime = parseDate(value || getToday());\n      const use24Hour = is24Hour(locale, hourCycle); // TODO(FW-1865) - Remove once FW-1831 is fixed.\n\n      parsedDatetime.tzOffset = undefined;\n      this.dateText = this.timeText = undefined;\n\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, parsedDatetime);\n          const timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          } else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n\n          break;\n\n        case 'date':\n          this.dateText = getMonthDayAndYear(locale, parsedDatetime);\n          break;\n\n        case 'time':\n          this.timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          break;\n\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, parsedDatetime);\n          break;\n\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, {\n            month: 'long'\n          });\n          break;\n\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, {\n            year: 'numeric'\n          });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n\n\n    this.waitForDatetimeChanges = /*#__PURE__*/_asyncToGenerator(function* () {\n      const {\n        datetimeEl\n      } = _this;\n\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n\n      return new Promise(resolve => {\n        addEventListener(datetimeEl, 'ionRender', resolve, {\n          once: true\n        });\n      });\n    });\n\n    this.handleDateClick = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (ev) {\n        const {\n          datetimeEl,\n          datetimePresentation\n        } = _this;\n\n        if (!datetimeEl) {\n          return;\n        }\n\n        let needsPresentationChange = false;\n        /**\n         * When clicking the date button,\n         * we need to make sure that only a date\n         * picker is displayed. For presentation styles\n         * that display content other than a date picker,\n         * we need to update the presentation style.\n         */\n\n        switch (datetimePresentation) {\n          case 'date-time':\n          case 'time-date':\n            const needsChange = datetimeEl.presentation !== 'date';\n            /**\n             * The date+time wheel picker\n             * shows date and time together,\n             * so do not adjust the presentation\n             * in that case.\n             */\n\n            if (!datetimeEl.preferWheel && needsChange) {\n              datetimeEl.presentation = 'date';\n              needsPresentationChange = true;\n            }\n\n            break;\n        }\n        /**\n         * Track which button was clicked\n         * so that it can have the correct\n         * activated styles applied when\n         * the modal/popover containing\n         * the datetime is opened.\n         */\n\n\n        _this.selectedButton = 'date';\n\n        _this.presentOverlay(ev, needsPresentationChange, _this.dateTargetEl);\n      });\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    this.handleTimeClick = ev => {\n      const {\n        datetimeEl,\n        datetimePresentation\n      } = this;\n\n      if (!datetimeEl) {\n        return;\n      }\n\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n\n\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n\n\n    this.presentOverlay = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (ev, needsPresentationChange, triggerEl) {\n        const {\n          overlayEl\n        } = _this;\n\n        if (!overlayEl) {\n          return;\n        }\n\n        if (overlayEl.tagName === 'ION-POPOVER') {\n          /**\n           * When the presentation on datetime changes,\n           * we need to wait for the component to re-render\n           * otherwise the computed width/height of the\n           * popover content will be wrong, causing\n           * the popover to not align with the trigger element.\n           */\n          if (needsPresentationChange) {\n            yield _this.waitForDatetimeChanges();\n          }\n          /**\n           * We pass the trigger button element\n           * so that the popover aligns with the individual\n           * button that was clicked, not the component container.\n           */\n\n\n          overlayEl.present(Object.assign(Object.assign({}, ev), {\n            detail: {\n              ionShadowTarget: triggerEl\n            }\n          }));\n        } else {\n          overlayEl.present();\n        }\n      });\n\n      return function (_x2, _x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n  }\n\n  componentWillLoad() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        datetime\n      } = _this2;\n\n      if (!datetime) {\n        printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', _this2.el);\n        return;\n      }\n\n      const datetimeEl = _this2.datetimeEl = document.getElementById(datetime);\n\n      if (!datetimeEl) {\n        printIonError(`No ion-datetime instance found for ID '${datetime}'.`, _this2.el);\n        return;\n      }\n      /**\n       * Since the datetime can be used in any context (overlays, accordion, etc)\n       * we track when it is visible to determine when it is active.\n       * This informs which button is highlighted as well as the\n       * aria-expanded state.\n       */\n\n\n      const io = new IntersectionObserver(entries => {\n        const ev = entries[0];\n        _this2.datetimeActive = ev.isIntersecting;\n      }, {\n        threshold: 0.01\n      });\n      io.observe(datetimeEl);\n      /**\n       * Get a reference to any modal/popover\n       * the datetime is being used in so we can\n       * correctly size it when it is presented.\n       */\n\n      const overlayEl = _this2.overlayEl = datetimeEl.closest('ion-modal, ion-popover');\n      /**\n       * The .ion-datetime-button-overlay class contains\n       * styles that allow any modal/popover to be\n       * sized according to the dimensions of the datetime.\n       * If developers want a smaller/larger overlay all they need\n       * to do is change the width/height of the datetime.\n       * Additionally, this lets us avoid having to set\n       * explicit widths on each variant of datetime.\n       */\n\n      if (overlayEl) {\n        overlayEl.classList.add('ion-datetime-button-overlay');\n      }\n\n      componentOnReady(datetimeEl, () => {\n        const datetimePresentation = _this2.datetimePresentation = datetimeEl.presentation || 'date-time';\n        /**\n         * Set the initial display\n         * in the rendered buttons.\n         *\n         * From there, we need to listen\n         * for ionChange to be emitted\n         * from datetime so we know when\n         * to re-render the displayed\n         * text in the buttons.\n         */\n\n        _this2.setDateTimeText();\n\n        addEventListener(datetimeEl, 'ionChange', _this2.setDateTimeText);\n        /**\n         * Configure the initial selected button\n         * in the event that the datetime is displayed\n         * without clicking one of the datetime buttons.\n         * For example, a datetime could be expanded\n         * in an accordion. In this case users only\n         * need to click the accordion header to show\n         * the datetime.\n         */\n\n        switch (datetimePresentation) {\n          case 'date-time':\n          case 'date':\n          case 'month-year':\n          case 'month':\n          case 'year':\n            _this2.selectedButton = 'date';\n            break;\n\n          case 'time-date':\n          case 'time':\n            _this2.selectedButton = 'time';\n            break;\n        }\n      });\n    })();\n  }\n\n  render() {\n    const {\n      color,\n      dateText,\n      timeText,\n      selectedButton,\n      datetimeActive,\n      disabled\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled\n      })\n    }, dateText && h(\"button\", {\n      class: \"ion-activatable\",\n      id: \"date-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleDateClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.dateTargetEl = el\n    }, h(\"slot\", {\n      name: \"date-target\"\n    }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null)), timeText && h(\"button\", {\n      class: \"ion-activatable\",\n      id: \"time-button\",\n      \"aria-expanded\": datetimeActive ? 'true' : 'false',\n      onClick: this.handleTimeClick,\n      disabled: disabled,\n      part: \"native\",\n      ref: el => this.timeTargetEl = el\n    }, h(\"slot\", {\n      name: \"time-target\"\n    }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n};\nDatetimeButton.style = {\n  ios: iosDatetimeButtonCss,\n  md: mdDatetimeButtonCss\n};\nexport { DatetimeButton as ion_datetime_button };","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@ionic/angular/node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"names":["r","registerInstance","h","H","Host","i","getElement","b","getIonMode","a","addEventListener","c","componentOnReady","p","printIonWarning","printIonError","createColorClasses","parseDate","e","getToday","D","is24Hour","M","getLocalizedDateTime","A","getMonthAndYear","E","getLocalizedTime","N","getMonthDayAndYear","iosDatetimeButtonCss","mdDatetimeButtonCss","DatetimeButton","constructor","hostRef","datetimeEl","overlayEl","datetimePresentation","datetimeActive","color","disabled","setDateTimeText","value","locale","hourCycle","preferWheel","multiple","el","parsedDatetime","use24Hour","tzOffset","undefined","dateText","timeText","month","year","waitForDatetimeChanges","Promise","resolve","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","componentWillLoad","datetime","document","getElementById","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","class","id","onClick","part","ref","name","style","ios","md","ion_datetime_button"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,CAAC,IAAIC,gBAAd,EAAgCC,CAAhC,EAAmCC,CAAC,IAAIC,IAAxC,EAA8CC,CAAC,IAAIC,UAAnD,QAAqE,qBAArE;AACA,SAASC,CAAC,IAAIC,UAAd,QAAgC,4BAAhC;AACA,SAASC,CAAC,IAAIC,gBAAd,EAAgCC,CAAC,IAAIC,gBAArC,QAA6D,uBAA7D;AACA,SAASC,CAAC,IAAIC,eAAd,EAA+BP,CAAC,IAAIQ,aAApC,QAAyD,qBAAzD;AACA,SAASJ,CAAC,IAAIK,kBAAd,QAAwC,qBAAxC;AACA,SAASH,CAAC,IAAII,SAAd,EAAyBC,CAAC,IAAIC,QAA9B,EAAwCC,CAAC,IAAIC,QAA7C,EAAuDC,CAAC,IAAIC,oBAA5D,EAAkFC,CAAC,IAAIC,eAAvF,EAAwGC,CAAC,IAAIC,gBAA7G,EAA+HC,CAAC,IAAIC,kBAApI,QAA8J,qBAA9J;AAEA,MAAMC,oBAAoB,GAAG,sxCAA7B;AAEA,MAAMC,mBAAmB,GAAG,sxCAA5B;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3BC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA;;AACnBjC,IAAAA,gBAAgB,CAAC,IAAD,EAAOiC,OAAP,CAAhB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,oBAAL,GAA4B,WAA5B;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,KAAL,GAAa,SAAb;AACA;AACJ;AACA;;AACI,SAAKC,QAAL,GAAgB,KAAhB;AACA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,eAAL,GAAuB,MAAM;AAC3B,YAAM;AAAEN,QAAAA,UAAF;AAAcE,QAAAA;AAAd,UAAuC,IAA7C;;AACA,UAAI,CAACF,UAAL,EAAiB;AACf;AACD;;AACD,YAAM;AAAEO,QAAAA,KAAF;AAASC,QAAAA,MAAT;AAAiBC,QAAAA,SAAjB;AAA4BC,QAAAA,WAA5B;AAAyCC,QAAAA;AAAzC,UAAsDX,UAA5D;;AACA,UAAIW,QAAJ,EAAc;AACZhC,QAAAA,eAAe,CAAE;AACzB;AACA;AACA,OAHuB,EAGd,KAAKiC,EAHS,CAAf;AAIA;AACD;AACD;AACN;AACA;AACA;;;AACM,YAAMC,cAAc,GAAG/B,SAAS,CAACyB,KAAK,IAAIvB,QAAQ,EAAlB,CAAhC;AACA,YAAM8B,SAAS,GAAG5B,QAAQ,CAACsB,MAAD,EAASC,SAAT,CAA1B,CAlB2B,CAmB3B;;AACAI,MAAAA,cAAc,CAACE,QAAf,GAA0BC,SAA1B;AACA,WAAKC,QAAL,GAAgB,KAAKC,QAAL,GAAgBF,SAAhC;;AACA,cAAQd,oBAAR;AACE,aAAK,WAAL;AACA,aAAK,WAAL;AACE,gBAAMe,QAAQ,GAAGvB,kBAAkB,CAACc,MAAD,EAASK,cAAT,CAAnC;AACA,gBAAMK,QAAQ,GAAG1B,gBAAgB,CAACgB,MAAD,EAASK,cAAT,EAAyBC,SAAzB,CAAjC;;AACA,cAAIJ,WAAJ,EAAiB;AACf,iBAAKO,QAAL,GAAiB,GAAEA,QAAS,IAAGC,QAAS,EAAxC;AACD,WAFD,MAGK;AACH,iBAAKD,QAAL,GAAgBA,QAAhB;AACA,iBAAKC,QAAL,GAAgBA,QAAhB;AACD;;AACD;;AACF,aAAK,MAAL;AACE,eAAKD,QAAL,GAAgBvB,kBAAkB,CAACc,MAAD,EAASK,cAAT,CAAlC;AACA;;AACF,aAAK,MAAL;AACE,eAAKK,QAAL,GAAgB1B,gBAAgB,CAACgB,MAAD,EAASK,cAAT,EAAyBC,SAAzB,CAAhC;AACA;;AACF,aAAK,YAAL;AACE,eAAKG,QAAL,GAAgB3B,eAAe,CAACkB,MAAD,EAASK,cAAT,CAA/B;AACA;;AACF,aAAK,OAAL;AACE,eAAKI,QAAL,GAAgB7B,oBAAoB,CAACoB,MAAD,EAASK,cAAT,EAAyB;AAAEM,YAAAA,KAAK,EAAE;AAAT,WAAzB,CAApC;AACA;;AACF,aAAK,MAAL;AACE,eAAKF,QAAL,GAAgB7B,oBAAoB,CAACoB,MAAD,EAASK,cAAT,EAAyB;AAAEO,YAAAA,IAAI,EAAE;AAAR,WAAzB,CAApC;AACA;AA3BJ;AA6BD,KAnDD;AAoDA;AACJ;AACA;AACA;AACA;;;AACI,SAAKC,sBAAL,kCAA8B,aAAY;AACxC,YAAM;AAAErB,QAAAA;AAAF,UAAiB,KAAvB;;AACA,UAAI,CAACA,UAAL,EAAiB;AACf,eAAOsB,OAAO,CAACC,OAAR,EAAP;AACD;;AACD,aAAO,IAAID,OAAJ,CAAaC,OAAD,IAAa;AAC9BhD,QAAAA,gBAAgB,CAACyB,UAAD,EAAa,WAAb,EAA0BuB,OAA1B,EAAmC;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAAnC,CAAhB;AACD,OAFM,CAAP;AAGD,KARD;;AASA,SAAKC,eAAL;AAAA,oCAAuB,WAAOC,EAAP,EAAc;AACnC,cAAM;AAAE1B,UAAAA,UAAF;AAAcE,UAAAA;AAAd,YAAuC,KAA7C;;AACA,YAAI,CAACF,UAAL,EAAiB;AACf;AACD;;AACD,YAAI2B,uBAAuB,GAAG,KAA9B;AACA;AACN;AACA;AACA;AACA;AACA;AACA;;AACM,gBAAQzB,oBAAR;AACE,eAAK,WAAL;AACA,eAAK,WAAL;AACE,kBAAM0B,WAAW,GAAG5B,UAAU,CAAC6B,YAAX,KAA4B,MAAhD;AACA;AACV;AACA;AACA;AACA;AACA;;AACU,gBAAI,CAAC7B,UAAU,CAACU,WAAZ,IAA2BkB,WAA/B,EAA4C;AAC1C5B,cAAAA,UAAU,CAAC6B,YAAX,GAA0B,MAA1B;AACAF,cAAAA,uBAAuB,GAAG,IAA1B;AACD;;AACD;AAdJ;AAgBA;AACN;AACA;AACA;AACA;AACA;AACA;;;AACM,QAAA,KAAI,CAACG,cAAL,GAAsB,MAAtB;;AACA,QAAA,KAAI,CAACC,cAAL,CAAoBL,EAApB,EAAwBC,uBAAxB,EAAiD,KAAI,CAACK,YAAtD;AACD,OAtCD;;AAAA;AAAA;AAAA;AAAA;;AAuCA,SAAKC,eAAL,GAAwBP,EAAD,IAAQ;AAC7B,YAAM;AAAE1B,QAAAA,UAAF;AAAcE,QAAAA;AAAd,UAAuC,IAA7C;;AACA,UAAI,CAACF,UAAL,EAAiB;AACf;AACD;;AACD,UAAI2B,uBAAuB,GAAG,KAA9B;AACA;AACN;AACA;AACA;AACA;AACA;AACA;;AACM,cAAQzB,oBAAR;AACE,aAAK,WAAL;AACA,aAAK,WAAL;AACE,gBAAM0B,WAAW,GAAG5B,UAAU,CAAC6B,YAAX,KAA4B,MAAhD;;AACA,cAAID,WAAJ,EAAiB;AACf5B,YAAAA,UAAU,CAAC6B,YAAX,GAA0B,MAA1B;AACAF,YAAAA,uBAAuB,GAAG,IAA1B;AACD;;AACD;AARJ;AAUA;AACN;AACA;AACA;AACA;AACA;AACA;;;AACM,WAAKG,cAAL,GAAsB,MAAtB;AACA,WAAKC,cAAL,CAAoBL,EAApB,EAAwBC,uBAAxB,EAAiD,KAAKO,YAAtD;AACD,KAhCD;AAiCA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,SAAKH,cAAL;AAAA,oCAAsB,WAAOL,EAAP,EAAWC,uBAAX,EAAoCQ,SAApC,EAAkD;AACtE,cAAM;AAAElC,UAAAA;AAAF,YAAgB,KAAtB;;AACA,YAAI,CAACA,SAAL,EAAgB;AACd;AACD;;AACD,YAAIA,SAAS,CAACmC,OAAV,KAAsB,aAA1B,EAAyC;AACvC;AACR;AACA;AACA;AACA;AACA;AACA;AACQ,cAAIT,uBAAJ,EAA6B;AAC3B,kBAAM,KAAI,CAACN,sBAAL,EAAN;AACD;AACD;AACR;AACA;AACA;AACA;;;AACQpB,UAAAA,SAAS,CAACoC,OAAV,CAAkBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,EAAlB,CAAd,EAAqC;AAAEc,YAAAA,MAAM,EAAE;AAC7DC,cAAAA,eAAe,EAAEN;AAD4C;AAAV,WAArC,CAAlB;AAGD,SAnBD,MAoBK;AACHlC,UAAAA,SAAS,CAACoC,OAAV;AACD;AACF,OA5BD;;AAAA;AAAA;AAAA;AAAA;AA6BD;;AACKK,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACxB,YAAM;AAAEC,QAAAA;AAAF,UAAe,MAArB;;AACA,UAAI,CAACA,QAAL,EAAe;AACb/D,QAAAA,aAAa,CAAC,0GAAD,EAA6G,MAAI,CAACgC,EAAlH,CAAb;AACA;AACD;;AACD,YAAMZ,UAAU,GAAI,MAAI,CAACA,UAAL,GAAkB4C,QAAQ,CAACC,cAAT,CAAwBF,QAAxB,CAAtC;;AACA,UAAI,CAAC3C,UAAL,EAAiB;AACfpB,QAAAA,aAAa,CAAE,0CAAyC+D,QAAS,IAApD,EAAyD,MAAI,CAAC/B,EAA9D,CAAb;AACA;AACD;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACI,YAAMkC,EAAE,GAAG,IAAIC,oBAAJ,CAA0BC,OAAD,IAAa;AAC/C,cAAMtB,EAAE,GAAGsB,OAAO,CAAC,CAAD,CAAlB;AACA,QAAA,MAAI,CAAC7C,cAAL,GAAsBuB,EAAE,CAACuB,cAAzB;AACD,OAHU,EAGR;AACDC,QAAAA,SAAS,EAAE;AADV,OAHQ,CAAX;AAMAJ,MAAAA,EAAE,CAACK,OAAH,CAAWnD,UAAX;AACA;AACJ;AACA;AACA;AACA;;AACI,YAAMC,SAAS,GAAI,MAAI,CAACA,SAAL,GAAiBD,UAAU,CAACoD,OAAX,CAAmB,wBAAnB,CAApC;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,UAAInD,SAAJ,EAAe;AACbA,QAAAA,SAAS,CAACoD,SAAV,CAAoBC,GAApB,CAAwB,6BAAxB;AACD;;AACD7E,MAAAA,gBAAgB,CAACuB,UAAD,EAAa,MAAM;AACjC,cAAME,oBAAoB,GAAI,MAAI,CAACA,oBAAL,GAA4BF,UAAU,CAAC6B,YAAX,IAA2B,WAArF;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACM,QAAA,MAAI,CAACvB,eAAL;;AACA/B,QAAAA,gBAAgB,CAACyB,UAAD,EAAa,WAAb,EAA0B,MAAI,CAACM,eAA/B,CAAhB;AACA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACM,gBAAQJ,oBAAR;AACE,eAAK,WAAL;AACA,eAAK,MAAL;AACA,eAAK,YAAL;AACA,eAAK,OAAL;AACA,eAAK,MAAL;AACE,YAAA,MAAI,CAAC4B,cAAL,GAAsB,MAAtB;AACA;;AACF,eAAK,WAAL;AACA,eAAK,MAAL;AACE,YAAA,MAAI,CAACA,cAAL,GAAsB,MAAtB;AACA;AAXJ;AAaD,OApCe,CAAhB;AA1CwB;AA+EzB;;AACDyB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnD,MAAAA,KAAF;AAASa,MAAAA,QAAT;AAAmBC,MAAAA,QAAnB;AAA6BY,MAAAA,cAA7B;AAA6C3B,MAAAA,cAA7C;AAA6DE,MAAAA;AAA7D,QAA0E,IAAhF;AACA,UAAMmD,IAAI,GAAGnF,UAAU,CAAC,IAAD,CAAvB;AACA,WAAQN,CAAC,CAACE,IAAD,EAAO;AAAEwF,MAAAA,KAAK,EAAE5E,kBAAkB,CAACuB,KAAD,EAAQ;AAC/C,SAACoD,IAAD,GAAQ,IADuC;AAE/C,SAAE,GAAE1B,cAAe,SAAnB,GAA8B3B,cAFiB;AAG/C,SAAC,0BAAD,GAA8BE;AAHiB,OAAR;AAA3B,KAAP,EAIDY,QAAQ,IAAKlD,CAAC,CAAC,QAAD,EAAW;AAAE0F,MAAAA,KAAK,EAAE,iBAAT;AAA4BC,MAAAA,EAAE,EAAE,aAAhC;AAA+C,uBAAiBvD,cAAc,GAAG,MAAH,GAAY,OAA1F;AAAmGwD,MAAAA,OAAO,EAAE,KAAKlC,eAAjH;AAAkIpB,MAAAA,QAAQ,EAAEA,QAA5I;AAAsJuD,MAAAA,IAAI,EAAE,QAA5J;AAAsKC,MAAAA,GAAG,EAAGjD,EAAD,IAAS,KAAKoB,YAAL,GAAoBpB;AAAxM,KAAX,EAA0N7C,CAAC,CAAC,MAAD,EAAS;AAAE+F,MAAAA,IAAI,EAAE;AAAR,KAAT,EAAkC7C,QAAlC,CAA3N,EAAwQuC,IAAI,KAAK,IAAT,IAAiBzF,CAAC,CAAC,mBAAD,EAAsB,IAAtB,CAA1R,CAJb,EAIsUmD,QAAQ,IAAKnD,CAAC,CAAC,QAAD,EAAW;AAAE0F,MAAAA,KAAK,EAAE,iBAAT;AAA4BC,MAAAA,EAAE,EAAE,aAAhC;AAA+C,uBAAiBvD,cAAc,GAAG,MAAH,GAAY,OAA1F;AAAmGwD,MAAAA,OAAO,EAAE,KAAK1B,eAAjH;AAAkI5B,MAAAA,QAAQ,EAAEA,QAA5I;AAAsJuD,MAAAA,IAAI,EAAE,QAA5J;AAAsKC,MAAAA,GAAG,EAAGjD,EAAD,IAAS,KAAKsB,YAAL,GAAoBtB;AAAxM,KAAX,EAA0N7C,CAAC,CAAC,MAAD,EAAS;AAAE+F,MAAAA,IAAI,EAAE;AAAR,KAAT,EAAkC5C,QAAlC,CAA3N,EAAwQsC,IAAI,KAAK,IAAT,IAAiBzF,CAAC,CAAC,mBAAD,EAAsB,IAAtB,CAA1R,CAJpV,CAAT;AAKD;;AACK,MAAF6C,EAAE,GAAG;AAAE,WAAOzC,UAAU,CAAC,IAAD,CAAjB;AAA0B;;AAjSV,CAA7B;AAmSA0B,cAAc,CAACkE,KAAf,GAAuB;AACrBC,EAAAA,GAAG,EAAErE,oBADgB;AAErBsE,EAAAA,EAAE,EAAErE;AAFiB,CAAvB;AAKA,SAASC,cAAc,IAAIqE,mBAA3B","sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement } from './index-88bdeaae.js';\nimport { b as getIonMode } from './ionic-global-00475c3a.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-4d272360.js';\nimport { p as printIonWarning, b as printIonError } from './index-c4b11676.js';\nimport { c as createColorClasses } from './theme-7670341c.js';\nimport { p as parseDate, e as getToday, D as is24Hour, M as getLocalizedDateTime, A as getMonthAndYear, E as getLocalizedTime, N as getMonthDayAndYear } from './parse-26477881.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;margin-left:2px;margin-right:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;overflow:hidden}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host button{margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px}}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\n\nconst DatetimeButton = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.datetimeEl = null;\n    this.overlayEl = null;\n    this.datetimePresentation = 'date-time';\n    this.datetimeActive = false;\n    /**\n     * The color to use from your application's color palette.\n     * Default options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     * For more information on colors, see [theming](/docs/theming/basics).\n     */\n    this.color = 'primary';\n    /**\n     * If `true`, the user cannot interact with the button.\n     */\n    this.disabled = false;\n    /**\n     * Check the value property on the linked\n     * ion-datetime and then format it according\n     * to the locale specified on ion-datetime.\n     */\n    this.setDateTimeText = () => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      const { value, locale, hourCycle, preferWheel, multiple } = datetimeEl;\n      if (multiple) {\n        printIonWarning(`Multi-date selection cannot be used with ion-datetime-button.\n\nPlease upvote https://github.com/ionic-team/ionic-framework/issues/25668 if you are interested in seeing this functionality added.\n      `, this.el);\n        return;\n      }\n      /**\n       * Both ion-datetime and ion-datetime-button default\n       * to today's date and time if no value is set.\n       */\n      const parsedDatetime = parseDate(value || getToday());\n      const use24Hour = is24Hour(locale, hourCycle);\n      // TODO(FW-1865) - Remove once FW-1831 is fixed.\n      parsedDatetime.tzOffset = undefined;\n      this.dateText = this.timeText = undefined;\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const dateText = getMonthDayAndYear(locale, parsedDatetime);\n          const timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          if (preferWheel) {\n            this.dateText = `${dateText} ${timeText}`;\n          }\n          else {\n            this.dateText = dateText;\n            this.timeText = timeText;\n          }\n          break;\n        case 'date':\n          this.dateText = getMonthDayAndYear(locale, parsedDatetime);\n          break;\n        case 'time':\n          this.timeText = getLocalizedTime(locale, parsedDatetime, use24Hour);\n          break;\n        case 'month-year':\n          this.dateText = getMonthAndYear(locale, parsedDatetime);\n          break;\n        case 'month':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { month: 'long' });\n          break;\n        case 'year':\n          this.dateText = getLocalizedDateTime(locale, parsedDatetime, { year: 'numeric' });\n          break;\n      }\n    };\n    /**\n     * Waits for the ion-datetime to re-render.\n     * This is needed in order to correctly position\n     * a popover relative to the trigger element.\n     */\n    this.waitForDatetimeChanges = async () => {\n      const { datetimeEl } = this;\n      if (!datetimeEl) {\n        return Promise.resolve();\n      }\n      return new Promise((resolve) => {\n        addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n      });\n    };\n    this.handleDateClick = async (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the date button,\n       * we need to make sure that only a date\n       * picker is displayed. For presentation styles\n       * that display content other than a date picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'date';\n          /**\n           * The date+time wheel picker\n           * shows date and time together,\n           * so do not adjust the presentation\n           * in that case.\n           */\n          if (!datetimeEl.preferWheel && needsChange) {\n            datetimeEl.presentation = 'date';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'date';\n      this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n    };\n    this.handleTimeClick = (ev) => {\n      const { datetimeEl, datetimePresentation } = this;\n      if (!datetimeEl) {\n        return;\n      }\n      let needsPresentationChange = false;\n      /**\n       * When clicking the time button,\n       * we need to make sure that only a time\n       * picker is displayed. For presentation styles\n       * that display content other than a time picker,\n       * we need to update the presentation style.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'time-date':\n          const needsChange = datetimeEl.presentation !== 'time';\n          if (needsChange) {\n            datetimeEl.presentation = 'time';\n            needsPresentationChange = true;\n          }\n          break;\n      }\n      /**\n       * Track which button was clicked\n       * so that it can have the correct\n       * activated styles applied when\n       * the modal/popover containing\n       * the datetime is opened.\n       */\n      this.selectedButton = 'time';\n      this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n    };\n    /**\n     * If the datetime is presented in an\n     * overlay, the datetime and overlay\n     * should be appropriately sized.\n     * These classes provide default sizing values\n     * that developers can customize.\n     * The goal is to provide an overlay that is\n     * reasonably sized with a datetime that\n     * fills the entire container.\n     */\n    this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n      const { overlayEl } = this;\n      if (!overlayEl) {\n        return;\n      }\n      if (overlayEl.tagName === 'ION-POPOVER') {\n        /**\n         * When the presentation on datetime changes,\n         * we need to wait for the component to re-render\n         * otherwise the computed width/height of the\n         * popover content will be wrong, causing\n         * the popover to not align with the trigger element.\n         */\n        if (needsPresentationChange) {\n          await this.waitForDatetimeChanges();\n        }\n        /**\n         * We pass the trigger button element\n         * so that the popover aligns with the individual\n         * button that was clicked, not the component container.\n         */\n        overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n            ionShadowTarget: triggerEl,\n          } }));\n      }\n      else {\n        overlayEl.present();\n      }\n    };\n  }\n  async componentWillLoad() {\n    const { datetime } = this;\n    if (!datetime) {\n      printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n      return;\n    }\n    const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n    if (!datetimeEl) {\n      printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n      return;\n    }\n    /**\n     * Since the datetime can be used in any context (overlays, accordion, etc)\n     * we track when it is visible to determine when it is active.\n     * This informs which button is highlighted as well as the\n     * aria-expanded state.\n     */\n    const io = new IntersectionObserver((entries) => {\n      const ev = entries[0];\n      this.datetimeActive = ev.isIntersecting;\n    }, {\n      threshold: 0.01,\n    });\n    io.observe(datetimeEl);\n    /**\n     * Get a reference to any modal/popover\n     * the datetime is being used in so we can\n     * correctly size it when it is presented.\n     */\n    const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n    /**\n     * The .ion-datetime-button-overlay class contains\n     * styles that allow any modal/popover to be\n     * sized according to the dimensions of the datetime.\n     * If developers want a smaller/larger overlay all they need\n     * to do is change the width/height of the datetime.\n     * Additionally, this lets us avoid having to set\n     * explicit widths on each variant of datetime.\n     */\n    if (overlayEl) {\n      overlayEl.classList.add('ion-datetime-button-overlay');\n    }\n    componentOnReady(datetimeEl, () => {\n      const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n      /**\n       * Set the initial display\n       * in the rendered buttons.\n       *\n       * From there, we need to listen\n       * for ionChange to be emitted\n       * from datetime so we know when\n       * to re-render the displayed\n       * text in the buttons.\n       */\n      this.setDateTimeText();\n      addEventListener(datetimeEl, 'ionChange', this.setDateTimeText);\n      /**\n       * Configure the initial selected button\n       * in the event that the datetime is displayed\n       * without clicking one of the datetime buttons.\n       * For example, a datetime could be expanded\n       * in an accordion. In this case users only\n       * need to click the accordion header to show\n       * the datetime.\n       */\n      switch (datetimePresentation) {\n        case 'date-time':\n        case 'date':\n        case 'month-year':\n        case 'month':\n        case 'year':\n          this.selectedButton = 'date';\n          break;\n        case 'time-date':\n        case 'time':\n          this.selectedButton = 'time';\n          break;\n      }\n    });\n  }\n  render() {\n    const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n    const mode = getIonMode(this);\n    return (h(Host, { class: createColorClasses(color, {\n        [mode]: true,\n        [`${selectedButton}-active`]: datetimeActive,\n        ['datetime-button-disabled']: disabled,\n      }) }, dateText && (h(\"button\", { class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", null))), timeText && (h(\"button\", { class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", null)))));\n  }\n  get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n  ios: iosDatetimeButtonCss,\n  md: mdDatetimeButtonCss\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"]},"metadata":{},"sourceType":"module"}