{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchema, twoUsers, createSchemaArticles } from '../utils/test-json1-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestJson1ExtensionPage = /*#__PURE__*/(() => {\n  class TestJson1ExtensionPage {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          const res = yield _this.loadJSON('assets/jsonFiles/test-json1.json');\n          _this.dataArticles = JSON.parse(res);\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // initialize the connection\n\n          let db;\n\n          if ((yield _this2._sqlite.isConnection(\"testJSON1\")).result) {\n            db = yield _this2._sqlite.retrieveConnection(\"testJSON1\");\n          } else db = yield _this2._sqlite.createConnection(\"testJSON1\", false, \"no-encryption\", 1); // check if the databases exist \n          // and delete it for multiple successive tests\n\n\n          yield deleteDatabase(db); // open db testNew\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema, false);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable(); // set the synchronization date\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // add first users in db\n\n          ret = yield db.execute(twoUsers);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute 2 users failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Jones\" || ret.values[1].name !== \"Jeep\") {\n            return Promise.reject(new Error(\"Query 1 users failed\"));\n          }\n\n          ret = yield db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+34712345678\" || ret.values[1][\"json_extract(users.phone, '$.cell')\"] !== \"+33912345678\") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          console.log(`ret.values ${JSON.stringify(ret.values)}`);\n          console.log(`ret.values[0]  ${ret.values[0][\"json_extract(users.phone, '$.cell')\"]}}`);\n          console.log(`ret.values[1]  ${ret.values[1][\"json_extract(users.phone, '$.cell')\"]}`);\n          ret = yield db.query(`SELECT DISTINCT users.name FROM users,\n            json_each(users.phone) WHERE json_each.value LIKE '+33%';`);\n\n          if (ret.values.length !== 1 || ret.values[0].name !== \"Jeep\") {\n            return Promise.reject(new Error(\"Query Users where Phone starts with +33 failed\"));\n          }\n\n          ret = yield db.run(`UPDATE users SET phone = json_replace(users.phone, '$.cell', \"+33612567834\") WHERE users.name = \"Jeep\";`, []);\n          /*,\n                json_replace(users.phone, '$.cell', \"+33612567834\");*/\n\n          console.log(`ret ${JSON.stringify(ret)}`);\n          ret = yield db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users WHERE users.name = 'Jeep';\");\n\n          if (ret.values.length !== 1 || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+33612567834\") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          ret = yield db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+34712345678\" || ret.values[1][\"json_extract(users.phone, '$.cell')\"] !== \"+33612567834\") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          result = yield _this2._sqlite.isConnection(\"testJSON1\");\n\n          if (result.result) {\n            // close the connection testJSON1\n            yield _this2._sqlite.closeConnection(\"testJSON1\");\n          } // test Articles\n          // initialize the connection\n\n\n          let db1;\n\n          if ((yield _this2._sqlite.isConnection(\"Articles\")).result) {\n            db1 = yield _this2._sqlite.retrieveConnection(\"Articles\");\n          } else db1 = yield _this2._sqlite.createConnection(\"Articles\", false, \"no-encryption\", 1);\n\n          console.log(`after create Connection Articles`); // check if the databases exist \n          // and delete it for multiple successive tests\n\n          yield deleteDatabase(db1); // open db testNew\n\n          yield db1.open(); // create tables in db1\n\n          ret = yield db1.execute(createSchemaArticles, false);\n          console.log(`createSchemaArticles ret.changes.changes ${ret.changes.changes}`);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchemaArticles failed\"));\n          } // create synchronization table \n\n\n          ret = yield db1.createSyncTable();\n          console.log(`createSyncTable JSON.stringify(ret) ${JSON.stringify(ret)}`); // set the synchronization date\n\n          const syncDate1 = \"2021-08-12T08:30:25.000Z\";\n          yield db1.setSyncDate(syncDate1);\n          console.log(`after setSyncDate `);\n\n          for (const data of _this2.dataArticles.articles) {\n            let stmt1 = `INSERT INTO articles (data) VALUES (json('${JSON.stringify(data)}'));`;\n            console.log(`stmt1 ${stmt1}`);\n            ret = yield db1.run(stmt1, []);\n            console.log(`run ret.changes.changes ${ret.changes.changes}`);\n          }\n\n          ret = yield db1.query(\"SELECT json_extract(articles.data, '$.title') FROM articles;\");\n          let stmt = \"SELECT json_extract(articles.data, '$.title') AS title \";\n          stmt += \"FROM articles ORDER BY json_extract(articles.data, '$.title') LIMIT 5;\";\n          ret = yield db1.query(stmt);\n\n          if (ret.values.length !== 5 || ret.values[0].title.substring(0, 17) !== \"A Tour of Tagging\" || ret.values[1].title.substring(0, 17) !== \"Alternative Redis\" || ret.values[2].title.substring(0, 17) !== \"Building the SQLi\" || ret.values[3].title.substring(0, 17) !== \"Connor Thomas Lei\" || ret.values[4].title.substring(0, 17) !== \"Extending SQLite \") {\n            return Promise.reject(new Error(\"Query User's cell phone failed\"));\n          }\n\n          result = yield _this2._sqlite.isConnection(\"Articles\");\n\n          if (result.result) {\n            // close the connection tArticles\n            yield _this2._sqlite.closeConnection(\"Articles\");\n          }\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n    loadJSON(jsonFileName) {\n      return _asyncToGenerator(function* () {\n        return new Promise((resolve, reject) => {\n          var xobj = new XMLHttpRequest();\n          xobj.overrideMimeType(\"application/json\");\n          xobj.open('GET', jsonFileName, true);\n\n          xobj.onerror = () => {\n            reject(`LoadJSON: failed`);\n          };\n\n          xobj.onreadystatechange = function () {\n            if (xobj.readyState == 4 && xobj.status == 200) {\n              // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n              resolve(xobj.responseText);\n            }\n          };\n\n          xobj.send(null);\n        });\n      })();\n    }\n\n  }\n\n  TestJson1ExtensionPage.ɵfac = function TestJson1ExtensionPage_Factory(t) {\n    return new (t || TestJson1ExtensionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestJson1ExtensionPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestJson1ExtensionPage,\n    selectors: [[\"app-testjson1extension\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestJson1ExtensionPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson1Extension \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson1Extension\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMWV4dGVuc2lvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0anNvbjFleHRlbnNpb24ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"]\n  });\n  return TestJson1ExtensionPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testjson1extension/testjson1extension.page.ts"],"names":["createSchema","twoUsers","createSchemaArticles","deleteDatabase","Dialog","i0","i1","i2","i3","TestJson1ExtensionPage","constructor","_sqlite","_detailService","detail","initPlugin","ngAfterViewInit","showAlert","message","alert","title","res","loadJSON","dataArticles","JSON","parse","runTest","document","querySelector","classList","remove","console","log","err","result","echo","db","isConnection","retrieveConnection","createConnection","open","ret","execute","changes","Promise","reject","Error","createSyncTable","syncDate","setSyncDate","query","values","length","name","stringify","run","closeConnection","db1","syncDate1","data","articles","stmt1","stmt","substring","resolve","jsonFileName","xobj","XMLHttpRequest","overrideMimeType","onerror","onreadystatechange","readyState","status","responseText","send","ɵfac","TestJson1ExtensionPage_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestJson1ExtensionPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,QAAvB,EAAiCC,oBAAjC,QAA6D,2BAA7D;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,+BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,+BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,WAAaC,sBAAb;AAAO,QAAMA,sBAAN,CAA6B;AAChCC,IAAAA,WAAW,CAACC,OAAD,EAAUC,cAAV,EAA0B;AACjC,WAAKD,OAAL,GAAeA,OAAf;AACA,WAAKC,cAAL,GAAsBA,cAAtB;AACA,WAAKC,MAAL,GAAc,KAAd;AACA,WAAKC,UAAL,GAAkB,KAAlB;AACH;;AACKC,IAAAA,eAAe,GAAG;AAAA;;AAAA;AACpB,cAAMC,SAAS;AAAA,uCAAG,WAAOC,OAAP,EAAmB;AACjC,kBAAMb,MAAM,CAACc,KAAP,CAAa;AACfC,cAAAA,KAAK,EAAE,cADQ;AAEfF,cAAAA,OAAO,EAAEA;AAFM,aAAb,CAAN;AAIH,WALc;;AAAA,0BAATD,SAAS;AAAA;AAAA;AAAA,WAAf;;AAMA,YAAI;AACA,gBAAMI,GAAG,SAAS,KAAI,CAACC,QAAL,CAAc,kCAAd,CAAlB;AACA,UAAA,KAAI,CAACC,YAAL,GAAoBC,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAApB;AACA,gBAAM,KAAI,CAACK,OAAL,EAAN;AACAC,UAAAA,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,EAA0CC,SAA1C,CACKC,MADL,CACY,SADZ;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH,SAPD,CAQA,OAAOC,GAAP,EAAY;AACRN,UAAAA,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,EAA0CC,SAA1C,CACKC,MADL,CACY,SADZ;AAEAC,UAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBC,GAAG,CAACf,OAAQ,EAA9C;AACA,gBAAMD,SAAS,CAACgB,GAAG,CAACf,OAAL,CAAf;AACH;AApBmB;AAqBvB;;AACKQ,IAAAA,OAAO,GAAG;AAAA;;AAAA;AACZ,YAAI;AACA,cAAIQ,MAAM,SAAS,MAAI,CAACtB,OAAL,CAAauB,IAAb,CAAkB,aAAlB,CAAnB,CADA,CAEA;;AACA,cAAIC,EAAJ;;AACA,cAAI,OAAO,MAAI,CAACxB,OAAL,CAAayB,YAAb,CAA0B,WAA1B,CAAP,EAA+CH,MAAnD,EAA2D;AACvDE,YAAAA,EAAE,SAAS,MAAI,CAACxB,OAAL,CAAa0B,kBAAb,CAAgC,WAAhC,CAAX;AACH,WAFD,MAIIF,EAAE,SAAS,MAAI,CAACxB,OAAL,CACN2B,gBADM,CACW,WADX,EACwB,KADxB,EAC+B,eAD/B,EACgD,CADhD,CAAX,CARJ,CAUA;AACA;;;AACA,gBAAMnC,cAAc,CAACgC,EAAD,CAApB,CAZA,CAaA;;AACA,gBAAMA,EAAE,CAACI,IAAH,EAAN,CAdA,CAeA;;AACA,cAAIC,GAAG,SAASL,EAAE,CAACM,OAAH,CAAWzC,YAAX,EAAyB,KAAzB,CAAhB;;AACA,cAAIwC,GAAG,CAACE,OAAJ,CAAYA,OAAZ,GAAsB,CAA1B,EAA6B;AACzB,mBAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,6BAAV,CAAf,CAAP;AACH,WAnBD,CAoBA;;;AACAL,UAAAA,GAAG,SAASL,EAAE,CAACW,eAAH,EAAZ,CArBA,CAsBA;;AACA,gBAAMC,QAAQ,GAAG,0BAAjB;AACA,gBAAMZ,EAAE,CAACa,WAAH,CAAeD,QAAf,CAAN,CAxBA,CAyBA;;AACAP,UAAAA,GAAG,SAASL,EAAE,CAACM,OAAH,CAAWxC,QAAX,CAAZ;;AACA,cAAIuC,GAAG,CAACE,OAAJ,CAAYA,OAAZ,KAAwB,CAA5B,EAA+B;AAC3B,mBAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,wBAAV,CAAf,CAAP;AACH,WA7BD,CA8BA;;;AACAL,UAAAA,GAAG,SAASL,EAAE,CAACc,KAAH,CAAS,sBAAT,CAAZ;;AACA,cAAIT,GAAG,CAACU,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IAA2BX,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,OAAlD,IACAZ,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,MAD3B,EACmC;AAC/B,mBAAOT,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,sBAAV,CAAf,CAAP;AACH;;AACDL,UAAAA,GAAG,SAASL,EAAE,CAACc,KAAH,CAAS,wDAAT,CAAZ;;AACA,cAAIT,GAAG,CAACU,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IACGX,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc,qCAAd,MAAyD,cAD5D,IAEGV,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc,qCAAd,MAAyD,cAFhE,EAEgF;AAC5E,mBAAOP,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACH;;AACDf,UAAAA,OAAO,CAACC,GAAR,CAAa,cAAaR,IAAI,CAAC8B,SAAL,CAAeb,GAAG,CAACU,MAAnB,CAA2B,EAArD;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBS,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc,qCAAd,CAAqD,GAAnF;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAa,kBAAiBS,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc,qCAAd,CAAqD,EAAnF;AACAV,UAAAA,GAAG,SAASL,EAAE,CAACc,KAAH,CAAU;AAClC,sEADwB,CAAZ;;AAEA,cAAIT,GAAG,CAACU,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IAA2BX,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAcE,IAAd,KAAuB,MAAtD,EAA8D;AAC1D,mBAAOT,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gDAAV,CAAf,CAAP;AACH;;AACDL,UAAAA,GAAG,SAASL,EAAE,CAACmB,GAAH,CAAQ,yGAAR,EAAkH,EAAlH,CAAZ;AACA;AACZ;;AACYxB,UAAAA,OAAO,CAACC,GAAR,CAAa,OAAMR,IAAI,CAAC8B,SAAL,CAAeb,GAAf,CAAoB,EAAvC;AACAA,UAAAA,GAAG,SAASL,EAAE,CAACc,KAAH,CAAS,kFAAT,CAAZ;;AACA,cAAIT,GAAG,CAACU,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IACGX,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc,qCAAd,MAAyD,cADhE,EACgF;AAC5E,mBAAOP,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACH;;AACDL,UAAAA,GAAG,SAASL,EAAE,CAACc,KAAH,CAAS,wDAAT,CAAZ;;AACA,cAAIT,GAAG,CAACU,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IACGX,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc,qCAAd,MAAyD,cAD5D,IAEGV,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc,qCAAd,MAAyD,cAFhE,EAEgF;AAC5E,mBAAOP,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACH;;AACDZ,UAAAA,MAAM,SAAS,MAAI,CAACtB,OAAL,CAAayB,YAAb,CAA0B,WAA1B,CAAf;;AACA,cAAIH,MAAM,CAACA,MAAX,EAAmB;AACf;AACA,kBAAM,MAAI,CAACtB,OAAL,CAAa4C,eAAb,CAA6B,WAA7B,CAAN;AACH,WArED,CAsEA;AACA;;;AACA,cAAIC,GAAJ;;AACA,cAAI,OAAO,MAAI,CAAC7C,OAAL,CAAayB,YAAb,CAA0B,UAA1B,CAAP,EAA8CH,MAAlD,EAA0D;AACtDuB,YAAAA,GAAG,SAAS,MAAI,CAAC7C,OAAL,CAAa0B,kBAAb,CAAgC,UAAhC,CAAZ;AACH,WAFD,MAIImB,GAAG,SAAS,MAAI,CAAC7C,OAAL,CACP2B,gBADO,CACU,UADV,EACsB,KADtB,EAC6B,eAD7B,EAC8C,CAD9C,CAAZ;;AAEJR,UAAAA,OAAO,CAACC,GAAR,CAAa,kCAAb,EA/EA,CAgFA;AACA;;AACA,gBAAM5B,cAAc,CAACqD,GAAD,CAApB,CAlFA,CAmFA;;AACA,gBAAMA,GAAG,CAACjB,IAAJ,EAAN,CApFA,CAqFA;;AACAC,UAAAA,GAAG,SAASgB,GAAG,CAACf,OAAJ,CAAYvC,oBAAZ,EAAkC,KAAlC,CAAZ;AACA4B,UAAAA,OAAO,CAACC,GAAR,CAAa,4CAA2CS,GAAG,CAACE,OAAJ,CAAYA,OAAQ,EAA5E;;AACA,cAAIF,GAAG,CAACE,OAAJ,CAAYA,OAAZ,GAAsB,CAA1B,EAA6B;AACzB,mBAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,qCAAV,CAAf,CAAP;AACH,WA1FD,CA2FA;;;AACAL,UAAAA,GAAG,SAASgB,GAAG,CAACV,eAAJ,EAAZ;AACAhB,UAAAA,OAAO,CAACC,GAAR,CAAa,uCAAsCR,IAAI,CAAC8B,SAAL,CAAeb,GAAf,CAAoB,EAAvE,EA7FA,CA8FA;;AACA,gBAAMiB,SAAS,GAAG,0BAAlB;AACA,gBAAMD,GAAG,CAACR,WAAJ,CAAgBS,SAAhB,CAAN;AACA3B,UAAAA,OAAO,CAACC,GAAR,CAAa,oBAAb;;AACA,eAAK,MAAM2B,IAAX,IAAmB,MAAI,CAACpC,YAAL,CAAkBqC,QAArC,EAA+C;AAC3C,gBAAIC,KAAK,GAAI,6CAA4CrC,IAAI,CAAC8B,SAAL,CAAeK,IAAf,CAAqB,MAA9E;AACA5B,YAAAA,OAAO,CAACC,GAAR,CAAa,SAAQ6B,KAAM,EAA3B;AACApB,YAAAA,GAAG,SAASgB,GAAG,CAACF,GAAJ,CAAQM,KAAR,EAAe,EAAf,CAAZ;AACA9B,YAAAA,OAAO,CAACC,GAAR,CAAa,2BAA0BS,GAAG,CAACE,OAAJ,CAAYA,OAAQ,EAA3D;AACH;;AACDF,UAAAA,GAAG,SAASgB,GAAG,CAACP,KAAJ,CAAU,8DAAV,CAAZ;AACA,cAAIY,IAAI,GAAG,yDAAX;AACAA,UAAAA,IAAI,IAAI,wEAAR;AACArB,UAAAA,GAAG,SAASgB,GAAG,CAACP,KAAJ,CAAUY,IAAV,CAAZ;;AACA,cAAIrB,GAAG,CAACU,MAAJ,CAAWC,MAAX,KAAsB,CAAtB,IACGX,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc/B,KAAd,CAAoB2C,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,MAAyC,mBAD5C,IAEGtB,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc/B,KAAd,CAAoB2C,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,MAAyC,mBAF5C,IAGGtB,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc/B,KAAd,CAAoB2C,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,MAAyC,mBAH5C,IAIGtB,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc/B,KAAd,CAAoB2C,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,MAAyC,mBAJ5C,IAKGtB,GAAG,CAACU,MAAJ,CAAW,CAAX,EAAc/B,KAAd,CAAoB2C,SAApB,CAA8B,CAA9B,EAAiC,EAAjC,MAAyC,mBALhD,EAKqE;AACjE,mBAAOnB,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,gCAAV,CAAf,CAAP;AACH;;AACDZ,UAAAA,MAAM,SAAS,MAAI,CAACtB,OAAL,CAAayB,YAAb,CAA0B,UAA1B,CAAf;;AACA,cAAIH,MAAM,CAACA,MAAX,EAAmB;AACf;AACA,kBAAM,MAAI,CAACtB,OAAL,CAAa4C,eAAb,CAA6B,UAA7B,CAAN;AACH;;AACD,iBAAOZ,OAAO,CAACoB,OAAR,EAAP;AACH,SA1HD,CA2HA,OAAO/B,GAAP,EAAY;AACR,iBAAOW,OAAO,CAACC,MAAR,CAAeZ,GAAf,CAAP;AACH;AA9HW;AA+Hf;;AACKX,IAAAA,QAAQ,CAAC2C,YAAD,EAAe;AAAA;AACzB,eAAO,IAAIrB,OAAJ,CAAY,CAACoB,OAAD,EAAUnB,MAAV,KAAqB;AACpC,cAAIqB,IAAI,GAAG,IAAIC,cAAJ,EAAX;AACAD,UAAAA,IAAI,CAACE,gBAAL,CAAsB,kBAAtB;AACAF,UAAAA,IAAI,CAAC1B,IAAL,CAAU,KAAV,EAAiByB,YAAjB,EAA+B,IAA/B;;AACAC,UAAAA,IAAI,CAACG,OAAL,GAAe,MAAM;AACjBxB,YAAAA,MAAM,CAAE,kBAAF,CAAN;AACH,WAFD;;AAGAqB,UAAAA,IAAI,CAACI,kBAAL,GAA0B,YAAY;AAClC,gBAAIJ,IAAI,CAACK,UAAL,IAAmB,CAAnB,IAAwBL,IAAI,CAACM,MAAL,IAAe,GAA3C,EAAgD;AAC5C;AACAR,cAAAA,OAAO,CAACE,IAAI,CAACO,YAAN,CAAP;AACH;AACJ,WALD;;AAMAP,UAAAA,IAAI,CAACQ,IAAL,CAAU,IAAV;AACH,SAdM,CAAP;AADyB;AAgB5B;;AA7K+B;;AA+KpChE,EAAAA,sBAAsB,CAACiE,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,WAAO,KAAKA,CAAC,IAAInE,sBAAV,EAAkCJ,EAAE,CAACwE,iBAAH,CAAqBvE,EAAE,CAACwE,aAAxB,CAAlC,EAA0EzE,EAAE,CAACwE,iBAAH,CAAqBtE,EAAE,CAACwE,aAAxB,CAA1E,CAAP;AAA2H,GAAtM;;AACAtE,EAAAA,sBAAsB,CAACuE,IAAvB,GAA8B,aAAc3E,EAAE,CAAC4E,iBAAH,CAAqB;AAAEC,IAAAA,IAAI,EAAEzE,sBAAR;AAAgC0E,IAAAA,SAAS,EAAE,CAAC,CAAC,wBAAD,CAAD,CAA3C;AAAyEC,IAAAA,KAAK,EAAE,EAAhF;AAAoFC,IAAAA,IAAI,EAAE,CAA1F;AAA6FC,IAAAA,MAAM,EAAE,CAAC,CAAC,CAAD,EAAI,aAAJ,CAAD,EAAqB,CAAC,MAAD,EAAS,OAAT,CAArB,EAAwC,CAAC,aAAD,EAAgB,GAAhB,CAAxC,EAA8D,CAAC,CAAD,EAAI,YAAJ,CAA9D,EAAiF,CAAC,UAAD,EAAa,UAAb,CAAjF,EAA2G,CAAC,MAAD,EAAS,OAAT,CAA3G,EAA8H,CAAC,IAAD,EAAO,WAAP,CAA9H,EAAmJ,CAAC,CAAD,EAAI,aAAJ,CAAnJ,EAAuK,CAAC,CAAD,EAAI,gBAAJ,EAAsB,SAAtB,CAAvK,EAAyM,CAAC,CAAD,EAAI,gBAAJ,EAAsB,SAAtB,CAAzM,CAArG;AAAiVC,IAAAA,QAAQ,EAAE,SAASC,+BAAT,CAAyCC,EAAzC,EAA6CC,GAA7C,EAAkD;AAAE,UAAID,EAAE,GAAG,CAAT,EAAY;AACpdpF,QAAAA,EAAE,CAACsF,cAAH,CAAkB,CAAlB,EAAqB,YAArB,EAAmC,CAAnC,EAAsC,CAAtC,EAAyC,aAAzC,EAAwD,CAAxD,EAA2D,aAA3D,EAA0E,CAA1E;AACAtF,QAAAA,EAAE,CAACuF,SAAH,CAAa,CAAb,EAAgB,iBAAhB,EAAmC,CAAnC;AACAvF,QAAAA,EAAE,CAACwF,YAAH;AACAxF,QAAAA,EAAE,CAACsF,cAAH,CAAkB,CAAlB,EAAqB,WAArB;AACAtF,QAAAA,EAAE,CAACyF,MAAH,CAAU,CAAV,EAAa,sBAAb;AACAzF,QAAAA,EAAE,CAACwF,YAAH;AACAxF,QAAAA,EAAE,CAACsF,cAAH,CAAkB,CAAlB,EAAqB,aAArB,EAAoC,CAApC,EAAuC,CAAvC,EAA0C,YAA1C,EAAwD,CAAxD,EAA2D,CAA3D,EAA8D,aAA9D,EAA6E,CAA7E,EAAgF,WAAhF,EAA6F,CAA7F;AACAtF,QAAAA,EAAE,CAACyF,MAAH,CAAU,EAAV,EAAc,oBAAd;AACAzF,QAAAA,EAAE,CAACwF,YAAH;AACAxF,QAAAA,EAAE,CAACsF,cAAH,CAAkB,EAAlB,EAAsB,KAAtB,EAA6B,CAA7B,EAAgC,EAAhC,EAAoC,UAApC,EAAgD,CAAhD,EAAmD,EAAnD,EAAuD,gBAAvD;AACAtF,QAAAA,EAAE,CAACyF,MAAH,CAAU,EAAV,EAAc,mCAAd;AACAzF,QAAAA,EAAE,CAACwF,YAAH;AACAxF,QAAAA,EAAE,CAACsF,cAAH,CAAkB,EAAlB,EAAsB,GAAtB,EAA2B,CAA3B;AACAtF,QAAAA,EAAE,CAACyF,MAAH,CAAU,EAAV,EAAc,mCAAd;AACAzF,QAAAA,EAAE,CAACwF,YAAH;AACAxF,QAAAA,EAAE,CAACsF,cAAH,CAAkB,EAAlB,EAAsB,GAAtB,EAA2B,CAA3B;AACAtF,QAAAA,EAAE,CAACyF,MAAH,CAAU,EAAV,EAAc,2BAAd;AACAzF,QAAAA,EAAE,CAACwF,YAAH;AACH;;AAAC,UAAIJ,EAAE,GAAG,CAAT,EAAY;AACVpF,QAAAA,EAAE,CAAC0F,UAAH,CAAc,aAAd,EAA6B,IAA7B;AACA1F,QAAAA,EAAE,CAAC2F,SAAH,CAAa,CAAb;AACA3F,QAAAA,EAAE,CAAC0F,UAAH,CAAc,YAAd,EAA4B,IAA5B;AACH;AAAE,KAvB0D;AAuBxDE,IAAAA,UAAU,EAAE,CAACzF,EAAE,CAAC0F,SAAJ,EAAe1F,EAAE,CAAC2F,UAAlB,EAA8B3F,EAAE,CAAC4F,UAAjC,EAA6C5F,EAAE,CAAC6F,aAAhD,EAA+D7F,EAAE,CAAC8F,qBAAlE,EAAyF9F,EAAE,CAAC+F,QAA5F,EAAsG/F,EAAE,CAACgG,UAAzG,EAAqHhG,EAAE,CAACiG,OAAxH,EAAiIjG,EAAE,CAACkG,YAApI,CAvB4C;AAuBuGC,IAAAA,MAAM,EAAE,CAAC,ogDAAD;AAvB/G,GAArB,CAA5C;AAhLA,SAAalG,sBAAb;AAAA","sourcesContent":["import { createSchema, twoUsers, createSchemaArticles } from '../utils/test-json1-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class TestJson1ExtensionPage {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.detail = false;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            const res = await this.loadJSON('assets/jsonFiles/test-json1.json');\n            this.dataArticles = JSON.parse(res);\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // initialize the connection\n            let db;\n            if ((await this._sqlite.isConnection(\"testJSON1\")).result) {\n                db = await this._sqlite.retrieveConnection(\"testJSON1\");\n            }\n            else\n                db = await this._sqlite\n                    .createConnection(\"testJSON1\", false, \"no-encryption\", 1);\n            // check if the databases exist \n            // and delete it for multiple successive tests\n            await deleteDatabase(db);\n            // open db testNew\n            await db.open();\n            // create tables in db\n            let ret = await db.execute(createSchema, false);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSchema failed\"));\n            }\n            // create synchronization table \n            ret = await db.createSyncTable();\n            // set the synchronization date\n            const syncDate = \"2020-11-25T08:30:25.000Z\";\n            await db.setSyncDate(syncDate);\n            // add first users in db\n            ret = await db.execute(twoUsers);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute 2 users failed\"));\n            }\n            // select all users in db\n            ret = await db.query(\"SELECT * FROM users;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Jones\" ||\n                ret.values[1].name !== \"Jeep\") {\n                return Promise.reject(new Error(\"Query 1 users failed\"));\n            }\n            ret = await db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users;\");\n            if (ret.values.length !== 2\n                || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+34712345678\"\n                || ret.values[1][\"json_extract(users.phone, '$.cell')\"] !== \"+33912345678\") {\n                return Promise.reject(new Error(\"Query User's cell phone failed\"));\n            }\n            console.log(`ret.values ${JSON.stringify(ret.values)}`);\n            console.log(`ret.values[0]  ${ret.values[0][\"json_extract(users.phone, '$.cell')\"]}}`);\n            console.log(`ret.values[1]  ${ret.values[1][\"json_extract(users.phone, '$.cell')\"]}`);\n            ret = await db.query(`SELECT DISTINCT users.name FROM users,\n            json_each(users.phone) WHERE json_each.value LIKE '+33%';`);\n            if (ret.values.length !== 1 || ret.values[0].name !== \"Jeep\") {\n                return Promise.reject(new Error(\"Query Users where Phone starts with +33 failed\"));\n            }\n            ret = await db.run(`UPDATE users SET phone = json_replace(users.phone, '$.cell', \"+33612567834\") WHERE users.name = \"Jeep\";`, []);\n            /*,\n                  json_replace(users.phone, '$.cell', \"+33612567834\");*/\n            console.log(`ret ${JSON.stringify(ret)}`);\n            ret = await db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users WHERE users.name = 'Jeep';\");\n            if (ret.values.length !== 1\n                || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+33612567834\") {\n                return Promise.reject(new Error(\"Query User's cell phone failed\"));\n            }\n            ret = await db.query(\"SELECT json_extract(users.phone, '$.cell') FROM users;\");\n            if (ret.values.length !== 2\n                || ret.values[0][\"json_extract(users.phone, '$.cell')\"] !== \"+34712345678\"\n                || ret.values[1][\"json_extract(users.phone, '$.cell')\"] !== \"+33612567834\") {\n                return Promise.reject(new Error(\"Query User's cell phone failed\"));\n            }\n            result = await this._sqlite.isConnection(\"testJSON1\");\n            if (result.result) {\n                // close the connection testJSON1\n                await this._sqlite.closeConnection(\"testJSON1\");\n            }\n            // test Articles\n            // initialize the connection\n            let db1;\n            if ((await this._sqlite.isConnection(\"Articles\")).result) {\n                db1 = await this._sqlite.retrieveConnection(\"Articles\");\n            }\n            else\n                db1 = await this._sqlite\n                    .createConnection(\"Articles\", false, \"no-encryption\", 1);\n            console.log(`after create Connection Articles`);\n            // check if the databases exist \n            // and delete it for multiple successive tests\n            await deleteDatabase(db1);\n            // open db testNew\n            await db1.open();\n            // create tables in db1\n            ret = await db1.execute(createSchemaArticles, false);\n            console.log(`createSchemaArticles ret.changes.changes ${ret.changes.changes}`);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSchemaArticles failed\"));\n            }\n            // create synchronization table \n            ret = await db1.createSyncTable();\n            console.log(`createSyncTable JSON.stringify(ret) ${JSON.stringify(ret)}`);\n            // set the synchronization date\n            const syncDate1 = \"2021-08-12T08:30:25.000Z\";\n            await db1.setSyncDate(syncDate1);\n            console.log(`after setSyncDate `);\n            for (const data of this.dataArticles.articles) {\n                let stmt1 = `INSERT INTO articles (data) VALUES (json('${JSON.stringify(data)}'));`;\n                console.log(`stmt1 ${stmt1}`);\n                ret = await db1.run(stmt1, []);\n                console.log(`run ret.changes.changes ${ret.changes.changes}`);\n            }\n            ret = await db1.query(\"SELECT json_extract(articles.data, '$.title') FROM articles;\");\n            let stmt = \"SELECT json_extract(articles.data, '$.title') AS title \";\n            stmt += \"FROM articles ORDER BY json_extract(articles.data, '$.title') LIMIT 5;\";\n            ret = await db1.query(stmt);\n            if (ret.values.length !== 5\n                || ret.values[0].title.substring(0, 17) !== \"A Tour of Tagging\"\n                || ret.values[1].title.substring(0, 17) !== \"Alternative Redis\"\n                || ret.values[2].title.substring(0, 17) !== \"Building the SQLi\"\n                || ret.values[3].title.substring(0, 17) !== \"Connor Thomas Lei\"\n                || ret.values[4].title.substring(0, 17) !== \"Extending SQLite \") {\n                return Promise.reject(new Error(\"Query User's cell phone failed\"));\n            }\n            result = await this._sqlite.isConnection(\"Articles\");\n            if (result.result) {\n                // close the connection tArticles\n                await this._sqlite.closeConnection(\"Articles\");\n            }\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async loadJSON(jsonFileName) {\n        return new Promise((resolve, reject) => {\n            var xobj = new XMLHttpRequest();\n            xobj.overrideMimeType(\"application/json\");\n            xobj.open('GET', jsonFileName, true);\n            xobj.onerror = () => {\n                reject(`LoadJSON: failed`);\n            };\n            xobj.onreadystatechange = function () {\n                if (xobj.readyState == 4 && xobj.status == 200) {\n                    // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n                    resolve(xobj.responseText);\n                }\n            };\n            xobj.send(null);\n        });\n    }\n}\nTestJson1ExtensionPage.ɵfac = function TestJson1ExtensionPage_Factory(t) { return new (t || TestJson1ExtensionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestJson1ExtensionPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestJson1ExtensionPage, selectors: [[\"app-testjson1extension\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestJson1ExtensionPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson1Extension \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson1Extension\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMWV4dGVuc2lvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0anNvbjFleHRlbnNpb24ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}