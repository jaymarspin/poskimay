{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchema, twoUsers, twoTests } from '../utils/no-encryption-utils';\nimport { createSchemaContacts, setContacts } from '../utils/encrypted-set-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let TestIssue111Page = /*#__PURE__*/(() => {\n  class TestIssue111Page {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.detail = false;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\");\n          var retDict = yield _this2._sqlite.retrieveAllConnections();\n          /*      if(retDict.size > 0) {\n                  for (var conn in retDict) {\n                    console.log(`connection: ${conn}`)\n                  }\n                }\n          */\n          // initialize the connection\n\n          let db;\n          let isConn = yield _this2._sqlite.isConnection(\"testIssue111.db\");\n\n          if (isConn.result) {\n            db = yield _this2._sqlite.retrieveConnection(\"testIssue111.db\");\n          } else db = yield _this2._sqlite.createConnection(\"testIssue111.db\", false, \"no-encryption\", 1);\n\n          let db1;\n\n          if ((yield _this2._sqlite.isConnection(\"testSetIssue111.db\")).result) {\n            db1 = yield _this2._sqlite.retrieveConnection(\"testSetIssue111.db\");\n          } else db1 = yield _this2._sqlite.createConnection(\"testSetIssue111.db\", true, \"secret\", 1); // check if the databases exist \n          // and delete it for multiple successive tests\n\n\n          yield deleteDatabase(db);\n          yield deleteDatabase(db1); // open db testNew\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchema, false);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchema failed\"));\n          } // create synchronization table \n\n\n          ret = yield db.createSyncTable(); // set the synchronization date\n\n          const syncDate = \"2020-11-25T08:30:25.000Z\";\n          yield db.setSyncDate(syncDate); // add two users in db\n\n          ret = yield db.execute(twoUsers, false);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute 2 users failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 users failed\"));\n          } // open db testSet\n\n\n          yield db1.open(); // create tables in db1\n\n          ret = yield db1.execute(createSchemaContacts, false); // load setContacts in db1\n\n          ret = yield db1.executeSet(setContacts, false);\n\n          if (ret.changes.changes !== 5) {\n            return Promise.reject(new Error(\"ExecuteSet 5 contacts failed\"));\n          } // select users where company is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 users where company is null failed\"));\n          } // add one user with statement and values              \n\n\n          let sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n          let values = [\"Simpson\", \"Simpson@example.com\", 69];\n          ret = yield db.run(sqlcmd, values, false);\n\n          if (ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n          } // add one user with statement              \n\n\n          sqlcmd = `INSERT INTO users (name,email,age) VALUES ` + `(\"Brown\",\"Brown@example.com\",15)`;\n          ret = yield db.run(sqlcmd, [], false);\n\n          if (ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run 1 users with statement failed\"));\n          } // add some tests issue#56\n\n\n          ret = yield db.execute(twoTests, false);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute issue#56 failed\"));\n          } // add one test\n\n\n          sqlcmd = \"INSERT INTO test56 (name) VALUES (?)\";\n          let vals = [\"test 3 added insert \"];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 3) {\n            return Promise.reject(new Error(\"Run 1 test issue#56 failed\"));\n          } // add a null test\n\n\n          vals = [null];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 4) {\n            return Promise.reject(new Error(\"Run 1 test null issue#56 failed\"));\n          } // add a another null test\n\n\n          vals = [];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 5) {\n            return Promise.reject(new Error(\"Run another null test issue#56 failed\"));\n          } // add test [null, 'test2']\n\n\n          sqlcmd = \"INSERT INTO test56 (name,name1) VALUES (?,?)\";\n          vals = [null, 'test2'];\n          ret = yield db.run(sqlcmd, vals, false);\n\n          if (ret.changes.changes !== 1 || ret.changes.lastId !== 6) {\n            return Promise.reject(new Error(\"Run [null, 'test2'] test issue#56 failed\"));\n          }\n\n          ret = yield _this2._sqlite.checkConnectionsConsistency();\n          var retDict = yield _this2._sqlite.retrieveAllConnections();\n          /*      for (var conn in retDict) {\n                  console.log(`connection: ${conn}`)\n                }\n          */\n\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestIssue111Page.ɵfac = function TestIssue111Page_Factory(t) {\n    return new (t || TestIssue111Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  TestIssue111Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestIssue111Page,\n    selectors: [[\"app-testissue111\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestIssue111Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestIssue111 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestIssue111\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rpc3N1ZTExMS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0aXNzdWUxMTEucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"]\n  });\n  return TestIssue111Page;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testissue111/testissue111.page.ts"],"names":["createSchema","twoUsers","twoTests","createSchemaContacts","setContacts","deleteDatabase","Dialog","i0","i1","i2","i3","TestIssue111Page","constructor","_sqlite","_detailService","detail","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","retDict","retrieveAllConnections","db","isConn","isConnection","retrieveConnection","createConnection","db1","open","ret","execute","changes","Promise","reject","Error","createSyncTable","syncDate","setSyncDate","query","values","length","name","executeSet","sqlcmd","run","lastId","vals","checkConnectionsConsistency","resolve","ɵfac","TestIssue111Page_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestIssue111Page_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { createSchema, twoUsers, twoTests } from '../utils/no-encryption-utils';\nimport { createSchemaContacts, setContacts } from '../utils/encrypted-set-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class TestIssue111Page {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.detail = false;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            var retDict = await this._sqlite.retrieveAllConnections();\n            /*      if(retDict.size > 0) {\n                    for (var conn in retDict) {\n                      console.log(`connection: ${conn}`)\n                    }\n                  }\n            */\n            // initialize the connection\n            let db;\n            let isConn = await this._sqlite.isConnection(\"testIssue111.db\");\n            if (isConn.result) {\n                db = await this._sqlite.retrieveConnection(\"testIssue111.db\");\n            }\n            else\n                db = await this._sqlite\n                    .createConnection(\"testIssue111.db\", false, \"no-encryption\", 1);\n            let db1;\n            if ((await this._sqlite.isConnection(\"testSetIssue111.db\")).result) {\n                db1 = await this._sqlite.retrieveConnection(\"testSetIssue111.db\");\n            }\n            else\n                db1 = await this._sqlite\n                    .createConnection(\"testSetIssue111.db\", true, \"secret\", 1);\n            // check if the databases exist \n            // and delete it for multiple successive tests\n            await deleteDatabase(db);\n            await deleteDatabase(db1);\n            // open db testNew\n            await db.open();\n            // create tables in db\n            let ret = await db.execute(createSchema, false);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSchema failed\"));\n            }\n            // create synchronization table \n            ret = await db.createSyncTable();\n            // set the synchronization date\n            const syncDate = \"2020-11-25T08:30:25.000Z\";\n            await db.setSyncDate(syncDate);\n            // add two users in db\n            ret = await db.execute(twoUsers, false);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute 2 users failed\"));\n            }\n            // select all users in db\n            ret = await db.query(\"SELECT * FROM users;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 2 users failed\"));\n            }\n            // open db testSet\n            await db1.open();\n            // create tables in db1\n            ret = await db1.execute(createSchemaContacts, false);\n            // load setContacts in db1\n            ret = await db1.executeSet(setContacts, false);\n            if (ret.changes.changes !== 5) {\n                return Promise.reject(new Error(\"ExecuteSet 5 contacts failed\"));\n            }\n            // select users where company is NULL in db\n            ret = await db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 2 users where company is null failed\"));\n            }\n            // add one user with statement and values              \n            let sqlcmd = \"INSERT INTO users (name,email,age) VALUES (?,?,?)\";\n            let values = [\"Simpson\", \"Simpson@example.com\", 69];\n            ret = await db.run(sqlcmd, values, false);\n            if (ret.changes.lastId !== 3) {\n                return Promise.reject(new Error(\"Run 1 users with statement & values failed\"));\n            }\n            // add one user with statement              \n            sqlcmd = `INSERT INTO users (name,email,age) VALUES ` +\n                `(\"Brown\",\"Brown@example.com\",15)`;\n            ret = await db.run(sqlcmd, [], false);\n            if (ret.changes.lastId !== 4) {\n                return Promise.reject(new Error(\"Run 1 users with statement failed\"));\n            }\n            // add some tests issue#56\n            ret = await db.execute(twoTests, false);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute issue#56 failed\"));\n            }\n            // add one test\n            sqlcmd = \"INSERT INTO test56 (name) VALUES (?)\";\n            let vals = [\"test 3 added insert \"];\n            ret = await db.run(sqlcmd, vals, false);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 3) {\n                return Promise.reject(new Error(\"Run 1 test issue#56 failed\"));\n            }\n            // add a null test\n            vals = [null];\n            ret = await db.run(sqlcmd, vals, false);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 4) {\n                return Promise.reject(new Error(\"Run 1 test null issue#56 failed\"));\n            }\n            // add a another null test\n            vals = [];\n            ret = await db.run(sqlcmd, vals, false);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 5) {\n                return Promise.reject(new Error(\"Run another null test issue#56 failed\"));\n            }\n            // add test [null, 'test2']\n            sqlcmd = \"INSERT INTO test56 (name,name1) VALUES (?,?)\";\n            vals = [null, 'test2'];\n            ret = await db.run(sqlcmd, vals, false);\n            if (ret.changes.changes !== 1 || ret.changes.lastId !== 6) {\n                return Promise.reject(new Error(\"Run [null, 'test2'] test issue#56 failed\"));\n            }\n            ret = await this._sqlite.checkConnectionsConsistency();\n            var retDict = await this._sqlite.retrieveAllConnections();\n            /*      for (var conn in retDict) {\n                    console.log(`connection: ${conn}`)\n                  }\n            */\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTestIssue111Page.ɵfac = function TestIssue111Page_Factory(t) { return new (t || TestIssue111Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestIssue111Page.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestIssue111Page, selectors: [[\"app-testissue111\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestIssue111Page_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestIssue111 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestIssue111\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rpc3N1ZTExMS5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0aXNzdWUxMTEucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}