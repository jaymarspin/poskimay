{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { schemaVersion1, dataVersion1, schemaVersion2, dataVersion2 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport let Testjson164Page = /*#__PURE__*/(() => {\n  class Testjson164Page {\n    constructor(_sqlite, _detailService) {\n      this._sqlite = _sqlite;\n      this._detailService = _detailService;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(\"$$$ runTest failed\");\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Import Full Version 1 Schema Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(schemaVersion1));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(schemaVersion1));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\")); // ************************************************\n          // Create Sync Table and Date\n          // ************************************************\n          // create the connection to the database\n\n          let db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open();\n          console.log(\">>>> create SYNC Table and Date\"); // create synchronization table \n\n          result = yield db.createSyncTable();\n          console.log(`>>>> createSyncTable result ${JSON.stringify(result)}`);\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          let syncDate = yield db.getSyncDate();\n          console.log(`>>>> getSyncTable syncDate ${syncDate}`);\n          if (syncDate.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // close the connection\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\");\n          console.log(\"closeConnection Version 1\"); // ************************************************\n          // Import Partial Version 1 Table data Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataVersion1));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // partial import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataVersion1));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n          db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 1);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open(); // select all tables in db\n\n          let query = \"SELECT name FROM sqlite_master WHERE \";\n          query += \"type='table' AND name NOT LIKE 'sync_table' \";\n          query += \"AND name NOT LIKE '_temp_%' \";\n          query += \"AND name NOT LIKE 'sqlite_%' \";\n          query += \"ORDER BY rootpage DESC;\";\n          let ret = yield db.query(query);\n\n          if (ret.values.length !== 3 || ret.values[0].name !== \"images\" || ret.values[1].name !== \"messages\" || ret.values[2].name !== \"users\") {\n            return Promise.reject(new Error(\"Query Tables Version1 failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\"); // ************************************************\n          // Import Full Version 2 Schema Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(schemaVersion2));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // full import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(schemaVersion2));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n          db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 2);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open(); // create synchronization table \n\n          result = yield db.createSyncTable();\n          if (result.changes.changes < 0) return Promise.reject(new Error(\"CreateSyncTable failed\"));\n          syncDate = yield db.getSyncDate();\n          if (syncDate.length === 0) return Promise.reject(new Error(\"GetSyncDate failed\")); // close the connection\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\");\n          console.log(\"closeConnection Version 2\"); // ************************************************\n          // Import Partial Version 2 Table data Issue#164\n          // ************************************************\n          // test Json object validity\n\n          result = yield _this2._sqlite.isJsonValid(JSON.stringify(dataVersion2));\n          console.log(`>>>> after isJsonValid ${result.result}`);\n\n          if (!result.result) {\n            return Promise.reject(new Error(\"IsJson failed\"));\n          } // partial import\n\n\n          result = yield _this2._sqlite.importFromJson(JSON.stringify(dataVersion2));\n          if (result.changes.changes === -1) return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n          db = yield _this2._sqlite.createConnection(\"db-issue164\", false, \"no-encryption\", 2);\n          if (db === null) return Promise.reject(new Error(\"CreateConnection db-issue164 failed\")); // open db testNew\n\n          yield db.open(); // select all tables in db\n\n          query = \"SELECT name FROM sqlite_master WHERE \";\n          query += \"type='table' AND name NOT LIKE 'sync_table' \";\n          query += \"AND name NOT LIKE '_temp_%' \";\n          query += \"AND name NOT LIKE 'sqlite_%' \";\n          query += \"ORDER BY rootpage DESC;\";\n          ret = yield db.query(query);\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"messages\" || ret.values[1].name !== \"users\") {\n            return Promise.reject(new Error(\"Query Tables Version2 failed\"));\n          } // close the connection\n\n\n          yield _this2._sqlite.closeConnection(\"db-issue164\");\n        } catch (err) {\n          yield _this2._sqlite.closeConnection(\"db-issue164\");\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  Testjson164Page.ɵfac = function Testjson164Page_Factory(t) {\n    return new (t || Testjson164Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService));\n  };\n\n  Testjson164Page.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Testjson164Page,\n    selectors: [[\"app-testjson164\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function Testjson164Page_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#164 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#164\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMTY0LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rqc29uMTY0LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"]\n  });\n  return Testjson164Page;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testjson164/testjson164.page.ts"],"names":["schemaVersion1","dataVersion1","schemaVersion2","dataVersion2","Dialog","i0","i1","i2","i3","Testjson164Page","constructor","_sqlite","_detailService","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","isJsonValid","JSON","stringify","Promise","reject","Error","importFromJson","changes","db","createConnection","open","createSyncTable","syncDate","getSyncDate","length","closeConnection","query","ret","values","name","ɵfac","Testjson164Page_Factory","t","ɵɵdirectiveInject","SQLiteService","DetailService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","Testjson164Page_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { schemaVersion1, dataVersion1, schemaVersion2, dataVersion2 } from '../utils/import-json-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"../../services/detail.service\";\nimport * as i3 from \"@ionic/angular\";\nexport class Testjson164Page {\n    constructor(_sqlite, _detailService) {\n        this._sqlite = _sqlite;\n        this._detailService = _detailService;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(\"$$$ runTest failed\");\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // ************************************************\n            // Import Full Version 1 Schema Issue#164\n            // ************************************************\n            // test Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(schemaVersion1));\n            console.log(`>>>> after isJsonValid ${result.result}`);\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJson failed\"));\n            }\n            // full import\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(schemaVersion1));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n            // ************************************************\n            // Create Sync Table and Date\n            // ************************************************\n            // create the connection to the database\n            let db = await this._sqlite\n                .createConnection(\"db-issue164\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection db-issue164 failed\"));\n            // open db testNew\n            await db.open();\n            console.log(\">>>> create SYNC Table and Date\");\n            // create synchronization table \n            result = await db.createSyncTable();\n            console.log(`>>>> createSyncTable result ${JSON.stringify(result)}`);\n            if (result.changes.changes < 0)\n                return Promise.reject(new Error(\"CreateSyncTable failed\"));\n            let syncDate = await db.getSyncDate();\n            console.log(`>>>> getSyncTable syncDate ${syncDate}`);\n            if (syncDate.length === 0)\n                return Promise.reject(new Error(\"GetSyncDate failed\"));\n            // close the connection\n            await this._sqlite.closeConnection(\"db-issue164\");\n            console.log(\"closeConnection Version 1\");\n            // ************************************************\n            // Import Partial Version 1 Table data Issue#164\n            // ************************************************\n            // test Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(dataVersion1));\n            console.log(`>>>> after isJsonValid ${result.result}`);\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJson failed\"));\n            }\n            // partial import\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(dataVersion1));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n            db = await this._sqlite\n                .createConnection(\"db-issue164\", false, \"no-encryption\", 1);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection db-issue164 failed\"));\n            // open db testNew\n            await db.open();\n            // select all tables in db\n            let query = \"SELECT name FROM sqlite_master WHERE \";\n            query += \"type='table' AND name NOT LIKE 'sync_table' \";\n            query += \"AND name NOT LIKE '_temp_%' \";\n            query += \"AND name NOT LIKE 'sqlite_%' \";\n            query += \"ORDER BY rootpage DESC;\";\n            let ret = await db.query(query);\n            if (ret.values.length !== 3 || ret.values[0].name !== \"images\" ||\n                ret.values[1].name !== \"messages\" ||\n                ret.values[2].name !== \"users\") {\n                return Promise.reject(new Error(\"Query Tables Version1 failed\"));\n            }\n            // close the connection\n            await this._sqlite.closeConnection(\"db-issue164\");\n            // ************************************************\n            // Import Full Version 2 Schema Issue#164\n            // ************************************************\n            // test Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(schemaVersion2));\n            console.log(`>>>> after isJsonValid ${result.result}`);\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJson failed\"));\n            }\n            // full import\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(schemaVersion2));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n            db = await this._sqlite\n                .createConnection(\"db-issue164\", false, \"no-encryption\", 2);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection db-issue164 failed\"));\n            // open db testNew\n            await db.open();\n            // create synchronization table \n            result = await db.createSyncTable();\n            if (result.changes.changes < 0)\n                return Promise.reject(new Error(\"CreateSyncTable failed\"));\n            syncDate = await db.getSyncDate();\n            if (syncDate.length === 0)\n                return Promise.reject(new Error(\"GetSyncDate failed\"));\n            // close the connection\n            await this._sqlite.closeConnection(\"db-issue164\");\n            console.log(\"closeConnection Version 2\");\n            // ************************************************\n            // Import Partial Version 2 Table data Issue#164\n            // ************************************************\n            // test Json object validity\n            result = await this._sqlite\n                .isJsonValid(JSON.stringify(dataVersion2));\n            console.log(`>>>> after isJsonValid ${result.result}`);\n            if (!result.result) {\n                return Promise.reject(new Error(\"IsJson failed\"));\n            }\n            // partial import\n            result = await this._sqlite\n                .importFromJson(JSON.stringify(dataVersion2));\n            if (result.changes.changes === -1)\n                return Promise.reject(new Error(\"ImportFromJson 'full' failed\"));\n            db = await this._sqlite\n                .createConnection(\"db-issue164\", false, \"no-encryption\", 2);\n            if (db === null)\n                return Promise.reject(new Error(\"CreateConnection db-issue164 failed\"));\n            // open db testNew\n            await db.open();\n            // select all tables in db\n            query = \"SELECT name FROM sqlite_master WHERE \";\n            query += \"type='table' AND name NOT LIKE 'sync_table' \";\n            query += \"AND name NOT LIKE '_temp_%' \";\n            query += \"AND name NOT LIKE 'sqlite_%' \";\n            query += \"ORDER BY rootpage DESC;\";\n            ret = await db.query(query);\n            if (ret.values.length !== 2 || ret.values[0].name !== \"messages\" ||\n                ret.values[1].name !== \"users\") {\n                return Promise.reject(new Error(\"Query Tables Version2 failed\"));\n            }\n            // close the connection\n            await this._sqlite.closeConnection(\"db-issue164\");\n        }\n        catch (err) {\n            await this._sqlite.closeConnection(\"db-issue164\");\n            return Promise.reject(err);\n        }\n    }\n}\nTestjson164Page.ɵfac = function Testjson164Page_Factory(t) { return new (t || Testjson164Page)(i0.ɵɵdirectiveInject(i1.SQLiteService), i0.ɵɵdirectiveInject(i2.DetailService)); };\nTestjson164Page.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: Testjson164Page, selectors: [[\"app-testjson164\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function Testjson164Page_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" TestJson#164 \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"TestJson#164\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonBackButton, i3.IonBackButtonDelegate, i3.IonTitle, i3.IonContent, i3.IonCard, i3.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Rqc29uMTY0LnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGtCQUFBO0VBRUEsa0JBQUE7RUFDQSxPQUFBO0VBQ0EsUUFBQTtFQUNBLE9BQUE7QUFBRjs7QUFHQTtFQUNFLGVBQUE7RUFDQSxpQkFBQTtBQUFGOztBQUlBO0VBQ0UsYUFBQTtBQURGOztBQUdBO0VBQ0UsZUFBQTtBQUFGOztBQUVBO0VBQ0UsZUFBQTtBQUNGOztBQUNBO0VBQ0UseUNBQUE7RUFDQSw4QkFBQTtBQUVGIiwiZmlsZSI6InRlc3Rqc29uMTY0LnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIiNjb250YWluZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG5cbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgdG9wOiA1JTtcbn1cblxuI2NvbnRhaW5lciBzdHJvbmcge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyNnB4O1xufVxuXG5cbi5kaXNwbGF5IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbi5jYXJkLXNxbGl0ZSB7XG4gIHBhZGRpbmc6IDAgMXJlbTtcbn1cbmlvbi1jYXJkIHAge1xuICBmb250LXNpemU6IDFyZW07XG59XG5pb24tY2FyZCB7XG4gIC0tYmFja2dyb3VuZDogdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IpO1xuICAtLWNvbG9yOiB2YXIoLS1pb24tdGV4dC1jb2xvcik7XG59XG4iXX0= */\"] });\n"]},"metadata":{},"sourceType":"module"}