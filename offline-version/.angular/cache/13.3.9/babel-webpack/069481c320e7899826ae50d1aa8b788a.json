{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Capacitor } from '@capacitor/core';\nimport { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nimport * as i0 from \"@angular/core\";\nexport let SQLiteService = /*#__PURE__*/(() => {\n  class SQLiteService {\n    constructor() {\n      this.isService = false;\n      this.native = false;\n    }\n    /**\n     * Plugin Initialization\n     */\n\n\n    initializePlugin() {\n      return new Promise(resolve => {\n        this.platform = Capacitor.getPlatform();\n        if (this.platform === 'ios' || this.platform === 'android') this.native = true;\n        this.sqlitePlugin = CapacitorSQLite;\n        this.sqlite = new SQLiteConnection(this.sqlitePlugin);\n        this.isService = true;\n        resolve(true);\n      });\n    }\n    /**\n     * Echo a value\n     * @param value\n     */\n\n\n    echo(value) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this.sqlite != null) {\n          try {\n            const ret = yield _this.sqlite.echo(value);\n            return Promise.resolve(ret);\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(\"no connection open\"));\n        }\n      })();\n    }\n\n    isSecretStored() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this2.native) {\n          return Promise.reject(new Error(`Not implemented for ${_this2.platform} platform`));\n        }\n\n        if (_this2.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this2.sqlite.isSecretStored());\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n\n    setEncryptionSecret(passphrase) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this3.native) {\n          return Promise.reject(new Error(`Not implemented for ${_this3.platform} platform`));\n        }\n\n        if (_this3.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this3.sqlite.setEncryptionSecret(passphrase));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n\n    changeEncryptionSecret(passphrase, oldpassphrase) {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this4.native) {\n          return Promise.reject(new Error(`Not implemented for ${_this4.platform} platform`));\n        }\n\n        if (_this4.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this4.sqlite.changeEncryptionSecret(passphrase, oldpassphrase));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * addUpgradeStatement\n     * @param database\n     * @param fromVersion\n     * @param toVersion\n     * @param statement\n     * @param set\n     */\n\n\n    addUpgradeStatement(database, fromVersion, toVersion, statement, set) {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this5.sqlite != null) {\n          try {\n            yield _this5.sqlite.addUpgradeStatement(database, fromVersion, toVersion, statement, set ? set : []);\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n      })();\n    }\n    /**\n     * get a non-conformed database path\n     * @param path\n     * @param database\n     * @returns Promise<capNCDatabasePathResult>\n     * @since 3.3.3-1\n     */\n\n\n    getNCDatabasePath(folderPath, database) {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this6.sqlite != null) {\n          try {\n            const res = yield _this6.sqlite.getNCDatabasePath(folderPath, database);\n            return Promise.resolve(res);\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n      })();\n    }\n    /**\n     * Create a non-conformed database connection\n     * @param databasePath\n     * @param version\n     * @returns Promise<SQLiteDBConnection>\n     * @since 3.3.3-1\n     */\n\n\n    createNCConnection(databasePath, version) {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this7.sqlite != null) {\n          try {\n            const db = yield _this7.sqlite.createNCConnection(databasePath, version);\n\n            if (db != null) {\n              return Promise.resolve(db);\n            } else {\n              return Promise.reject(new Error(`no db returned is null`));\n            }\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${databasePath}`));\n        }\n      })();\n    }\n    /**\n     * Close a non-conformed database connection\n     * @param databasePath\n     * @returns Promise<void>\n     * @since 3.3.3-1\n     */\n\n\n    closeNCConnection(databasePath) {\n      var _this8 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this8.sqlite != null) {\n          try {\n            yield _this8.sqlite.closeNCConnection(databasePath);\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${databasePath}`));\n        }\n      })();\n    }\n    /**\n     * Check if a non-conformed databaseconnection exists\n     * @param databasePath\n     * @returns Promise<capSQLiteResult>\n     * @since 3.3.3-1\n     */\n\n\n    isNCConnection(databasePath) {\n      var _this9 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this9.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this9.sqlite.isNCConnection(databasePath));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Retrieve a non-conformed database connection\n     * @param databasePath\n     * @returns Promise<SQLiteDBConnection>\n     * @since 3.3.3-1\n     */\n\n\n    retrieveNCConnection(databasePath) {\n      var _this10 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this10.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this10.sqlite.retrieveNCConnection(databasePath));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${databasePath}`));\n        }\n      })();\n    }\n    /**\n     * Check if a non conformed database exists\n     * @param databasePath\n     * @returns Promise<capSQLiteResult>\n     * @since 3.3.3-1\n     */\n\n\n    isNCDatabase(databasePath) {\n      var _this11 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this11.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this11.sqlite.isNCDatabase(databasePath));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Create a connection to a database\n     * @param database\n     * @param encrypted\n     * @param mode\n     * @param version\n     */\n\n\n    createConnection(database, encrypted, mode, version) {\n      var _this12 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this12.sqlite != null) {\n          try {\n            /*                if(encrypted) {\n                                if(this.native) {\n                                    const isSet = await this.sqlite.isSecretStored()\n                                    if(!isSet.result) {\n                                        return Promise.reject(new Error(`no secret phrase registered`));\n                                    }\n                                }\n                            }\n            */\n            const db = yield _this12.sqlite.createConnection(database, encrypted, mode, version);\n\n            if (db != null) {\n              return Promise.resolve(db);\n            } else {\n              return Promise.reject(new Error(`no db returned is null`));\n            }\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n      })();\n    }\n    /**\n     * Close a connection to a database\n     * @param database\n     */\n\n\n    closeConnection(database) {\n      var _this13 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this13.sqlite != null) {\n          try {\n            yield _this13.sqlite.closeConnection(database);\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n      })();\n    }\n    /**\n     * Retrieve an existing connection to a database\n     * @param database\n     */\n\n\n    retrieveConnection(database) {\n      var _this14 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this14.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this14.sqlite.retrieveConnection(database));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n      })();\n    }\n    /**\n     * Retrieve all existing connections\n     */\n\n\n    retrieveAllConnections() {\n      var _this15 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this15.sqlite != null) {\n          try {\n            const myConns = yield _this15.sqlite.retrieveAllConnections();\n            /*                let keys = [...myConns.keys()];\n                            keys.forEach( (value) => {\n                                console.log(\"Connection: \" + value);\n                            });\n            */\n\n            return Promise.resolve(myConns);\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Close all existing connections\n     */\n\n\n    closeAllConnections() {\n      var _this16 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this16.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this16.sqlite.closeAllConnections());\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Check if connection exists\n     * @param database\n     */\n\n\n    isConnection(database) {\n      var _this17 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this17.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this17.sqlite.isConnection(database));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Check Connections Consistency\n     * @returns\n     */\n\n\n    checkConnectionsConsistency() {\n      var _this18 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this18.sqlite != null) {\n          try {\n            const res = yield _this18.sqlite.checkConnectionsConsistency();\n            return Promise.resolve(res);\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Check if database exists\n     * @param database\n     */\n\n\n    isDatabase(database) {\n      var _this19 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this19.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this19.sqlite.isDatabase(database));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Get the list of databases\n     */\n\n\n    getDatabaseList() {\n      var _this20 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this20.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this20.sqlite.getDatabaseList());\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Get Migratable databases List\n     */\n\n\n    getMigratableDbList(folderPath) {\n      var _this21 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this21.native) {\n          return Promise.reject(new Error(`Not implemented for ${_this21.platform} platform`));\n        }\n\n        if (_this21.sqlite != null) {\n          try {\n            if (!folderPath || folderPath.length === 0) {\n              return Promise.reject(new Error(`You must provide a folder path`));\n            }\n\n            return Promise.resolve(yield _this21.sqlite.getMigratableDbList(folderPath));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Add \"SQLite\" suffix to old database's names\n     */\n\n\n    addSQLiteSuffix(folderPath, dbNameList) {\n      var _this22 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this22.native) {\n          return Promise.reject(new Error(`Not implemented for ${_this22.platform} platform`));\n        }\n\n        if (_this22.sqlite != null) {\n          try {\n            const path = folderPath ? folderPath : \"default\";\n            const dbList = dbNameList ? dbNameList : [];\n            return Promise.resolve(yield _this22.sqlite.addSQLiteSuffix(path, dbList));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Delete old databases\n     */\n\n\n    deleteOldDatabases(folderPath, dbNameList) {\n      var _this23 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this23.native) {\n          return Promise.reject(new Error(`Not implemented for ${_this23.platform} platform`));\n        }\n\n        if (_this23.sqlite != null) {\n          try {\n            const path = folderPath ? folderPath : \"default\";\n            const dbList = dbNameList ? dbNameList : [];\n            return Promise.resolve(yield _this23.sqlite.deleteOldDatabases(path, dbList));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Moves database files from a given folder to the database location where\n     * they can be read, it also changes their suffix.\n     * @param folderPath the folder to move from\n     * @param dbNameList the files to move, empty list means all the files\n     * @returns\n     */\n\n\n    moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n      var _this24 = this;\n\n      return _asyncToGenerator(function* () {\n        if (!_this24.native) {\n          throw new Error(`Not implemented for ${_this24.platform} platform`);\n        }\n\n        if (_this24.sqlite != null) {\n          const path = folderPath ? folderPath : \"default\";\n          const dbList = dbNameList ? dbNameList : [];\n          return _this24.sqlite.moveDatabasesAndAddSuffix(path, dbList);\n        } else {\n          throw new Error(`can't move the databases`);\n        }\n      })();\n    }\n    /**\n     * Import from a Json Object\n     * @param jsonstring\n     */\n\n\n    importFromJson(jsonstring) {\n      var _this25 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this25.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this25.sqlite.importFromJson(jsonstring));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Is Json Object Valid\n     * @param jsonstring Check the validity of a given Json Object\n     */\n\n\n    isJsonValid(jsonstring) {\n      var _this26 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this26.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this26.sqlite.isJsonValid(jsonstring));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Copy databases from public/assets/databases folder to application databases folder\n     */\n\n\n    copyFromAssets(overwrite) {\n      var _this27 = this;\n\n      return _asyncToGenerator(function* () {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        console.log(`&&&& mOverwrite ${mOverwrite}`);\n\n        if (_this27.sqlite != null) {\n          try {\n            return Promise.resolve(yield _this27.sqlite.copyFromAssets(mOverwrite));\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Initialize the Web store\n     */\n\n\n    initWebStore() {\n      var _this28 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this28.platform !== 'web') {\n          return Promise.reject(new Error(`not implemented for this platform: ${_this28.platform}`));\n        }\n\n        if (_this28.sqlite != null) {\n          try {\n            yield _this28.sqlite.initWebStore();\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open`));\n        }\n      })();\n    }\n    /**\n     * Save a database to store\n     * @param database\n     */\n\n\n    saveToStore(database) {\n      var _this29 = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this29.platform !== 'web') {\n          return Promise.reject(new Error(`not implemented for this platform: ${_this29.platform}`));\n        }\n\n        if (_this29.sqlite != null) {\n          try {\n            yield _this29.sqlite.saveToStore(database);\n            return Promise.resolve();\n          } catch (err) {\n            return Promise.reject(new Error(err));\n          }\n        } else {\n          return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n      })();\n    }\n\n  }\n\n  SQLiteService.ɵfac = function SQLiteService_Factory(t) {\n    return new (t || SQLiteService)();\n  };\n\n  SQLiteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SQLiteService,\n    factory: SQLiteService.ɵfac\n  });\n  return SQLiteService;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/services/sqlite.service.ts"],"names":["Capacitor","CapacitorSQLite","SQLiteConnection","i0","SQLiteService","constructor","isService","native","initializePlugin","Promise","resolve","platform","getPlatform","sqlitePlugin","sqlite","echo","value","ret","err","reject","Error","isSecretStored","setEncryptionSecret","passphrase","changeEncryptionSecret","oldpassphrase","addUpgradeStatement","database","fromVersion","toVersion","statement","set","getNCDatabasePath","folderPath","res","createNCConnection","databasePath","version","db","closeNCConnection","isNCConnection","retrieveNCConnection","isNCDatabase","createConnection","encrypted","mode","closeConnection","retrieveConnection","retrieveAllConnections","myConns","closeAllConnections","isConnection","checkConnectionsConsistency","isDatabase","getDatabaseList","getMigratableDbList","length","addSQLiteSuffix","dbNameList","path","dbList","deleteOldDatabases","moveDatabasesAndAddSuffix","importFromJson","jsonstring","isJsonValid","copyFromAssets","overwrite","mOverwrite","console","log","initWebStore","saveToStore","ɵfac","SQLiteService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":"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","sourcesContent":["import { Capacitor } from '@capacitor/core';\nimport { CapacitorSQLite, SQLiteConnection } from '@capacitor-community/sqlite';\nimport * as i0 from \"@angular/core\";\nexport class SQLiteService {\n    constructor() {\n        this.isService = false;\n        this.native = false;\n    }\n    /**\n     * Plugin Initialization\n     */\n    initializePlugin() {\n        return new Promise(resolve => {\n            this.platform = Capacitor.getPlatform();\n            if (this.platform === 'ios' || this.platform === 'android')\n                this.native = true;\n            this.sqlitePlugin = CapacitorSQLite;\n            this.sqlite = new SQLiteConnection(this.sqlitePlugin);\n            this.isService = true;\n            resolve(true);\n        });\n    }\n    /**\n     * Echo a value\n     * @param value\n     */\n    async echo(value) {\n        if (this.sqlite != null) {\n            try {\n                const ret = await this.sqlite.echo(value);\n                return Promise.resolve(ret);\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(\"no connection open\"));\n        }\n    }\n    async isSecretStored() {\n        if (!this.native) {\n            return Promise.reject(new Error(`Not implemented for ${this.platform} platform`));\n        }\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.isSecretStored());\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    async setEncryptionSecret(passphrase) {\n        if (!this.native) {\n            return Promise.reject(new Error(`Not implemented for ${this.platform} platform`));\n        }\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.setEncryptionSecret(passphrase));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    async changeEncryptionSecret(passphrase, oldpassphrase) {\n        if (!this.native) {\n            return Promise.reject(new Error(`Not implemented for ${this.platform} platform`));\n        }\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.changeEncryptionSecret(passphrase, oldpassphrase));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * addUpgradeStatement\n     * @param database\n     * @param fromVersion\n     * @param toVersion\n     * @param statement\n     * @param set\n     */\n    async addUpgradeStatement(database, fromVersion, toVersion, statement, set) {\n        if (this.sqlite != null) {\n            try {\n                await this.sqlite.addUpgradeStatement(database, fromVersion, toVersion, statement, set ? set : []);\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n    }\n    /**\n     * get a non-conformed database path\n     * @param path\n     * @param database\n     * @returns Promise<capNCDatabasePathResult>\n     * @since 3.3.3-1\n     */\n    async getNCDatabasePath(folderPath, database) {\n        if (this.sqlite != null) {\n            try {\n                const res = await this.sqlite.getNCDatabasePath(folderPath, database);\n                return Promise.resolve(res);\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n    }\n    /**\n     * Create a non-conformed database connection\n     * @param databasePath\n     * @param version\n     * @returns Promise<SQLiteDBConnection>\n     * @since 3.3.3-1\n     */\n    async createNCConnection(databasePath, version) {\n        if (this.sqlite != null) {\n            try {\n                const db = await this.sqlite.createNCConnection(databasePath, version);\n                if (db != null) {\n                    return Promise.resolve(db);\n                }\n                else {\n                    return Promise.reject(new Error(`no db returned is null`));\n                }\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${databasePath}`));\n        }\n    }\n    /**\n     * Close a non-conformed database connection\n     * @param databasePath\n     * @returns Promise<void>\n     * @since 3.3.3-1\n     */\n    async closeNCConnection(databasePath) {\n        if (this.sqlite != null) {\n            try {\n                await this.sqlite.closeNCConnection(databasePath);\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${databasePath}`));\n        }\n    }\n    /**\n     * Check if a non-conformed databaseconnection exists\n     * @param databasePath\n     * @returns Promise<capSQLiteResult>\n     * @since 3.3.3-1\n     */\n    async isNCConnection(databasePath) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.isNCConnection(databasePath));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Retrieve a non-conformed database connection\n     * @param databasePath\n     * @returns Promise<SQLiteDBConnection>\n     * @since 3.3.3-1\n     */\n    async retrieveNCConnection(databasePath) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.retrieveNCConnection(databasePath));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${databasePath}`));\n        }\n    }\n    /**\n     * Check if a non conformed database exists\n     * @param databasePath\n     * @returns Promise<capSQLiteResult>\n     * @since 3.3.3-1\n     */\n    async isNCDatabase(databasePath) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.isNCDatabase(databasePath));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Create a connection to a database\n     * @param database\n     * @param encrypted\n     * @param mode\n     * @param version\n     */\n    async createConnection(database, encrypted, mode, version) {\n        if (this.sqlite != null) {\n            try {\n                /*                if(encrypted) {\n                                    if(this.native) {\n                                        const isSet = await this.sqlite.isSecretStored()\n                                        if(!isSet.result) {\n                                            return Promise.reject(new Error(`no secret phrase registered`));\n                                        }\n                                    }\n                                }\n                */\n                const db = await this.sqlite.createConnection(database, encrypted, mode, version);\n                if (db != null) {\n                    return Promise.resolve(db);\n                }\n                else {\n                    return Promise.reject(new Error(`no db returned is null`));\n                }\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n    }\n    /**\n     * Close a connection to a database\n     * @param database\n     */\n    async closeConnection(database) {\n        if (this.sqlite != null) {\n            try {\n                await this.sqlite.closeConnection(database);\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n    }\n    /**\n     * Retrieve an existing connection to a database\n     * @param database\n     */\n    async retrieveConnection(database) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.retrieveConnection(database));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n    }\n    /**\n     * Retrieve all existing connections\n     */\n    async retrieveAllConnections() {\n        if (this.sqlite != null) {\n            try {\n                const myConns = await this.sqlite.retrieveAllConnections();\n                /*                let keys = [...myConns.keys()];\n                                keys.forEach( (value) => {\n                                    console.log(\"Connection: \" + value);\n                                });\n                */\n                return Promise.resolve(myConns);\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Close all existing connections\n     */\n    async closeAllConnections() {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.closeAllConnections());\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Check if connection exists\n     * @param database\n     */\n    async isConnection(database) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.isConnection(database));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Check Connections Consistency\n     * @returns\n     */\n    async checkConnectionsConsistency() {\n        if (this.sqlite != null) {\n            try {\n                const res = await this.sqlite.checkConnectionsConsistency();\n                return Promise.resolve(res);\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Check if database exists\n     * @param database\n     */\n    async isDatabase(database) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.isDatabase(database));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Get the list of databases\n     */\n    async getDatabaseList() {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.getDatabaseList());\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Get Migratable databases List\n     */\n    async getMigratableDbList(folderPath) {\n        if (!this.native) {\n            return Promise.reject(new Error(`Not implemented for ${this.platform} platform`));\n        }\n        if (this.sqlite != null) {\n            try {\n                if (!folderPath || folderPath.length === 0) {\n                    return Promise.reject(new Error(`You must provide a folder path`));\n                }\n                return Promise.resolve(await this.sqlite.getMigratableDbList(folderPath));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Add \"SQLite\" suffix to old database's names\n     */\n    async addSQLiteSuffix(folderPath, dbNameList) {\n        if (!this.native) {\n            return Promise.reject(new Error(`Not implemented for ${this.platform} platform`));\n        }\n        if (this.sqlite != null) {\n            try {\n                const path = folderPath ? folderPath : \"default\";\n                const dbList = dbNameList ? dbNameList : [];\n                return Promise.resolve(await this.sqlite.addSQLiteSuffix(path, dbList));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Delete old databases\n     */\n    async deleteOldDatabases(folderPath, dbNameList) {\n        if (!this.native) {\n            return Promise.reject(new Error(`Not implemented for ${this.platform} platform`));\n        }\n        if (this.sqlite != null) {\n            try {\n                const path = folderPath ? folderPath : \"default\";\n                const dbList = dbNameList ? dbNameList : [];\n                return Promise.resolve(await this.sqlite.deleteOldDatabases(path, dbList));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Moves database files from a given folder to the database location where\n     * they can be read, it also changes their suffix.\n     * @param folderPath the folder to move from\n     * @param dbNameList the files to move, empty list means all the files\n     * @returns\n     */\n    async moveDatabasesAndAddSuffix(folderPath, dbNameList) {\n        if (!this.native) {\n            throw new Error(`Not implemented for ${this.platform} platform`);\n        }\n        if (this.sqlite != null) {\n            const path = folderPath ? folderPath : \"default\";\n            const dbList = dbNameList ? dbNameList : [];\n            return this.sqlite.moveDatabasesAndAddSuffix(path, dbList);\n        }\n        else {\n            throw new Error(`can't move the databases`);\n        }\n    }\n    /**\n     * Import from a Json Object\n     * @param jsonstring\n     */\n    async importFromJson(jsonstring) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.importFromJson(jsonstring));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Is Json Object Valid\n     * @param jsonstring Check the validity of a given Json Object\n     */\n    async isJsonValid(jsonstring) {\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.isJsonValid(jsonstring));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Copy databases from public/assets/databases folder to application databases folder\n     */\n    async copyFromAssets(overwrite) {\n        const mOverwrite = overwrite != null ? overwrite : true;\n        console.log(`&&&& mOverwrite ${mOverwrite}`);\n        if (this.sqlite != null) {\n            try {\n                return Promise.resolve(await this.sqlite.copyFromAssets(mOverwrite));\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Initialize the Web store\n     */\n    async initWebStore() {\n        if (this.platform !== 'web') {\n            return Promise.reject(new Error(`not implemented for this platform: ${this.platform}`));\n        }\n        if (this.sqlite != null) {\n            try {\n                await this.sqlite.initWebStore();\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open`));\n        }\n    }\n    /**\n     * Save a database to store\n     * @param database\n     */\n    async saveToStore(database) {\n        if (this.platform !== 'web') {\n            return Promise.reject(new Error(`not implemented for this platform: ${this.platform}`));\n        }\n        if (this.sqlite != null) {\n            try {\n                await this.sqlite.saveToStore(database);\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(new Error(err));\n            }\n        }\n        else {\n            return Promise.reject(new Error(`no connection open for ${database}`));\n        }\n    }\n}\nSQLiteService.ɵfac = function SQLiteService_Factory(t) { return new (t || SQLiteService)(); };\nSQLiteService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SQLiteService, factory: SQLiteService.ɵfac });\n"]},"metadata":{},"sourceType":"module"}