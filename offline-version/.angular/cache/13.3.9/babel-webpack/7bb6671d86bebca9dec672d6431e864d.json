{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WebPlugin } from '@capacitor/core';\n\nfunction resolve(path) {\n  const posix = path.split('/').filter(item => item !== '.');\n  const newPosix = [];\n  posix.forEach(item => {\n    if (item === '..' && newPosix.length > 0 && newPosix[newPosix.length - 1] !== '..') {\n      newPosix.pop();\n    } else {\n      newPosix.push(item);\n    }\n  });\n  return newPosix.join('/');\n}\n\nfunction isPathParent(parent, children) {\n  parent = resolve(parent);\n  children = resolve(children);\n  const pathsA = parent.split('/');\n  const pathsB = children.split('/');\n  return parent !== children && pathsA.every((value, index) => value === pathsB[index]);\n}\n\nexport let FilesystemWeb = /*#__PURE__*/(() => {\n  class FilesystemWeb extends WebPlugin {\n    constructor() {\n      super(...arguments);\n      this.DB_VERSION = 1;\n      this.DB_NAME = 'Disc';\n      this._writeCmds = ['add', 'put', 'delete'];\n    }\n\n    initDb() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (_this._db !== undefined) {\n          return _this._db;\n        }\n\n        if (!('indexedDB' in window)) {\n          throw _this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n\n        return new Promise((resolve, reject) => {\n          const request = indexedDB.open(_this.DB_NAME, _this.DB_VERSION);\n          request.onupgradeneeded = FilesystemWeb.doUpgrade;\n\n          request.onsuccess = () => {\n            _this._db = request.result;\n            resolve(request.result);\n          };\n\n          request.onerror = () => reject(request.error);\n\n          request.onblocked = () => {\n            console.warn('db blocked');\n          };\n        });\n      })();\n    }\n\n    static doUpgrade(event) {\n      const eventTarget = event.target;\n      const db = eventTarget.result;\n\n      switch (event.oldVersion) {\n        case 0:\n        case 1:\n        default:\n          {\n            if (db.objectStoreNames.contains('FileStorage')) {\n              db.deleteObjectStore('FileStorage');\n            }\n\n            const store = db.createObjectStore('FileStorage', {\n              keyPath: 'path'\n            });\n            store.createIndex('by_folder', 'folder');\n          }\n      }\n    }\n\n    dbRequest(cmd, args) {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        const readFlag = _this2._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return _this2.initDb().then(conn => {\n          return new Promise((resolve, reject) => {\n            const tx = conn.transaction(['FileStorage'], readFlag);\n            const store = tx.objectStore('FileStorage');\n            const req = store[cmd](...args);\n\n            req.onsuccess = () => resolve(req.result);\n\n            req.onerror = () => reject(req.error);\n          });\n        });\n      })();\n    }\n\n    dbIndexRequest(indexName, cmd, args) {\n      var _this3 = this;\n\n      return _asyncToGenerator(function* () {\n        const readFlag = _this3._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return _this3.initDb().then(conn => {\n          return new Promise((resolve, reject) => {\n            const tx = conn.transaction(['FileStorage'], readFlag);\n            const store = tx.objectStore('FileStorage');\n            const index = store.index(indexName);\n            const req = index[cmd](...args);\n\n            req.onsuccess = () => resolve(req.result);\n\n            req.onerror = () => reject(req.error);\n          });\n        });\n      })();\n    }\n\n    getPath(directory, uriPath) {\n      const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n      let fsPath = '';\n      if (directory !== undefined) fsPath += '/' + directory;\n      if (uriPath !== '') fsPath += '/' + cleanedUriPath;\n      return fsPath;\n    }\n\n    clear() {\n      var _this4 = this;\n\n      return _asyncToGenerator(function* () {\n        const conn = yield _this4.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n      })();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n\n\n    readFile(options) {\n      var _this5 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this5.getPath(options.directory, options.path); // const encoding = options.encoding;\n\n\n        const entry = yield _this5.dbRequest('get', [path]);\n        if (entry === undefined) throw Error('File does not exist.');\n        return {\n          data: entry.content ? entry.content : ''\n        };\n      })();\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n\n\n    writeFile(options) {\n      var _this6 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this6.getPath(options.directory, options.path);\n\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = yield _this6.dbRequest('get', [path]);\n        if (occupiedEntry && occupiedEntry.type === 'directory') throw Error('The supplied path is a directory.');\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = yield _this6.dbRequest('get', [parentPath]);\n\n        if (parentEntry === undefined) {\n          const subDirIndex = parentPath.indexOf('/', 1);\n\n          if (subDirIndex !== -1) {\n            const parentArgPath = parentPath.substr(subDirIndex);\n            yield _this6.mkdir({\n              path: parentArgPath,\n              directory: options.directory,\n              recursive: doRecursive\n            });\n          }\n        }\n\n        const now = Date.now();\n        const pathObj = {\n          path: path,\n          folder: parentPath,\n          type: 'file',\n          size: data.length,\n          ctime: now,\n          mtime: now,\n          content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data\n        };\n        yield _this6.dbRequest('put', [pathObj]);\n        return {\n          uri: pathObj.path\n        };\n      })();\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n\n\n    appendFile(options) {\n      var _this7 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this7.getPath(options.directory, options.path);\n\n        let data = options.data; // const encoding = options.encoding;\n\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = yield _this7.dbRequest('get', [path]);\n        if (occupiedEntry && occupiedEntry.type === 'directory') throw Error('The supplied path is a directory.');\n        const parentEntry = yield _this7.dbRequest('get', [parentPath]);\n\n        if (parentEntry === undefined) {\n          const subDirIndex = parentPath.indexOf('/', 1);\n\n          if (subDirIndex !== -1) {\n            const parentArgPath = parentPath.substr(subDirIndex);\n            yield _this7.mkdir({\n              path: parentArgPath,\n              directory: options.directory,\n              recursive: true\n            });\n          }\n        }\n\n        if (occupiedEntry !== undefined) {\n          data = occupiedEntry.content + data;\n          ctime = occupiedEntry.ctime;\n        }\n\n        const pathObj = {\n          path: path,\n          folder: parentPath,\n          type: 'file',\n          size: data.length,\n          ctime: ctime,\n          mtime: now,\n          content: data\n        };\n        yield _this7.dbRequest('put', [pathObj]);\n      })();\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n\n\n    deleteFile(options) {\n      var _this8 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this8.getPath(options.directory, options.path);\n\n        const entry = yield _this8.dbRequest('get', [path]);\n        if (entry === undefined) throw Error('File does not exist.');\n        const entries = yield _this8.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        if (entries.length !== 0) throw Error('Folder is not empty.');\n        yield _this8.dbRequest('delete', [path]);\n      })();\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n\n\n    mkdir(options) {\n      var _this9 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this9.getPath(options.directory, options.path);\n\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = yield _this9.dbRequest('get', [parentPath]);\n        const occupiedEntry = yield _this9.dbRequest('get', [path]);\n        if (depth === 1) throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined) throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined) throw Error('Parent directory must exist');\n\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n          const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n          yield _this9.mkdir({\n            path: parentArgPath,\n            directory: options.directory,\n            recursive: doRecursive\n          });\n        }\n\n        const now = Date.now();\n        const pathObj = {\n          path: path,\n          folder: parentPath,\n          type: 'directory',\n          size: 0,\n          ctime: now,\n          mtime: now\n        };\n        yield _this9.dbRequest('put', [pathObj]);\n      })();\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n\n\n    rmdir(options) {\n      var _this10 = this;\n\n      return _asyncToGenerator(function* () {\n        const {\n          path,\n          directory,\n          recursive\n        } = options;\n\n        const fullPath = _this10.getPath(directory, path);\n\n        const entry = yield _this10.dbRequest('get', [fullPath]);\n        if (entry === undefined) throw Error('Folder does not exist.');\n        if (entry.type !== 'directory') throw Error('Requested path is not a directory');\n        const readDirResult = yield _this10.readdir({\n          path,\n          directory\n        });\n        if (readDirResult.files.length !== 0 && !recursive) throw Error('Folder is not empty');\n\n        for (const entry of readDirResult.files) {\n          const entryPath = `${path}/${entry}`;\n          const entryObj = yield _this10.stat({\n            path: entryPath,\n            directory\n          });\n\n          if (entryObj.type === 'file') {\n            yield _this10.deleteFile({\n              path: entryPath,\n              directory\n            });\n          } else {\n            yield _this10.rmdir({\n              path: entryPath,\n              directory,\n              recursive\n            });\n          }\n        }\n\n        yield _this10.dbRequest('delete', [fullPath]);\n      })();\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n\n\n    readdir(options) {\n      var _this11 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this11.getPath(options.directory, options.path);\n\n        const entry = yield _this11.dbRequest('get', [path]);\n        if (options.path !== '' && entry === undefined) throw Error('Folder does not exist.');\n        const entries = yield _this11.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n          return e.substring(path.length + 1);\n        });\n        return {\n          files: names\n        };\n      })();\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n\n\n    getUri(options) {\n      var _this12 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this12.getPath(options.directory, options.path);\n\n        let entry = yield _this12.dbRequest('get', [path]);\n\n        if (entry === undefined) {\n          entry = yield _this12.dbRequest('get', [path + '/']);\n        }\n\n        return {\n          uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path\n        };\n      })();\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n\n\n    stat(options) {\n      var _this13 = this;\n\n      return _asyncToGenerator(function* () {\n        const path = _this13.getPath(options.directory, options.path);\n\n        let entry = yield _this13.dbRequest('get', [path]);\n\n        if (entry === undefined) {\n          entry = yield _this13.dbRequest('get', [path + '/']);\n        }\n\n        if (entry === undefined) throw Error('Entry does not exist.');\n        return {\n          type: entry.type,\n          size: entry.size,\n          ctime: entry.ctime,\n          mtime: entry.mtime,\n          uri: entry.path\n        };\n      })();\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n\n\n    rename(options) {\n      var _this14 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this14._copy(options, true);\n      })();\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n\n\n    copy(options) {\n      var _this15 = this;\n\n      return _asyncToGenerator(function* () {\n        return _this15._copy(options, false);\n      })();\n    }\n\n    requestPermissions() {\n      return _asyncToGenerator(function* () {\n        return {\n          publicStorage: 'granted'\n        };\n      })();\n    }\n\n    checkPermissions() {\n      return _asyncToGenerator(function* () {\n        return {\n          publicStorage: 'granted'\n        };\n      })();\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n\n\n    _copy(options, doRename = false) {\n      var _this16 = this;\n\n      return _asyncToGenerator(function* () {\n        let {\n          toDirectory\n        } = options;\n        const {\n          to,\n          from,\n          directory: fromDirectory\n        } = options;\n\n        if (!to || !from) {\n          throw Error('Both to and from must be provided');\n        } // If no \"to\" directory is provided, use the \"from\" directory\n\n\n        if (!toDirectory) {\n          toDirectory = fromDirectory;\n        }\n\n        const fromPath = _this16.getPath(fromDirectory, from);\n\n        const toPath = _this16.getPath(toDirectory, to); // Test that the \"to\" and \"from\" locations are different\n\n\n        if (fromPath === toPath) {\n          return;\n        }\n\n        if (isPathParent(fromPath, toPath)) {\n          throw Error('To path cannot contain the from path');\n        } // Check the state of the \"to\" location\n\n\n        let toObj;\n\n        try {\n          toObj = yield _this16.stat({\n            path: to,\n            directory: toDirectory\n          });\n        } catch (e) {\n          // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n          const toPathComponents = to.split('/');\n          toPathComponents.pop();\n          const toPath = toPathComponents.join('/'); // Check the containing directory of the \"to\" location exists\n\n          if (toPathComponents.length > 0) {\n            const toParentDirectory = yield _this16.stat({\n              path: toPath,\n              directory: toDirectory\n            });\n\n            if (toParentDirectory.type !== 'directory') {\n              throw new Error('Parent directory of the to path is a file');\n            }\n          }\n        } // Cannot overwrite a directory\n\n\n        if (toObj && toObj.type === 'directory') {\n          throw new Error('Cannot overwrite a directory with a file');\n        } // Ensure the \"from\" object exists\n\n\n        const fromObj = yield _this16.stat({\n          path: from,\n          directory: fromDirectory\n        }); // Set the mtime/ctime of the supplied path\n\n        const updateTime = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (path, ctime, mtime) {\n            const fullPath = _this16.getPath(toDirectory, path);\n\n            const entry = yield _this16.dbRequest('get', [fullPath]);\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            yield _this16.dbRequest('put', [entry]);\n          });\n\n          return function updateTime(_x, _x2, _x3) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n\n        switch (fromObj.type) {\n          // The \"from\" object is a file\n          case 'file':\n            {\n              // Read the file\n              const file = yield _this16.readFile({\n                path: from,\n                directory: fromDirectory\n              }); // Optionally remove the file\n\n              if (doRename) {\n                yield _this16.deleteFile({\n                  path: from,\n                  directory: fromDirectory\n                });\n              } // Write the file to the new location\n\n\n              yield _this16.writeFile({\n                path: to,\n                directory: toDirectory,\n                data: file.data\n              }); // Copy the mtime/ctime of a renamed file\n\n              if (doRename) {\n                yield updateTime(to, ctime, fromObj.mtime);\n              } // Resolve promise\n\n\n              return;\n            }\n\n          case 'directory':\n            {\n              if (toObj) {\n                throw Error('Cannot move a directory over an existing object');\n              }\n\n              try {\n                // Create the to directory\n                yield _this16.mkdir({\n                  path: to,\n                  directory: toDirectory,\n                  recursive: false\n                }); // Copy the mtime/ctime of a renamed directory\n\n                if (doRename) {\n                  yield updateTime(to, ctime, fromObj.mtime);\n                }\n              } catch (e) {// ignore\n              } // Iterate over the contents of the from location\n\n\n              const contents = (yield _this16.readdir({\n                path: from,\n                directory: fromDirectory\n              })).files;\n\n              for (const filename of contents) {\n                // Move item from the from directory to the to directory\n                yield _this16._copy({\n                  from: `${from}/${filename}`,\n                  to: `${to}/${filename}`,\n                  directory: fromDirectory,\n                  toDirectory\n                }, doRename);\n              } // Optionally remove the original from directory\n\n\n              if (doRename) {\n                yield _this16.rmdir({\n                  path: from,\n                  directory: fromDirectory\n                });\n              }\n            }\n        }\n      })();\n    }\n\n  }\n\n  FilesystemWeb._debug = true;\n  return FilesystemWeb;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@capacitor/filesystem/dist/esm/web.js"],"names":["WebPlugin","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","arguments","DB_VERSION","DB_NAME","_writeCmds","initDb","_db","undefined","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","options","entry","Error","data","content","writeFile","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","deleteFile","entries","IDBKeyRange","only","depth","match","rmdir","fullPath","readDirResult","readdir","files","entryPath","entryObj","stat","names","map","e","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","contents","filename","_debug"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACnB,QAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,IAAI,IAAIA,IAAI,KAAK,GAAxC,CAAd;AACA,QAAMC,QAAQ,GAAG,EAAjB;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAcF,IAAI,IAAI;AAClB,QAAIA,IAAI,KAAK,IAAT,IACAC,QAAQ,CAACE,MAAT,GAAkB,CADlB,IAEAF,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,KAAkC,IAFtC,EAE4C;AACxCF,MAAAA,QAAQ,CAACG,GAAT;AACH,KAJD,MAKK;AACDH,MAAAA,QAAQ,CAACI,IAAT,CAAcL,IAAd;AACH;AACJ,GATD;AAUA,SAAOC,QAAQ,CAACK,IAAT,CAAc,GAAd,CAAP;AACH;;AACD,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,QAA9B,EAAwC;AACpCD,EAAAA,MAAM,GAAGb,OAAO,CAACa,MAAD,CAAhB;AACAC,EAAAA,QAAQ,GAAGd,OAAO,CAACc,QAAD,CAAlB;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACV,KAAP,CAAa,GAAb,CAAf;AACA,QAAMa,MAAM,GAAGF,QAAQ,CAACX,KAAT,CAAe,GAAf,CAAf;AACA,SAAQU,MAAM,KAAKC,QAAX,IACJC,MAAM,CAACE,KAAP,CAAa,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,KAAKF,MAAM,CAACG,KAAD,CAA/C,CADJ;AAEH;;AACD,WAAaC,aAAb;AAAO,QAAMA,aAAN,SAA4BrB,SAA5B,CAAsC;AACzCsB,IAAAA,WAAW,GAAG;AACV,YAAM,GAAGC,SAAT;AACA,WAAKC,UAAL,GAAkB,CAAlB;AACA,WAAKC,OAAL,GAAe,MAAf;AACA,WAAKC,UAAL,GAAkB,CAAC,KAAD,EAAQ,KAAR,EAAe,QAAf,CAAlB;AACH;;AACKC,IAAAA,MAAM,GAAG;AAAA;;AAAA;AACX,YAAI,KAAI,CAACC,GAAL,KAAaC,SAAjB,EAA4B;AACxB,iBAAO,KAAI,CAACD,GAAZ;AACH;;AACD,YAAI,EAAE,eAAeE,MAAjB,CAAJ,EAA8B;AAC1B,gBAAM,KAAI,CAACC,WAAL,CAAiB,wCAAjB,CAAN;AACH;;AACD,eAAO,IAAIC,OAAJ,CAAY,CAAC/B,OAAD,EAAUgC,MAAV,KAAqB;AACpC,gBAAMC,OAAO,GAAGC,SAAS,CAACC,IAAV,CAAe,KAAI,CAACX,OAApB,EAA6B,KAAI,CAACD,UAAlC,CAAhB;AACAU,UAAAA,OAAO,CAACG,eAAR,GAA0BhB,aAAa,CAACiB,SAAxC;;AACAJ,UAAAA,OAAO,CAACK,SAAR,GAAoB,MAAM;AACtB,YAAA,KAAI,CAACX,GAAL,GAAWM,OAAO,CAACM,MAAnB;AACAvC,YAAAA,OAAO,CAACiC,OAAO,CAACM,MAAT,CAAP;AACH,WAHD;;AAIAN,UAAAA,OAAO,CAACO,OAAR,GAAkB,MAAMR,MAAM,CAACC,OAAO,CAACQ,KAAT,CAA9B;;AACAR,UAAAA,OAAO,CAACS,SAAR,GAAoB,MAAM;AACtBC,YAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACH,WAFD;AAGH,SAXM,CAAP;AAPW;AAmBd;;AACe,WAATP,SAAS,CAACQ,KAAD,EAAQ;AACpB,YAAMC,WAAW,GAAGD,KAAK,CAACE,MAA1B;AACA,YAAMC,EAAE,GAAGF,WAAW,CAACP,MAAvB;;AACA,cAAQM,KAAK,CAACI,UAAd;AACI,aAAK,CAAL;AACA,aAAK,CAAL;AACA;AAAS;AACL,gBAAID,EAAE,CAACE,gBAAH,CAAoBC,QAApB,CAA6B,aAA7B,CAAJ,EAAiD;AAC7CH,cAAAA,EAAE,CAACI,iBAAH,CAAqB,aAArB;AACH;;AACD,kBAAMC,KAAK,GAAGL,EAAE,CAACM,iBAAH,CAAqB,aAArB,EAAoC;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAApC,CAAd;AACAF,YAAAA,KAAK,CAACG,WAAN,CAAkB,WAAlB,EAA+B,QAA/B;AACH;AATL;AAWH;;AACKC,IAAAA,SAAS,CAACC,GAAD,EAAMC,IAAN,EAAY;AAAA;;AAAA;AACvB,cAAMC,QAAQ,GAAG,MAAI,CAACnC,UAAL,CAAgBoC,OAAhB,CAAwBH,GAAxB,MAAiC,CAAC,CAAlC,GAAsC,WAAtC,GAAoD,UAArE;AACA,eAAO,MAAI,CAAChC,MAAL,GAAcoC,IAAd,CAAoBC,IAAD,IAAU;AAChC,iBAAO,IAAIhC,OAAJ,CAAY,CAAC/B,OAAD,EAAUgC,MAAV,KAAqB;AACpC,kBAAMgC,EAAE,GAAGD,IAAI,CAACE,WAAL,CAAiB,CAAC,aAAD,CAAjB,EAAkCL,QAAlC,CAAX;AACA,kBAAMP,KAAK,GAAGW,EAAE,CAACE,WAAH,CAAe,aAAf,CAAd;AACA,kBAAMC,GAAG,GAAGd,KAAK,CAACK,GAAD,CAAL,CAAW,GAAGC,IAAd,CAAZ;;AACAQ,YAAAA,GAAG,CAAC7B,SAAJ,GAAgB,MAAMtC,OAAO,CAACmE,GAAG,CAAC5B,MAAL,CAA7B;;AACA4B,YAAAA,GAAG,CAAC3B,OAAJ,GAAc,MAAMR,MAAM,CAACmC,GAAG,CAAC1B,KAAL,CAA1B;AACH,WANM,CAAP;AAOH,SARM,CAAP;AAFuB;AAW1B;;AACK2B,IAAAA,cAAc,CAACC,SAAD,EAAYX,GAAZ,EAAiBC,IAAjB,EAAuB;AAAA;;AAAA;AACvC,cAAMC,QAAQ,GAAG,MAAI,CAACnC,UAAL,CAAgBoC,OAAhB,CAAwBH,GAAxB,MAAiC,CAAC,CAAlC,GAAsC,WAAtC,GAAoD,UAArE;AACA,eAAO,MAAI,CAAChC,MAAL,GAAcoC,IAAd,CAAoBC,IAAD,IAAU;AAChC,iBAAO,IAAIhC,OAAJ,CAAY,CAAC/B,OAAD,EAAUgC,MAAV,KAAqB;AACpC,kBAAMgC,EAAE,GAAGD,IAAI,CAACE,WAAL,CAAiB,CAAC,aAAD,CAAjB,EAAkCL,QAAlC,CAAX;AACA,kBAAMP,KAAK,GAAGW,EAAE,CAACE,WAAH,CAAe,aAAf,CAAd;AACA,kBAAM/C,KAAK,GAAGkC,KAAK,CAAClC,KAAN,CAAYkD,SAAZ,CAAd;AACA,kBAAMF,GAAG,GAAGhD,KAAK,CAACuC,GAAD,CAAL,CAAW,GAAGC,IAAd,CAAZ;;AACAQ,YAAAA,GAAG,CAAC7B,SAAJ,GAAgB,MAAMtC,OAAO,CAACmE,GAAG,CAAC5B,MAAL,CAA7B;;AACA4B,YAAAA,GAAG,CAAC3B,OAAJ,GAAc,MAAMR,MAAM,CAACmC,GAAG,CAAC1B,KAAL,CAA1B;AACH,WAPM,CAAP;AAQH,SATM,CAAP;AAFuC;AAY1C;;AACD6B,IAAAA,OAAO,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AACxB,YAAMC,cAAc,GAAGD,OAAO,KAAK5C,SAAZ,GAAwB4C,OAAO,CAACE,OAAR,CAAgB,cAAhB,EAAgC,EAAhC,CAAxB,GAA8D,EAArF;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIJ,SAAS,KAAK3C,SAAlB,EACI+C,MAAM,IAAI,MAAMJ,SAAhB;AACJ,UAAIC,OAAO,KAAK,EAAhB,EACIG,MAAM,IAAI,MAAMF,cAAhB;AACJ,aAAOE,MAAP;AACH;;AACKC,IAAAA,KAAK,GAAG;AAAA;;AAAA;AACV,cAAMb,IAAI,SAAS,MAAI,CAACrC,MAAL,EAAnB;AACA,cAAMsC,EAAE,GAAGD,IAAI,CAACE,WAAL,CAAiB,CAAC,aAAD,CAAjB,EAAkC,WAAlC,CAAX;AACA,cAAMZ,KAAK,GAAGW,EAAE,CAACE,WAAH,CAAe,aAAf,CAAd;AACAb,QAAAA,KAAK,CAACuB,KAAN;AAJU;AAKb;AACD;AACJ;AACA;AACA;AACA;;;AACUC,IAAAA,QAAQ,CAACC,OAAD,EAAU;AAAA;;AAAA;AACpB,cAAM7E,IAAI,GAAG,MAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb,CADoB,CAEpB;;;AACA,cAAM8E,KAAK,SAAU,MAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAArB;AACA,YAAI8E,KAAK,KAAKnD,SAAd,EACI,MAAMoD,KAAK,CAAC,sBAAD,CAAX;AACJ,eAAO;AAAEC,UAAAA,IAAI,EAAEF,KAAK,CAACG,OAAN,GAAgBH,KAAK,CAACG,OAAtB,GAAgC;AAAxC,SAAP;AANoB;AAOvB;AACD;AACJ;AACA;AACA;AACA;;;AACUC,IAAAA,SAAS,CAACL,OAAD,EAAU;AAAA;;AAAA;AACrB,cAAM7E,IAAI,GAAG,MAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb;;AACA,cAAMgF,IAAI,GAAGH,OAAO,CAACG,IAArB;AACA,cAAMG,WAAW,GAAGN,OAAO,CAACO,SAA5B;AACA,cAAMC,aAAa,SAAU,MAAI,CAAC7B,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAA7B;AACA,YAAIqF,aAAa,IAAIA,aAAa,CAACC,IAAd,KAAuB,WAA5C,EACI,MAAMP,KAAK,CAAC,mCAAD,CAAX;AACJ,cAAMQ,QAAQ,GAAGV,OAAO,CAACU,QAAzB;AACA,cAAMC,UAAU,GAAGxF,IAAI,CAACyF,MAAL,CAAY,CAAZ,EAAezF,IAAI,CAAC0F,WAAL,CAAiB,GAAjB,CAAf,CAAnB;AACA,cAAMC,WAAW,SAAU,MAAI,CAACnC,SAAL,CAAe,KAAf,EAAsB,CAACgC,UAAD,CAAtB,CAA3B;;AACA,YAAIG,WAAW,KAAKhE,SAApB,EAA+B;AAC3B,gBAAMiE,WAAW,GAAGJ,UAAU,CAAC5B,OAAX,CAAmB,GAAnB,EAAwB,CAAxB,CAApB;;AACA,cAAIgC,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB,kBAAMC,aAAa,GAAGL,UAAU,CAACC,MAAX,CAAkBG,WAAlB,CAAtB;AACA,kBAAM,MAAI,CAACE,KAAL,CAAW;AACb9F,cAAAA,IAAI,EAAE6F,aADO;AAEbvB,cAAAA,SAAS,EAAEO,OAAO,CAACP,SAFN;AAGbc,cAAAA,SAAS,EAAED;AAHE,aAAX,CAAN;AAKH;AACJ;;AACD,cAAMY,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,cAAME,OAAO,GAAG;AACZjG,UAAAA,IAAI,EAAEA,IADM;AAEZkG,UAAAA,MAAM,EAAEV,UAFI;AAGZF,UAAAA,IAAI,EAAE,MAHM;AAIZa,UAAAA,IAAI,EAAEnB,IAAI,CAACzE,MAJC;AAKZ6F,UAAAA,KAAK,EAAEL,GALK;AAMZM,UAAAA,KAAK,EAAEN,GANK;AAOZd,UAAAA,OAAO,EAAE,CAACM,QAAD,IAAaP,IAAI,CAACpB,OAAL,CAAa,GAAb,KAAqB,CAAlC,GAAsCoB,IAAI,CAAC9E,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAtC,GAA2D8E;AAPxD,SAAhB;AASA,cAAM,MAAI,CAACxB,SAAL,CAAe,KAAf,EAAsB,CAACyC,OAAD,CAAtB,CAAN;AACA,eAAO;AACHK,UAAAA,GAAG,EAAEL,OAAO,CAACjG;AADV,SAAP;AAhCqB;AAmCxB;AACD;AACJ;AACA;AACA;AACA;;;AACUuG,IAAAA,UAAU,CAAC1B,OAAD,EAAU;AAAA;;AAAA;AACtB,cAAM7E,IAAI,GAAG,MAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb;;AACA,YAAIgF,IAAI,GAAGH,OAAO,CAACG,IAAnB,CAFsB,CAGtB;;AACA,cAAMQ,UAAU,GAAGxF,IAAI,CAACyF,MAAL,CAAY,CAAZ,EAAezF,IAAI,CAAC0F,WAAL,CAAiB,GAAjB,CAAf,CAAnB;AACA,cAAMK,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,YAAIK,KAAK,GAAGL,GAAZ;AACA,cAAMV,aAAa,SAAU,MAAI,CAAC7B,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAA7B;AACA,YAAIqF,aAAa,IAAIA,aAAa,CAACC,IAAd,KAAuB,WAA5C,EACI,MAAMP,KAAK,CAAC,mCAAD,CAAX;AACJ,cAAMY,WAAW,SAAU,MAAI,CAACnC,SAAL,CAAe,KAAf,EAAsB,CAACgC,UAAD,CAAtB,CAA3B;;AACA,YAAIG,WAAW,KAAKhE,SAApB,EAA+B;AAC3B,gBAAMiE,WAAW,GAAGJ,UAAU,CAAC5B,OAAX,CAAmB,GAAnB,EAAwB,CAAxB,CAApB;;AACA,cAAIgC,WAAW,KAAK,CAAC,CAArB,EAAwB;AACpB,kBAAMC,aAAa,GAAGL,UAAU,CAACC,MAAX,CAAkBG,WAAlB,CAAtB;AACA,kBAAM,MAAI,CAACE,KAAL,CAAW;AACb9F,cAAAA,IAAI,EAAE6F,aADO;AAEbvB,cAAAA,SAAS,EAAEO,OAAO,CAACP,SAFN;AAGbc,cAAAA,SAAS,EAAE;AAHE,aAAX,CAAN;AAKH;AACJ;;AACD,YAAIC,aAAa,KAAK1D,SAAtB,EAAiC;AAC7BqD,UAAAA,IAAI,GAAGK,aAAa,CAACJ,OAAd,GAAwBD,IAA/B;AACAoB,UAAAA,KAAK,GAAGf,aAAa,CAACe,KAAtB;AACH;;AACD,cAAMH,OAAO,GAAG;AACZjG,UAAAA,IAAI,EAAEA,IADM;AAEZkG,UAAAA,MAAM,EAAEV,UAFI;AAGZF,UAAAA,IAAI,EAAE,MAHM;AAIZa,UAAAA,IAAI,EAAEnB,IAAI,CAACzE,MAJC;AAKZ6F,UAAAA,KAAK,EAAEA,KALK;AAMZC,UAAAA,KAAK,EAAEN,GANK;AAOZd,UAAAA,OAAO,EAAED;AAPG,SAAhB;AASA,cAAM,MAAI,CAACxB,SAAL,CAAe,KAAf,EAAsB,CAACyC,OAAD,CAAtB,CAAN;AAnCsB;AAoCzB;AACD;AACJ;AACA;AACA;AACA;;;AACUO,IAAAA,UAAU,CAAC3B,OAAD,EAAU;AAAA;;AAAA;AACtB,cAAM7E,IAAI,GAAG,MAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb;;AACA,cAAM8E,KAAK,SAAU,MAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAArB;AACA,YAAI8E,KAAK,KAAKnD,SAAd,EACI,MAAMoD,KAAK,CAAC,sBAAD,CAAX;AACJ,cAAM0B,OAAO,SAAS,MAAI,CAACtC,cAAL,CAAoB,WAApB,EAAiC,YAAjC,EAA+C,CACjEuC,WAAW,CAACC,IAAZ,CAAiB3G,IAAjB,CADiE,CAA/C,CAAtB;AAGA,YAAIyG,OAAO,CAAClG,MAAR,KAAmB,CAAvB,EACI,MAAMwE,KAAK,CAAC,sBAAD,CAAX;AACJ,cAAM,MAAI,CAACvB,SAAL,CAAe,QAAf,EAAyB,CAACxD,IAAD,CAAzB,CAAN;AAVsB;AAWzB;AACD;AACJ;AACA;AACA;AACA;;;AACU8F,IAAAA,KAAK,CAACjB,OAAD,EAAU;AAAA;;AAAA;AACjB,cAAM7E,IAAI,GAAG,MAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb;;AACA,cAAMmF,WAAW,GAAGN,OAAO,CAACO,SAA5B;AACA,cAAMI,UAAU,GAAGxF,IAAI,CAACyF,MAAL,CAAY,CAAZ,EAAezF,IAAI,CAAC0F,WAAL,CAAiB,GAAjB,CAAf,CAAnB;AACA,cAAMkB,KAAK,GAAG,CAAC5G,IAAI,CAAC6G,KAAL,CAAW,KAAX,KAAqB,EAAtB,EAA0BtG,MAAxC;AACA,cAAMoF,WAAW,SAAU,MAAI,CAACnC,SAAL,CAAe,KAAf,EAAsB,CAACgC,UAAD,CAAtB,CAA3B;AACA,cAAMH,aAAa,SAAU,MAAI,CAAC7B,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAA7B;AACA,YAAI4G,KAAK,KAAK,CAAd,EACI,MAAM7B,KAAK,CAAC,8BAAD,CAAX;AACJ,YAAIM,aAAa,KAAK1D,SAAtB,EACI,MAAMoD,KAAK,CAAC,uCAAD,CAAX;AACJ,YAAI,CAACI,WAAD,IAAgByB,KAAK,KAAK,CAA1B,IAA+BjB,WAAW,KAAKhE,SAAnD,EACI,MAAMoD,KAAK,CAAC,6BAAD,CAAX;;AACJ,YAAII,WAAW,IAAIyB,KAAK,KAAK,CAAzB,IAA8BjB,WAAW,KAAKhE,SAAlD,EAA6D;AACzD,gBAAMkE,aAAa,GAAGL,UAAU,CAACC,MAAX,CAAkBD,UAAU,CAAC5B,OAAX,CAAmB,GAAnB,EAAwB,CAAxB,CAAlB,CAAtB;AACA,gBAAM,MAAI,CAACkC,KAAL,CAAW;AACb9F,YAAAA,IAAI,EAAE6F,aADO;AAEbvB,YAAAA,SAAS,EAAEO,OAAO,CAACP,SAFN;AAGbc,YAAAA,SAAS,EAAED;AAHE,WAAX,CAAN;AAKH;;AACD,cAAMY,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,cAAME,OAAO,GAAG;AACZjG,UAAAA,IAAI,EAAEA,IADM;AAEZkG,UAAAA,MAAM,EAAEV,UAFI;AAGZF,UAAAA,IAAI,EAAE,WAHM;AAIZa,UAAAA,IAAI,EAAE,CAJM;AAKZC,UAAAA,KAAK,EAAEL,GALK;AAMZM,UAAAA,KAAK,EAAEN;AANK,SAAhB;AAQA,cAAM,MAAI,CAACvC,SAAL,CAAe,KAAf,EAAsB,CAACyC,OAAD,CAAtB,CAAN;AA9BiB;AA+BpB;AACD;AACJ;AACA;AACA;;;AACUa,IAAAA,KAAK,CAACjC,OAAD,EAAU;AAAA;;AAAA;AACjB,cAAM;AAAE7E,UAAAA,IAAF;AAAQsE,UAAAA,SAAR;AAAmBc,UAAAA;AAAnB,YAAiCP,OAAvC;;AACA,cAAMkC,QAAQ,GAAG,OAAI,CAAC1C,OAAL,CAAaC,SAAb,EAAwBtE,IAAxB,CAAjB;;AACA,cAAM8E,KAAK,SAAU,OAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACuD,QAAD,CAAtB,CAArB;AACA,YAAIjC,KAAK,KAAKnD,SAAd,EACI,MAAMoD,KAAK,CAAC,wBAAD,CAAX;AACJ,YAAID,KAAK,CAACQ,IAAN,KAAe,WAAnB,EACI,MAAMP,KAAK,CAAC,mCAAD,CAAX;AACJ,cAAMiC,aAAa,SAAS,OAAI,CAACC,OAAL,CAAa;AAAEjH,UAAAA,IAAF;AAAQsE,UAAAA;AAAR,SAAb,CAA5B;AACA,YAAI0C,aAAa,CAACE,KAAd,CAAoB3G,MAApB,KAA+B,CAA/B,IAAoC,CAAC6E,SAAzC,EACI,MAAML,KAAK,CAAC,qBAAD,CAAX;;AACJ,aAAK,MAAMD,KAAX,IAAoBkC,aAAa,CAACE,KAAlC,EAAyC;AACrC,gBAAMC,SAAS,GAAI,GAAEnH,IAAK,IAAG8E,KAAM,EAAnC;AACA,gBAAMsC,QAAQ,SAAS,OAAI,CAACC,IAAL,CAAU;AAAErH,YAAAA,IAAI,EAAEmH,SAAR;AAAmB7C,YAAAA;AAAnB,WAAV,CAAvB;;AACA,cAAI8C,QAAQ,CAAC9B,IAAT,KAAkB,MAAtB,EAA8B;AAC1B,kBAAM,OAAI,CAACkB,UAAL,CAAgB;AAAExG,cAAAA,IAAI,EAAEmH,SAAR;AAAmB7C,cAAAA;AAAnB,aAAhB,CAAN;AACH,WAFD,MAGK;AACD,kBAAM,OAAI,CAACwC,KAAL,CAAW;AAAE9G,cAAAA,IAAI,EAAEmH,SAAR;AAAmB7C,cAAAA,SAAnB;AAA8Bc,cAAAA;AAA9B,aAAX,CAAN;AACH;AACJ;;AACD,cAAM,OAAI,CAAC5B,SAAL,CAAe,QAAf,EAAyB,CAACuD,QAAD,CAAzB,CAAN;AArBiB;AAsBpB;AACD;AACJ;AACA;AACA;AACA;;;AACUE,IAAAA,OAAO,CAACpC,OAAD,EAAU;AAAA;;AAAA;AACnB,cAAM7E,IAAI,GAAG,OAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb;;AACA,cAAM8E,KAAK,SAAU,OAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAArB;AACA,YAAI6E,OAAO,CAAC7E,IAAR,KAAiB,EAAjB,IAAuB8E,KAAK,KAAKnD,SAArC,EACI,MAAMoD,KAAK,CAAC,wBAAD,CAAX;AACJ,cAAM0B,OAAO,SAAS,OAAI,CAACtC,cAAL,CAAoB,WAApB,EAAiC,YAAjC,EAA+C,CAACuC,WAAW,CAACC,IAAZ,CAAiB3G,IAAjB,CAAD,CAA/C,CAAtB;AACA,cAAMsH,KAAK,GAAGb,OAAO,CAACc,GAAR,CAAYC,CAAC,IAAI;AAC3B,iBAAOA,CAAC,CAACC,SAAF,CAAYzH,IAAI,CAACO,MAAL,GAAc,CAA1B,CAAP;AACH,SAFa,CAAd;AAGA,eAAO;AAAE2G,UAAAA,KAAK,EAAEI;AAAT,SAAP;AATmB;AAUtB;AACD;AACJ;AACA;AACA;AACA;;;AACUI,IAAAA,MAAM,CAAC7C,OAAD,EAAU;AAAA;;AAAA;AAClB,cAAM7E,IAAI,GAAG,OAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb;;AACA,YAAI8E,KAAK,SAAU,OAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAAnB;;AACA,YAAI8E,KAAK,KAAKnD,SAAd,EAAyB;AACrBmD,UAAAA,KAAK,SAAU,OAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAI,GAAG,GAAR,CAAtB,CAAf;AACH;;AACD,eAAO;AACHsG,UAAAA,GAAG,EAAE,CAACxB,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAAC9E,IAArD,KAA8DA;AADhE,SAAP;AANkB;AASrB;AACD;AACJ;AACA;AACA;AACA;;;AACUqH,IAAAA,IAAI,CAACxC,OAAD,EAAU;AAAA;;AAAA;AAChB,cAAM7E,IAAI,GAAG,OAAI,CAACqE,OAAL,CAAaQ,OAAO,CAACP,SAArB,EAAgCO,OAAO,CAAC7E,IAAxC,CAAb;;AACA,YAAI8E,KAAK,SAAU,OAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAD,CAAtB,CAAnB;;AACA,YAAI8E,KAAK,KAAKnD,SAAd,EAAyB;AACrBmD,UAAAA,KAAK,SAAU,OAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACxD,IAAI,GAAG,GAAR,CAAtB,CAAf;AACH;;AACD,YAAI8E,KAAK,KAAKnD,SAAd,EACI,MAAMoD,KAAK,CAAC,uBAAD,CAAX;AACJ,eAAO;AACHO,UAAAA,IAAI,EAAER,KAAK,CAACQ,IADT;AAEHa,UAAAA,IAAI,EAAErB,KAAK,CAACqB,IAFT;AAGHC,UAAAA,KAAK,EAAEtB,KAAK,CAACsB,KAHV;AAIHC,UAAAA,KAAK,EAAEvB,KAAK,CAACuB,KAJV;AAKHC,UAAAA,GAAG,EAAExB,KAAK,CAAC9E;AALR,SAAP;AARgB;AAenB;AACD;AACJ;AACA;AACA;AACA;;;AACU2H,IAAAA,MAAM,CAAC9C,OAAD,EAAU;AAAA;;AAAA;AAClB,eAAO,OAAI,CAAC+C,KAAL,CAAW/C,OAAX,EAAoB,IAApB,CAAP;AADkB;AAErB;AACD;AACJ;AACA;AACA;AACA;;;AACUgD,IAAAA,IAAI,CAAChD,OAAD,EAAU;AAAA;;AAAA;AAChB,eAAO,OAAI,CAAC+C,KAAL,CAAW/C,OAAX,EAAoB,KAApB,CAAP;AADgB;AAEnB;;AACKiD,IAAAA,kBAAkB,GAAG;AAAA;AACvB,eAAO;AAAEC,UAAAA,aAAa,EAAE;AAAjB,SAAP;AADuB;AAE1B;;AACKC,IAAAA,gBAAgB,GAAG;AAAA;AACrB,eAAO;AAAED,UAAAA,aAAa,EAAE;AAAjB,SAAP;AADqB;AAExB;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACUH,IAAAA,KAAK,CAAC/C,OAAD,EAAUoD,QAAQ,GAAG,KAArB,EAA4B;AAAA;;AAAA;AACnC,YAAI;AAAEC,UAAAA;AAAF,YAAkBrD,OAAtB;AACA,cAAM;AAAEsD,UAAAA,EAAF;AAAMC,UAAAA,IAAN;AAAY9D,UAAAA,SAAS,EAAE+D;AAAvB,YAAyCxD,OAA/C;;AACA,YAAI,CAACsD,EAAD,IAAO,CAACC,IAAZ,EAAkB;AACd,gBAAMrD,KAAK,CAAC,mCAAD,CAAX;AACH,SALkC,CAMnC;;;AACA,YAAI,CAACmD,WAAL,EAAkB;AACdA,UAAAA,WAAW,GAAGG,aAAd;AACH;;AACD,cAAMC,QAAQ,GAAG,OAAI,CAACjE,OAAL,CAAagE,aAAb,EAA4BD,IAA5B,CAAjB;;AACA,cAAMG,MAAM,GAAG,OAAI,CAAClE,OAAL,CAAa6D,WAAb,EAA0BC,EAA1B,CAAf,CAXmC,CAYnC;;;AACA,YAAIG,QAAQ,KAAKC,MAAjB,EAAyB;AACrB;AACH;;AACD,YAAI5H,YAAY,CAAC2H,QAAD,EAAWC,MAAX,CAAhB,EAAoC;AAChC,gBAAMxD,KAAK,CAAC,sCAAD,CAAX;AACH,SAlBkC,CAmBnC;;;AACA,YAAIyD,KAAJ;;AACA,YAAI;AACAA,UAAAA,KAAK,SAAS,OAAI,CAACnB,IAAL,CAAU;AACpBrH,YAAAA,IAAI,EAAEmI,EADc;AAEpB7D,YAAAA,SAAS,EAAE4D;AAFS,WAAV,CAAd;AAIH,SALD,CAMA,OAAOV,CAAP,EAAU;AACN;AACA,gBAAMiB,gBAAgB,GAAGN,EAAE,CAACjI,KAAH,CAAS,GAAT,CAAzB;AACAuI,UAAAA,gBAAgB,CAACjI,GAAjB;AACA,gBAAM+H,MAAM,GAAGE,gBAAgB,CAAC/H,IAAjB,CAAsB,GAAtB,CAAf,CAJM,CAKN;;AACA,cAAI+H,gBAAgB,CAAClI,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,kBAAMmI,iBAAiB,SAAS,OAAI,CAACrB,IAAL,CAAU;AACtCrH,cAAAA,IAAI,EAAEuI,MADgC;AAEtCjE,cAAAA,SAAS,EAAE4D;AAF2B,aAAV,CAAhC;;AAIA,gBAAIQ,iBAAiB,CAACpD,IAAlB,KAA2B,WAA/B,EAA4C;AACxC,oBAAM,IAAIP,KAAJ,CAAU,2CAAV,CAAN;AACH;AACJ;AACJ,SA1CkC,CA2CnC;;;AACA,YAAIyD,KAAK,IAAIA,KAAK,CAAClD,IAAN,KAAe,WAA5B,EAAyC;AACrC,gBAAM,IAAIP,KAAJ,CAAU,0CAAV,CAAN;AACH,SA9CkC,CA+CnC;;;AACA,cAAM4D,OAAO,SAAS,OAAI,CAACtB,IAAL,CAAU;AAC5BrH,UAAAA,IAAI,EAAEoI,IADsB;AAE5B9D,UAAAA,SAAS,EAAE+D;AAFiB,SAAV,CAAtB,CAhDmC,CAoDnC;;AACA,cAAMO,UAAU;AAAA,uCAAG,WAAO5I,IAAP,EAAaoG,KAAb,EAAoBC,KAApB,EAA8B;AAC7C,kBAAMU,QAAQ,GAAG,OAAI,CAAC1C,OAAL,CAAa6D,WAAb,EAA0BlI,IAA1B,CAAjB;;AACA,kBAAM8E,KAAK,SAAU,OAAI,CAACtB,SAAL,CAAe,KAAf,EAAsB,CAACuD,QAAD,CAAtB,CAArB;AACAjC,YAAAA,KAAK,CAACsB,KAAN,GAAcA,KAAd;AACAtB,YAAAA,KAAK,CAACuB,KAAN,GAAcA,KAAd;AACA,kBAAM,OAAI,CAAC7C,SAAL,CAAe,KAAf,EAAsB,CAACsB,KAAD,CAAtB,CAAN;AACH,WANe;;AAAA,0BAAV8D,UAAU;AAAA;AAAA;AAAA,WAAhB;;AAOA,cAAMxC,KAAK,GAAGuC,OAAO,CAACvC,KAAR,GAAgBuC,OAAO,CAACvC,KAAxB,GAAgCJ,IAAI,CAACD,GAAL,EAA9C;;AACA,gBAAQ4C,OAAO,CAACrD,IAAhB;AACI;AACA,eAAK,MAAL;AAAa;AACT;AACA,oBAAMuD,IAAI,SAAS,OAAI,CAACjE,QAAL,CAAc;AAC7B5E,gBAAAA,IAAI,EAAEoI,IADuB;AAE7B9D,gBAAAA,SAAS,EAAE+D;AAFkB,eAAd,CAAnB,CAFS,CAMT;;AACA,kBAAIJ,QAAJ,EAAc;AACV,sBAAM,OAAI,CAACzB,UAAL,CAAgB;AAClBxG,kBAAAA,IAAI,EAAEoI,IADY;AAElB9D,kBAAAA,SAAS,EAAE+D;AAFO,iBAAhB,CAAN;AAIH,eAZQ,CAaT;;;AACA,oBAAM,OAAI,CAACnD,SAAL,CAAe;AACjBlF,gBAAAA,IAAI,EAAEmI,EADW;AAEjB7D,gBAAAA,SAAS,EAAE4D,WAFM;AAGjBlD,gBAAAA,IAAI,EAAE6D,IAAI,CAAC7D;AAHM,eAAf,CAAN,CAdS,CAmBT;;AACA,kBAAIiD,QAAJ,EAAc;AACV,sBAAMW,UAAU,CAACT,EAAD,EAAK/B,KAAL,EAAYuC,OAAO,CAACtC,KAApB,CAAhB;AACH,eAtBQ,CAuBT;;;AACA;AACH;;AACD,eAAK,WAAL;AAAkB;AACd,kBAAImC,KAAJ,EAAW;AACP,sBAAMzD,KAAK,CAAC,iDAAD,CAAX;AACH;;AACD,kBAAI;AACA;AACA,sBAAM,OAAI,CAACe,KAAL,CAAW;AACb9F,kBAAAA,IAAI,EAAEmI,EADO;AAEb7D,kBAAAA,SAAS,EAAE4D,WAFE;AAGb9C,kBAAAA,SAAS,EAAE;AAHE,iBAAX,CAAN,CAFA,CAOA;;AACA,oBAAI6C,QAAJ,EAAc;AACV,wBAAMW,UAAU,CAACT,EAAD,EAAK/B,KAAL,EAAYuC,OAAO,CAACtC,KAApB,CAAhB;AACH;AACJ,eAXD,CAYA,OAAOmB,CAAP,EAAU,CACN;AACH,eAlBa,CAmBd;;;AACA,oBAAMsB,QAAQ,GAAG,OAAO,OAAI,CAAC7B,OAAL,CAAa;AACjCjH,gBAAAA,IAAI,EAAEoI,IAD2B;AAEjC9D,gBAAAA,SAAS,EAAE+D;AAFsB,eAAb,CAAP,EAGbnB,KAHJ;;AAIA,mBAAK,MAAM6B,QAAX,IAAuBD,QAAvB,EAAiC;AAC7B;AACA,sBAAM,OAAI,CAAClB,KAAL,CAAW;AACbQ,kBAAAA,IAAI,EAAG,GAAEA,IAAK,IAAGW,QAAS,EADb;AAEbZ,kBAAAA,EAAE,EAAG,GAAEA,EAAG,IAAGY,QAAS,EAFT;AAGbzE,kBAAAA,SAAS,EAAE+D,aAHE;AAIbH,kBAAAA;AAJa,iBAAX,EAKHD,QALG,CAAN;AAMH,eAhCa,CAiCd;;;AACA,kBAAIA,QAAJ,EAAc;AACV,sBAAM,OAAI,CAACnB,KAAL,CAAW;AACb9G,kBAAAA,IAAI,EAAEoI,IADO;AAEb9D,kBAAAA,SAAS,EAAE+D;AAFE,iBAAX,CAAN;AAIH;AACJ;AApEL;AA7DmC;AAmItC;;AAtdwC;;AAwd7ClH,EAAAA,aAAa,CAAC6H,MAAd,GAAuB,IAAvB;AAxdA,SAAa7H,aAAb;AAAA","sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"]},"metadata":{},"sourceType":"module"}