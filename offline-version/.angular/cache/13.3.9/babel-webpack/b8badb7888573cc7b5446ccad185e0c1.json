{"ast":null,"code":"import _asyncToGenerator from \"/Users/jaymardaligdig/Desktop/poskimay/offline-version/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createSchemaVersion1, twoUsers, createSchemaVersion2, setArrayVersion2, userMessages } from '../utils/upgrade-version-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport let TestupgradeversionPage = /*#__PURE__*/(() => {\n  class TestupgradeversionPage {\n    constructor(_sqlite) {\n      this._sqlite = _sqlite;\n      this.initPlugin = false;\n    }\n\n    ngAfterViewInit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const showAlert = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (message) {\n            yield Dialog.alert({\n              title: 'Error Dialog',\n              message: message\n            });\n          });\n\n          return function showAlert(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n\n        try {\n          yield _this.runTest();\n          document.querySelector('.sql-allsuccess').classList.remove('display');\n          console.log(\"$$$ runTest was successful\");\n        } catch (err) {\n          document.querySelector('.sql-allfailure').classList.remove('display');\n          console.log(`$$$ runTest failed ${err.message}`);\n          yield showAlert(err.message);\n        }\n      })();\n    }\n\n    runTest() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          let result = yield _this2._sqlite.echo(\"Hello World\"); // ************************************************\n          // Create Database Version 1\n          // ************************************************\n          // initialize the connection for Database Version 1\n\n          let db = yield _this2._sqlite.createConnection(\"test-updversion\", false, \"no-encryption\", 1); // check if the databases exist \n          // and delete it for multiple successive tests\n\n          yield deleteDatabase(db); // open db test-updversion\n\n          yield db.open(); // create tables in db\n\n          let ret = yield db.execute(createSchemaVersion1);\n\n          if (ret.changes.changes < 0) {\n            return Promise.reject(new Error(\"Execute createSchemaVersion1 failed\"));\n          } // delete users if any from previous run\n\n\n          let delUsers = `DELETE FROM users;`;\n          ret = yield db.execute(delUsers, false); // add two users in db\n\n          ret = yield db.execute(twoUsers);\n\n          if (ret.changes.changes !== 2) {\n            return Promise.reject(new Error(\"Execute twoUsers failed\"));\n          } // select all users in db\n\n\n          ret = yield db.query(\"SELECT * FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 Users failed\"));\n          } // select users where company is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 Users where company is null failed\"));\n          } // select users where size is NULL in db\n\n\n          ret = yield db.query(\"SELECT * FROM users WHERE size IS NULL;\");\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[1].name !== \"Jones\") {\n            return Promise.reject(new Error(\"Query 2 Users where size is null failed\"));\n          } // close db test-updversion\n\n\n          yield db.close(); // close connection to test-updversion\n\n          yield _this2._sqlite.closeConnection(\"test-updversion\"); // ************************************************\n          // Create Database Version 2\n          // ************************************************\n          // set the upgrade statement\n\n          yield _this2._sqlite.addUpgradeStatement(\"test-updversion\", 1, 2, createSchemaVersion2, setArrayVersion2); // initialize the connection for Database Version 2\n\n          db = yield _this2._sqlite.createConnection(\"test-updversion\", false, \"no-encryption\", 2); // open db test-updversion\n\n          yield db.open(); // select all user's country in db\n\n          ret = yield db.query(\"SELECT country FROM users;\");\n\n          if (ret.values.length !== 2 || ret.values[0].country !== \"United Kingdom\" || ret.values[1].country !== \"Australia\") {\n            return Promise.reject(new Error(\"Query 2 Users Version 2 failed\"));\n          } // select all messages for user 1\n\n\n          ret = yield db.query(userMessages, [\"1\"]);\n\n          if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" || ret.values[0].title !== \"test message 1\" || ret.values[1].name !== \"Whiteley\" || ret.values[1].title !== \"test message 3\") {\n            return Promise.reject(new Error(\"Query 2 Messages Version 2 failed\"));\n          } // select all messages for user 2\n\n\n          ret = yield db.query(userMessages, [\"2\"]);\n\n          if (ret.values.length !== 1 || ret.values[0].name !== \"Jones\" || ret.values[0].title !== \"test message 2\") {\n            return Promise.reject(new Error(\"Query 1 Messages for Users 2 Version 2 failed\"));\n          } // close connection to test-updversion\n\n\n          yield _this2._sqlite.closeConnection(\"test-updversion\");\n          return Promise.resolve();\n        } catch (err) {\n          return Promise.reject(err);\n        }\n      })();\n    }\n\n  }\n\n  TestupgradeversionPage.ɵfac = function TestupgradeversionPage_Factory(t) {\n    return new (t || TestupgradeversionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService));\n  };\n\n  TestupgradeversionPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TestupgradeversionPage,\n    selectors: [[\"app-testupgradeversion\"]],\n    decls: 19,\n    vars: 2,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]],\n    template: function TestupgradeversionPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testupgradeversion \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testupgradeversion\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test upgrade version \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n      }\n    },\n    directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle],\n    styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3R1cGdyYWRldmVyc2lvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0dXBncmFkZXZlcnNpb24ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"]\n  });\n  return TestupgradeversionPage;\n})();","map":{"version":3,"sources":["/Users/jaymardaligdig/Desktop/poskimay/offline-version/src/app/test/testupgradeversion/testupgradeversion.page.ts"],"names":["createSchemaVersion1","twoUsers","createSchemaVersion2","setArrayVersion2","userMessages","deleteDatabase","Dialog","i0","i1","i2","TestupgradeversionPage","constructor","_sqlite","initPlugin","ngAfterViewInit","showAlert","message","alert","title","runTest","document","querySelector","classList","remove","console","log","err","result","echo","db","createConnection","open","ret","execute","changes","Promise","reject","Error","delUsers","query","values","length","name","close","closeConnection","addUpgradeStatement","country","resolve","ɵfac","TestupgradeversionPage_Factory","t","ɵɵdirectiveInject","SQLiteService","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","TestupgradeversionPage_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵproperty","ɵɵadvance","directives","IonHeader","IonToolbar","IonButtons","IonBackButton","IonBackButtonDelegate","IonTitle","IonContent","IonCard","IonCardTitle","styles"],"mappings":"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","sourcesContent":["import { createSchemaVersion1, twoUsers, createSchemaVersion2, setArrayVersion2, userMessages } from '../utils/upgrade-version-utils';\nimport { deleteDatabase } from '../utils/db-utils';\nimport { Dialog } from '@capacitor/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/sqlite.service\";\nimport * as i2 from \"@ionic/angular\";\nexport class TestupgradeversionPage {\n    constructor(_sqlite) {\n        this._sqlite = _sqlite;\n        this.initPlugin = false;\n    }\n    async ngAfterViewInit() {\n        const showAlert = async (message) => {\n            await Dialog.alert({\n                title: 'Error Dialog',\n                message: message,\n            });\n        };\n        try {\n            await this.runTest();\n            document.querySelector('.sql-allsuccess').classList\n                .remove('display');\n            console.log(\"$$$ runTest was successful\");\n        }\n        catch (err) {\n            document.querySelector('.sql-allfailure').classList\n                .remove('display');\n            console.log(`$$$ runTest failed ${err.message}`);\n            await showAlert(err.message);\n        }\n    }\n    async runTest() {\n        try {\n            let result = await this._sqlite.echo(\"Hello World\");\n            // ************************************************\n            // Create Database Version 1\n            // ************************************************\n            // initialize the connection for Database Version 1\n            let db = await this._sqlite\n                .createConnection(\"test-updversion\", false, \"no-encryption\", 1);\n            // check if the databases exist \n            // and delete it for multiple successive tests\n            await deleteDatabase(db);\n            // open db test-updversion\n            await db.open();\n            // create tables in db\n            let ret = await db.execute(createSchemaVersion1);\n            if (ret.changes.changes < 0) {\n                return Promise.reject(new Error(\"Execute createSchemaVersion1 failed\"));\n            }\n            // delete users if any from previous run\n            let delUsers = `DELETE FROM users;`;\n            ret = await db.execute(delUsers, false);\n            // add two users in db\n            ret = await db.execute(twoUsers);\n            if (ret.changes.changes !== 2) {\n                return Promise.reject(new Error(\"Execute twoUsers failed\"));\n            }\n            // select all users in db\n            ret = await db.query(\"SELECT * FROM users;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 2 Users failed\"));\n            }\n            // select users where company is NULL in db\n            ret = await db.query(\"SELECT * FROM users WHERE company IS NULL;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 2 Users where company is null failed\"));\n            }\n            // select users where size is NULL in db\n            ret = await db.query(\"SELECT * FROM users WHERE size IS NULL;\");\n            if (ret.values.length !== 2 || ret.values[0].name !== \"Whiteley\" ||\n                ret.values[1].name !== \"Jones\") {\n                return Promise.reject(new Error(\"Query 2 Users where size is null failed\"));\n            }\n            // close db test-updversion\n            await db.close();\n            // close connection to test-updversion\n            await this._sqlite.closeConnection(\"test-updversion\");\n            // ************************************************\n            // Create Database Version 2\n            // ************************************************\n            // set the upgrade statement\n            await this._sqlite.addUpgradeStatement(\"test-updversion\", 1, 2, createSchemaVersion2, setArrayVersion2);\n            // initialize the connection for Database Version 2\n            db = await this._sqlite\n                .createConnection(\"test-updversion\", false, \"no-encryption\", 2);\n            // open db test-updversion\n            await db.open();\n            // select all user's country in db\n            ret = await db.query(\"SELECT country FROM users;\");\n            if (ret.values.length !== 2 ||\n                ret.values[0].country !== \"United Kingdom\" ||\n                ret.values[1].country !== \"Australia\") {\n                return Promise.reject(new Error(\"Query 2 Users Version 2 failed\"));\n            }\n            // select all messages for user 1\n            ret = await db.query(userMessages, [\"1\"]);\n            if (ret.values.length !== 2 ||\n                ret.values[0].name !== \"Whiteley\" ||\n                ret.values[0].title !== \"test message 1\" ||\n                ret.values[1].name !== \"Whiteley\" ||\n                ret.values[1].title !== \"test message 3\") {\n                return Promise.reject(new Error(\"Query 2 Messages Version 2 failed\"));\n            }\n            // select all messages for user 2\n            ret = await db.query(userMessages, [\"2\"]);\n            if (ret.values.length !== 1 ||\n                ret.values[0].name !== \"Jones\" ||\n                ret.values[0].title !== \"test message 2\") {\n                return Promise.reject(new Error(\"Query 1 Messages for Users 2 Version 2 failed\"));\n            }\n            // close connection to test-updversion\n            await this._sqlite.closeConnection(\"test-updversion\");\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n}\nTestupgradeversionPage.ɵfac = function TestupgradeversionPage_Factory(t) { return new (t || TestupgradeversionPage)(i0.ɵɵdirectiveInject(i1.SQLiteService)); };\nTestupgradeversionPage.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: TestupgradeversionPage, selectors: [[\"app-testupgradeversion\"]], decls: 19, vars: 2, consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"defaultHref\", \"/\"], [3, \"fullscreen\"], [\"collapse\", \"condense\"], [\"size\", \"large\"], [\"id\", \"container\"], [1, \"card-sqlite\"], [1, \"sql-allsuccess\", \"display\"], [1, \"sql-allfailure\", \"display\"]], template: function TestupgradeversionPage_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1);\n        i0.ɵɵelement(3, \"ion-back-button\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \" Testupgradeversion \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 3)(7, \"ion-header\", 4)(8, \"ion-toolbar\")(9, \"ion-title\", 5);\n        i0.ɵɵtext(10, \"Testupgradeversion\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"div\", 6)(12, \"ion-card\", 7)(13, \"ion-card-title\");\n        i0.ɵɵtext(14, \" Results of refactor sqlite test upgrade version \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 8);\n        i0.ɵɵtext(16, \" The set of tests was successful \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 9);\n        i0.ɵɵtext(18, \" The set of tests failed \");\n        i0.ɵɵelementEnd()()()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"fullscreen\", true);\n    } }, directives: [i2.IonHeader, i2.IonToolbar, i2.IonButtons, i2.IonBackButton, i2.IonBackButtonDelegate, i2.IonTitle, i2.IonContent, i2.IonCard, i2.IonCardTitle], styles: [\"#container[_ngcontent-%COMP%] {\\n  text-align: center;\\n  position: relative;\\n  left: 0;\\n  right: 0;\\n  top: 5%;\\n}\\n\\n#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%] {\\n  font-size: 20px;\\n  line-height: 26px;\\n}\\n\\n.display[_ngcontent-%COMP%] {\\n  display: none;\\n}\\n\\n.card-sqlite[_ngcontent-%COMP%] {\\n  padding: 0 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%]   p[_ngcontent-%COMP%] {\\n  font-size: 1rem;\\n}\\n\\nion-card[_ngcontent-%COMP%] {\\n  --background: var(--ion-background-color);\\n  --color: var(--ion-text-color);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3R1cGdyYWRldmVyc2lvbi5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxrQkFBQTtFQUVBLGtCQUFBO0VBQ0EsT0FBQTtFQUNBLFFBQUE7RUFDQSxPQUFBO0FBQUY7O0FBR0E7RUFDRSxlQUFBO0VBQ0EsaUJBQUE7QUFBRjs7QUFJQTtFQUNFLGFBQUE7QUFERjs7QUFHQTtFQUNFLGVBQUE7QUFBRjs7QUFFQTtFQUNFLGVBQUE7QUFDRjs7QUFDQTtFQUNFLHlDQUFBO0VBQ0EsOEJBQUE7QUFFRiIsImZpbGUiOiJ0ZXN0dXBncmFkZXZlcnNpb24ucGFnZS5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI2NvbnRhaW5lciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcblxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGxlZnQ6IDA7XG4gIHJpZ2h0OiAwO1xuICB0b3A6IDUlO1xufVxuXG4jY29udGFpbmVyIHN0cm9uZyB7XG4gIGZvbnQtc2l6ZTogMjBweDtcbiAgbGluZS1oZWlnaHQ6IDI2cHg7XG59XG5cblxuLmRpc3BsYXkge1xuICBkaXNwbGF5OiBub25lO1xufVxuLmNhcmQtc3FsaXRlIHtcbiAgcGFkZGluZzogMCAxcmVtO1xufVxuaW9uLWNhcmQgcCB7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbn1cbmlvbi1jYXJkIHtcbiAgLS1iYWNrZ3JvdW5kOiB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvcik7XG4gIC0tY29sb3I6IHZhcigtLWlvbi10ZXh0LWNvbG9yKTtcbn1cbiJdfQ== */\"] });\n"]},"metadata":{},"sourceType":"module"}